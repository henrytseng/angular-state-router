{"version":3,"sources":["state-router.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","$state","restrict","scope","link","element","attrs","css","on","change","sref","preventDefault",2,"angular","provider","factory","run","$rootScope","$urlManager","$resolution","$on","location","arguments","$ready","directive","./directives/sref","./services/resolution","./services/state-router","./services/url-manager",3,"$q","$injector","_self","_resolve","resolve","resolvesPromises","forEach","value","key","resolution","isString","get","invoke","when","all","_register","request","next","current","then","locals","extend","err","priority","$use",4,"UrlDictionary","Parameters","QueueHandler","_provider","this","_configuration","historyLength","_stateLibrary","_stateCache","_urlDictionary","_layerList","_parseName","nameParams","match","npart","substring","indexOf","ppart","lastIndexOf","name","params","_setStateDefaults","data","inherit","_validateStateName","nameChain","split","_validateStateQuery","query","_compareStates","b","equals","_getNameChain","nameList","map","item","list","slice","join","filter","_getState","state","stateChain","parent","nextState","copy","merge","_defineState","url","add","options","init","initialLocation","$get","$location","_current","_options","_initalLocation","_inst","_history","_isInit","_pushHistory","push","splice","_changeState","deferred","defer","nameExpr","error","queue","prevState","$broadcast","execute","reject","promise","handler","hasOwnProperty","readyDeferred","parse","library","validate","history","lookup","ref","active","RegExp","casted","substr","transformed","../utils/parameters","../utils/queue-handler","../utils/url-dictionary",5,"_url","_update","path","re","replace","search","update","lastUrl","nextUrl",6,"reParseObjectLiteral","reString","reNumber","_resolveValue","NaN","_listify","str","sanitizeName","sanitizeValue","resolveValue","listify",7,"_list","_data","constructor","Array","concat","callback","nextHandler","executionList","sort","priotity","shift",8,"_patterns","_refs","_params","Url","prototype","pattern","pathChain","searchExpr","chunk","defaults","p","q","queryparams","_findPattern","check","paramParser","urlMatch","pop","varMatch","./url",9,"querystring","pairs","nameValue"],"mappings":"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","file":"state-router.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$state', function ($state) {\n  return {\n    restrict: 'A',\n    scope: {\n    },\n    link: function(scope, element, attrs) {\n      element.css('cursor', 'pointer');\n      element.on('click', function(e) {\n        $state.change(attrs.sref);\n        e.preventDefault();\n      });\n    }\n\n  };\n}];\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\n/* global angular:false */\n\n// CommonJS\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = 'angular-state-router';\n}\n\n// Instantiate module\nangular.module('angular-state-router', [])\n\n  .provider('$state', require('./services/state-router'))\n\n  .factory('$urlManager', require('./services/url-manager'))\n\n  .factory('$resolution', require('./services/resolution'))\n\n  .run(['$rootScope', '$state', '$urlManager', '$resolution', function($rootScope, $state, $urlManager, $resolution) {\n    // Update location changes\n    $rootScope.$on('$locationChangeSuccess', function() {\n      $urlManager.location(arguments);\n    });\n\n    // Initialize\n    $state.$ready();\n  }])\n\n  .directive('sref', require('./directives/sref'));\n\n},{\"./directives/sref\":1,\"./services/resolution\":3,\"./services/state-router\":4,\"./services/url-manager\":5}],3:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$q', '$injector', '$state', function($q, $injector, $state) {\n\n  // Instance\n  var _self = {};\n\n  /**\n   * Resolve\n   * \n   * @param  {Object}  resolve A hash Object of items to resolve\n   * @return {Promise}         A promise fulfilled when templates retireved\n   */\n  var _resolve = function(resolve) {\n    var resolvesPromises = {};\n\n    angular.forEach(resolve, function(value, key) {\n      var resolution = angular.isString(value) ? $injector.get(value) : $injector.invoke(value, null, null, key);\n      resolvesPromises[key] = $q.when(resolution);\n    });\n\n    return $q.all(resolvesPromises);\n  };\n  _self.resolve = _resolve;\n\n  /**\n   * Middleware\n   * \n   * @param  {Object}   request A data Object\n   * @param  {Function} next    A callback, function(err)\n   */\n  var _register = function(request, next) {\n    var current = $state.current();\n\n    if(!current) {\n      return next();\n    }\n\n    _resolve(current.resolve || {}).then(function(locals) {\n      angular.extend(request.locals, locals);\n      next();\n\n    }, function(err) {\n      next(new Error('Error resolving state'));\n    });\n  };\n  _register.priority = 100;\n\n  // Register middleware layer\n  $state.$use(_register);\n\n  return _self;\n}];\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar UrlDictionary = require('../utils/url-dictionary');\nvar Parameters = require('../utils/parameters');\nvar QueueHandler = require('../utils/queue-handler');\n\nmodule.exports = [function StateRouterProvider() {\n  // Provider\n  var _provider = this;\n\n  // Configuration, global options\n  var _configuration = {\n    historyLength: 5\n  };\n\n  // State definition library\n  var _stateLibrary = {};\n  var _stateCache = {};\n\n  // URL to state dictionary\n  var _urlDictionary = new UrlDictionary();\n\n  // Middleware layers\n  var _layerList = [];\n\n  /**\n   * Parse state notation name-params.  \n   * \n   * Assume all parameter values are strings\n   * \n   * @param  {String} nameParams A name-params string\n   * @return {Object}             A name string and param Object\n   */\n  var _parseName = function(nameParams) {\n    if(nameParams && nameParams.match(/^[a-zA-Z0-9_\\.]*\\(.*\\)$/)) {\n      var npart = nameParams.substring(0, nameParams.indexOf('('));\n      var ppart = Parameters( nameParams.substring(nameParams.indexOf('(')+1, nameParams.lastIndexOf(')')) );\n\n      return {\n        name: npart,\n        params: ppart\n      };\n\n    } else {\n      return {\n        name: nameParams,\n        params: null\n      };\n    }\n  };\n\n  /**\n   * Add default values to a state\n   * \n   * @param  {Object} data An Object\n   * @return {Object}      An Object\n   */\n  var _setStateDefaults = function(data) {\n    // Default values\n    data.inherit = (typeof data.inherit === 'undefined') ? true : data.inherit;\n\n    return data;\n  };\n\n  /**\n   * Validate state name\n   * \n   * @param  {String} name A unique identifier for the state; using dot-notation\n   * @return {Boolean}     True if name is valid, false if not\n   */\n  var _validateStateName = function(name) {\n    name = name || '';\n\n    // TODO optimize with RegExp\n\n    var nameChain = name.split('.');\n    for(var i=0; i<nameChain.length; i++) {\n      if(!nameChain[i].match(/[a-zA-Z0-9_]+/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Validate state query\n   * \n   * @param  {String} query A query for the state; using dot-notation\n   * @return {Boolean}      True if name is valid, false if not\n   */\n  var _validateStateQuery = function(query) {\n    query = query || '';\n    \n    // TODO optimize with RegExp\n\n    var nameChain = query.split('.');\n    for(var i=0; i<nameChain.length; i++) {\n      if(!nameChain[i].match(/(\\*(\\*)?|[a-zA-Z0-9_]+)/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Compare two states, compares values.  \n   * \n   * @return {Boolean} True if states are the same, false if states are different\n   */\n  var _compareStates = function(a, b) {\n    a = a || {};\n    b = b || {};\n    return a.name === b.name && angular.equals(a.params, b.params);\n  };\n\n  /**\n   * Get a list of parent states\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @return {Array}         An Array of parent states\n   */\n  var _getNameChain = function(name) {\n    var nameList = name.split('.');\n\n    return nameList\n      .map(function(item, i, list) {\n        return list.slice(0, i+1).join('.');\n      })\n      .filter(function(item) {\n        return item !== null;\n      });\n  };\n\n  /**\n   * Internal method to crawl library heirarchy\n   * \n   * @param  {String} name   A unique identifier for the state; using state-notation\n   * @return {Object}        A state data Object\n   */\n  var _getState = function(name) {\n    name = name || '';\n\n    var state = null;\n\n    // Only use valid state queries\n    if(!_validateStateName(name)) {\n      return null;\n    \n    // Use cache if exists\n    } else if(_stateCache[name]) {\n      return _stateCache[name];\n    }\n\n    var nameChain = _getNameChain(name);\n\n    var stateChain = nameChain\n      .map(function(name) {\n        return _stateLibrary[name];\n      })\n      .filter(function(parent) {\n        return !!parent;\n      });\n\n    // Walk up checking inheritance\n    for(var i=stateChain.length-1; i>=0; i--) {\n      if(stateChain[i]) {\n        var nextState = angular.copy(stateChain[i]);\n        delete(nextState.resolve);\n        state = angular.merge(nextState, state || {});\n      }\n\n      if(state && state.inherit === false) break;\n    }\n\n    // Store in cache\n    _stateCache[name] = state;\n\n    return state;\n  };\n\n  /**\n   * Internal method to store a state definition.  Parameters should be included in data Object not state name.  \n   * \n   * @param  {String} name A unique identifier for the state; using state-notation\n   * @param  {Object} data A state definition data Object\n   * @return {Object}      A state data Object\n   */\n  var _defineState = function(name, data) {\n    if(name === null || typeof name === 'undefined') {\n      throw new Error('Name cannot be null.');\n    \n    // Only use valid state names\n    } else if(!_validateStateName(name)) {\n      throw new Error('Invalid state name.');\n    }\n\n    // Create state\n    var state = angular.copy(data);\n\n    // Use defaults\n    _setStateDefaults(state);\n\n    // Named state\n    state.name = name;\n\n    // Set definition\n    _stateLibrary[name] = state;\n\n    // Reset cache\n    _stateCache = {};\n\n    // URL mapping\n    if(state.url) {\n      _urlDictionary.add(state.url, state);\n    }\n\n    return data;\n  };\n\n  /**\n   * Set configuration data parameters for StateRouter\n   *\n   * Including parameters:\n   * \n   * - historyLength   {Number} Defaults to 5\n   * - initialLocation {Object} An Object{name:String, params:Object} for initial state transition\n   *\n   * @param  {Object}         options A data Object\n   * @return {$stateProvider}         Itself; chainable\n   */\n  this.options = function(options) {\n    angular.extend(_configuration, options || {});\n    return _provider;\n  };\n\n  /**\n   * Set/get state\n   * \n   * @return {$stateProvider} Itself; chainable\n   */\n  this.state = function(name, state) {\n    if(!state) {\n      return _getState(name);\n    }\n    _defineState(name, state);\n    return _provider;\n  };\n\n  /**\n   * Set initialization parameters; deferred to $ready()\n   * \n   * @param  {String}         name   A iniital state\n   * @param  {Object}         params A data object of params\n   * @return {$stateProvider}        Itself; chainable\n   */\n  this.init = function(name, params) {\n    _configuration.initialLocation = {\n      name: name,\n      params: params\n    };\n    return _provider;\n  };\n\n  /**\n   * Get instance\n   */\n  this.$get = ['$rootScope', '$location', '$q', function StateRouterFactory($rootScope, $location, $q) {\n\n    // Current state\n    var _current;\n\n    var _options;\n    var _initalLocation;\n    var _history = [];\n    var _isInit = false;\n\n    /**\n     * Internal method to add history and correct length\n     * \n     * @param  {Object} data An Object\n     */\n    var _pushHistory = function(data) {\n      // Keep the last n states (e.g. - defaults 5)\n      var historyLength = _options.historyLength || 5;\n\n      if(data) {\n        _history.push(data);\n      }\n\n      // Update length\n      if(_history.length > historyLength) {\n        _history.splice(0, _history.length - historyLength);\n      }\n    };\n\n    /**\n     * Internal method to change to state.  Parameters in `params` takes precedence over state-notation `name` expression.  \n     * \n     * @param  {String}  name          A unique identifier for the state; using state-notation including optional parameters\n     * @param  {Object}  params        A data object of params\n     * @return {Promise}               A promise fulfilled when state change occurs\n     */\n    var _changeState = function(name, params) {\n      var deferred = $q.defer();\n\n      params = params || {};\n\n      // Parse state-notation expression\n      var nameExpr = _parseName(name);\n      name = nameExpr.name;\n      params = angular.extend(nameExpr.params || {}, params);\n\n      var error = null;\n      var request = {\n        name: name,\n        params: params,\n        locals: {}\n      };\n\n      // Compile execution phases\n      var queue = QueueHandler().data(request);\n\n      var nextState = angular.copy(_getState(name));\n      var prevState = _current;\n\n      if(nextState) {\n        // Set locals\n        nextState.locals = request.locals;\n        \n        // Set parameters\n        nextState.params = angular.extend(nextState.params || {}, params);\n      }\n\n      // Does not exist\n      if(nextState === null) {\n        queue.add(function(data, next) {\n          error = new Error('Requested state was not defined.');\n          error.code = 'notfound';\n\n          $rootScope.$broadcast('$stateChangeErrorNotFound', error, request);\n          next(error);\n        });\n\n      // State not changed\n      } else if(_compareStates(prevState, nextState)) {\n        queue.add(function(data, next) {\n          _current = nextState;\n          next();\n        });\n        \n      // Valid state exists\n      } else {\n\n        // Make state change\n        queue.add(function(data, next) {\n          if(prevState) _pushHistory(prevState);\n          _current = nextState;\n          \n          next();\n        });\n\n        // Process started\n        queue.add(function(data, next) {\n          $rootScope.$broadcast('$stateChangeBegin', request);\n          next();\n        });\n\n        // Add middleware\n        queue.add(_layerList);\n\n        // Process ended\n        queue.add(function(data, next) {\n          $rootScope.$broadcast('$stateChangeEnd', request);\n          next();\n        });\n      }\n\n      // Run\n      queue.execute(function(err) {\n        if(err) {\n          $rootScope.$broadcast('$stateChangeError', err, request);\n          deferred.reject(err);\n\n        } else {\n          deferred.resolve(request);\n        }\n\n        $rootScope.$broadcast('$stateChangeComplete', request);\n      });\n\n      return deferred.promise;\n    };\n\n    // Instance\n    var _inst;\n    _inst = {\n\n      /**\n       * Get options\n       *\n       * @return {Object} A configured options\n       */\n      options: function() {\n        // Hasn't been initialized\n        if(!_options) {\n          _options = angular.copy(_configuration);\n        }\n\n        return _options;\n      },\n\n      /**\n       * Set/get state\n       */\n      state: function(name, state) {\n        if(!state) {\n          return _getState(name);\n        }\n        _defineState(name, state);\n        return _inst;\n      },\n\n      /**\n       * Internal method to add middleware, executing next(err);\n       * \n       * @param  {Function}    handler A callback, function(request, next)\n       * @return {$state}              Itself; chainable\n       */\n      $use: function(handler) {\n        if(typeof handler !== 'function') {\n          throw new Error('Middleware must be a function.');\n        }\n\n        _layerList.push(handler);\n        return _inst;\n      },\n\n      /**\n       * Internal method to perform initialization\n       * \n       * @return {$state} Itself; chainable\n       */\n      $ready: function() {\n        if(!_isInit) {\n          _isInit = true;\n\n          // Configuration\n          if(!_options) {\n            _options = angular.copy(_configuration);\n          }\n\n          // Initial location\n          if(_options.hasOwnProperty('initialLocation')) {\n            _initalLocation = angular.copy(_options.initialLocation);\n          }\n\n          var readyDeferred = null;\n\n          // Initial location\n          if($location.url() !== '') {\n            readyDeferred = _inst.$location($location.url());\n\n          // Initialize with state\n          } else if(_initalLocation) {\n            readyDeferred = _changeState(_initalLocation.name, _initalLocation.params);\n          }\n\n          $q.when(readyDeferred).then(function() {\n            $rootScope.$broadcast('$stateInit');\n          });\n        }\n\n        return _inst;\n      },\n\n      // Parse state notation name-params.  \n      parse: _parseName,\n\n      // Retrieve definition of states\n      library: function() {\n        return _stateLibrary;\n      },\n\n      // Validation\n      validate: {\n        name: _validateStateName,\n        query: _validateStateQuery\n      },\n\n      // Retrieve history\n      history: function() {\n        return _history;\n      },\n\n      /**\n       * Change state, asynchronous operation\n       * \n       * @param  {String}      name     A unique identifier for the state; using dot-notation\n       * @param  {Object}      [params] A parameters data object\n       * @return {$state}               Itself; chainable\n       */\n      change: function(name, params) {\n        return _changeState(name, params);\n      },\n\n      /**\n       * Internal method to change state based on $location.url(), asynchronous operation using internal methods, quiet fallback.  \n       * \n       * @param  {String}      url        A url matching defind states\n       * @param  {Function}    [callback] A callback, function(err)\n       * @return {$state}                 Itself; chainable\n       */\n      $location: function(url) {\n        var data = _urlDictionary.lookup(url);\n\n        if(data) {\n          var state = data.ref;\n\n          if(state) {\n            // Parse params from url\n            return _changeState(state.name, data.params);\n          }\n        }\n\n        return $q.reject(new Error('Unable to find location in library'));\n      },\n      \n      /**\n       * Retrieve copy of current state\n       * \n       * @return {Object} A copy of current state\n       */\n      current: function() {\n        return (!_current) ? null : angular.copy(_current);\n      },\n\n      /**\n       * Check query against current state\n       *\n       * @param  {Mixed}   query  A string using state notation or a RegExp\n       * @param  {Object}  params A parameters data object\n       * @return {Boolean}        A true if state is parent to current state\n       */\n      active: function(query, params) {\n        query = query || '';\n        \n        // No state\n        if(!_current) {\n          return false;\n\n        // Use RegExp matching\n        } else if(query instanceof RegExp) {\n          return !!_current.name.match(query);\n\n        // String; state dot-notation\n        } else if(typeof query === 'string') {\n\n          // Cast string to RegExp\n          if(query.match(/^\\/.*\\/$/)) {\n            var casted = query.substr(1, query.length-2);\n            return !!_current.name.match(new RegExp(casted));\n\n          // Transform to state notation\n          } else {\n            var transformed = query\n              .split('.')\n              .map(function(item) {\n                if(item === '*') {\n                  return '[a-zA-Z0-9_]*';\n                } else if(item === '**') {\n                  return '[a-zA-Z0-9_\\\\.]*';\n                } else {\n                  return item;\n                }\n              })\n              .join('\\\\.');\n\n            return !!_current.name.match(new RegExp(transformed));\n          }\n        }\n\n        // Non-matching\n        return false;\n      }\n    };\n\n    return _inst;\n  }];\n\n}];\n\n},{\"../utils/parameters\":6,\"../utils/queue-handler\":7,\"../utils/url-dictionary\":8}],5:[function(require,module,exports){\n'use strict';\n\nvar UrlDictionary = require('../utils/url-dictionary');\n\nmodule.exports = ['$state', '$location', '$rootScope', function($state, $location, $rootScope) {\n  var _url = $location.url();\n\n  // Instance\n  var _self = {};\n\n  /**\n   * Update URL based on state\n   */\n  var _update = function() {\n    var current = $state.current();\n\n    if(current && current.url) {\n      var path;\n      path = current.url;\n\n      // Add parameters or use default parameters\n      var params = current.params || {};\n      var query = {};\n      for(var name in params) {\n        var re = new RegExp(':'+name, 'g');\n        if(path.match(re)) {\n          path = path.replace(re, params[name]);\n        } else {\n          query[name] = params[name];\n        }\n      }\n\n      $location.path(path);\n      $location.search(query);\n      \n      _url = $location.url();\n    }\n  };\n\n  /**\n   * Update url based on state\n   */\n  _self.update = function() {\n    _update();\n  };\n\n  /**\n   * Detect URL change and dispatch state change\n   */\n  _self.location = function() {\n    var lastUrl = _url;\n    var nextUrl = $location.url();\n\n    if(nextUrl !== lastUrl) {\n      _url = nextUrl;\n\n      $state.$location(_url);\n      $rootScope.$broadcast('$locationStateUpdate');\n    }\n  };\n\n  // Register middleware layer\n  $state.$use(function(request, next) {\n    _update();\n    next();\n  });\n\n  return _self;\n}];\n\n},{\"../utils/url-dictionary\":8}],6:[function(require,module,exports){\n'use strict';\n\n// Parse Object literal name-value pairs\nvar reParseObjectLiteral = /([,{]\\s*((\"|')(.*?)\\3|\\w*)|(:\\s*([+-]?(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[eE][+-]?\\d+)?|true|false|null|(\"|')(.*?)\\7|\\[[^\\]]*\\])))/g;\n\n// Match Strings\nvar reString = /^(\"|')(.*?)\\1$/;\n\n// TODO Add escaped string quotes \\' and \\\" to string matcher\n\n// Match Number (int/float/exponential)\nvar reNumber = /^[+-]?(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[eE][+-]?\\d+)?$/;\n\n/**\n * Parse string value into Boolean/Number/Array/String/null.\n *\n * Strings are surrounded by a pair of matching quotes\n * \n * @param  {String} value A String value to parse\n * @return {Mixed}        A Boolean/Number/Array/String/null\n */\nvar _resolveValue = function(value) {\n\n  // Boolean: true\n  if(value === 'true') {\n    return true;\n\n  // Boolean: false\n  } else if(value === 'false') {\n    return false;\n\n  // Null\n  } else if(value === 'null') {\n    return null;\n\n  // String\n  } else if(value.match(reString)) {\n    return value.substr(1, value.length-2);\n\n  // Number\n  } else if(value.match(reNumber)) {\n    return +value;\n\n  // NaN\n  } else if(value === 'NaN') {\n    return NaN;\n\n  // TODO add matching with Arrays and parse\n  \n  }\n\n  // Unable to resolve\n  return value;\n};\n\n// Find values in an object literal\nvar _listify = function(str) {\n\n  // Trim\n  str = str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n\n  if(str.match(/^\\s*{.*}\\s*$/) === null) {\n    throw new Error('Parameters expects an Object');\n  }\n\n  var sanitizeName = function(name) {\n    return name.replace(/^[\\{,]?\\s*[\"']?/, '').replace(/[\"']?\\s*$/, '');\n  };\n\n  var sanitizeValue = function(value) {\n    var str = value.replace(/^(:)?\\s*/, '').replace(/\\s*$/, '');\n    return _resolveValue(str);\n  };\n\n  return str.match(reParseObjectLiteral).map(function(item, i, list) {\n    return i%2 === 0 ? sanitizeName(item) : sanitizeValue(item);\n  });\n};\n\n/**\n * Create a params Object from string\n * \n * @param {String} str A stringified version of Object literal\n */\nvar Parameters = function(str) {\n  str = str || '';\n\n  // Instance\n  var _self = {};\n\n  _listify(str).forEach(function(item, i, list) {\n    if(i%2 === 0) {\n      _self[item] = list[i+1];\n    }\n  });\n\n  return _self;\n};\n\nmodule.exports = Parameters;\n\nmodule.exports.resolveValue = _resolveValue;\nmodule.exports.listify = _listify;\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\n/**\n * Execute a series of functions; used in tandem with middleware\n */\nvar QueueHandler = function() {\n  var _list = [];\n  var _data = null;\n\n  var _self = {\n\n    /**\n     * Add a handler\n     * \n     * @param {Mixed}         handler A Function or an Array of Functions to add to the queue\n     * @return {QueueHandler}         Itself; chainable\n     */\n    add: function(handler) {\n      if(handler && handler.constructor === Array) {\n        _list = _list.concat(handler);\n      } else {\n        _list.push(handler);\n      }\n      return this;\n    },\n\n    /**\n     * Data object\n     * \n     * @param  {Object} data A data object made available to each handler\n     * @return {QueueHandler}         Itself; chainable\n     */\n    data: function(data) {\n      _data = data;\n      return this;\n    },\n\n    /**\n     * Begin execution and trigger callback at the end\n     * \n     * @param  {Function} callback A callback, function(err)\n     * @return {QueueHandler}         Itself; chainable\n     */\n    execute: function(callback) {\n      var nextHandler;\n      var executionList = _list.slice(0).sort(function(a, b) {\n        return (a.priotity || 1) < (b.priotity || 1);\n      });\n\n      nextHandler = function() {\n        var handler = executionList.shift();\n\n        // Complete\n        if(!handler) {\n          callback(null);\n\n        // Next handler\n        } else {\n          handler.call(null, _data, function(err) {\n            // Error\n            if(err) {\n              callback(err);\n\n            // Continue\n            } else {\n              nextHandler();\n            }\n          });\n        }\n      };\n\n      nextHandler();\n    }\n\n  };\n  \n  return _self;\n};\n\nmodule.exports = QueueHandler;\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\nvar Url = require('./url');\n\n/**\n * Constructor\n */\nfunction UrlDictionary() {\n  this._patterns = [];\n  this._refs = [];\n  this._params = [];\n}\n\n/**\n * Associate a URL pattern with a reference\n * \n * @param  {String} pattern A URL pattern\n * @param  {Object} ref     A data Object\n */\nUrlDictionary.prototype.add = function(pattern, ref) {\n  pattern = pattern || '';\n  var _self = this;\n  var i = this._patterns.length;\n\n  var pathChain;\n  var params = {};\n\n  if(pattern.indexOf('?') === -1) {\n    pathChain = Url(pattern).path().split('/');\n\n  } else {\n    pathChain = Url(pattern).path().split('/');\n  }\n\n  // Start\n  var searchExpr = '^';\n\n  // Items\n  (pathChain.forEach(function(chunk, i) {\n    if(i!==0) {\n      searchExpr += '\\\\/';\n    }\n\n    if(chunk[0] === ':') {\n      searchExpr += '[^\\\\/?]*';\n      params[chunk.substring(1)] = new RegExp(searchExpr);\n\n    } else {\n      searchExpr += chunk;\n    }\n  }));\n\n  // End\n  searchExpr += '[\\\\/]?$';\n\n  this._patterns[i] = new RegExp(searchExpr);\n  this._refs[i] = ref;\n  this._params[i] = params;\n};\n\n/**\n * Find a reference according to a URL pattern and retrieve params defined in URL\n * \n * @param  {String} url      A URL to test for\n * @param  {Object} defaults A data Object of default parameter values\n * @return {Object}          A reference to a stored object\n */\nUrlDictionary.prototype.lookup = function(url, defaults) {\n  url = url || '';\n  var p = Url(url).path();\n  var q = Url(url).queryparams();\n\n  var _self = this;\n\n  // Check dictionary\n  var _findPattern = function(check) {\n    check = check || '';\n    for(var i=_self._patterns.length-1; i>=0; i--) {\n      if(check.match(_self._patterns[i]) !== null) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  var i = _findPattern(p);\n  \n  // Matching pattern found\n  if(i !== -1) {\n\n    // Retrieve params in pattern match\n    var params = {};\n    for(var n in this._params[i]) {\n      var paramParser = this._params[i][n];\n      var urlMatch = (url.match(paramParser) || []).pop() || '';\n      var varMatch = urlMatch.split('/').pop();\n      params[n] = varMatch;\n    }\n\n    // Retrieve params in querystring match\n    params = angular.extend(q, params);\n\n    return {\n      url: url,\n      ref: this._refs[i],\n      params: params\n    };\n\n  // Not in dictionary\n  } else {\n    return null;\n  }\n};\n\nmodule.exports = UrlDictionary;\n\n},{\"./url\":9}],9:[function(require,module,exports){\n'use strict';\n\nfunction Url(url) {\n  url = url || '';\n\n  // Instance\n  var _self = {\n\n    /**\n     * Get the path of a URL\n     * \n     * @return {String}     A querystring from URL\n     */\n    path: function() {\n      return url.indexOf('?') === -1 ? url : url.substring(0, url.indexOf('?'));\n    },\n\n    /**\n     * Get the querystring of a URL\n     * \n     * @return {String}     A querystring from URL\n     */\n    querystring: function() {\n      return url.indexOf('?') === -1 ? '' : url.substring(url.indexOf('?')+1);\n    },\n\n    /**\n     * Get the querystring of a URL parameters as a hash\n     * \n     * @return {String}     A querystring from URL\n     */\n    queryparams: function() {\n      var pairs = _self.querystring().split('&');\n      var params = {};\n\n      for(var i=0; i<pairs.length; i++) {\n        if(pairs[i] === '') continue;\n        var nameValue = pairs[i].split('=');\n        params[nameValue[0]] = (typeof nameValue[1] === 'undefined' || nameValue[1] === '') ? true : nameValue[1];\n      }\n\n      return params;\n    }\n  };\n\n  return _self;\n}\n\nmodule.exports = Url;\n\n},{}]},{},[2])\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n"],"sourceRoot":"/source/"}
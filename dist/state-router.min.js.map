{"version":3,"sources":["state-router.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","EventEmitter","this","_events","_maxListeners","undefined","isFunction","arg","isNumber","isObject","isUndefined","prototype","defaultMaxListeners","setMaxListeners","isNaN","TypeError","emit","type","er","handler","len","args","listeners","error","arguments","Array","apply","slice","addListener","listener","m","newListener","push","warned","console","trace","on","once","g","removeListener","fired","list","position","splice","removeAllListeners","key","ret","listenerCount","emitter",2,"cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","setTimeout","run","clearTimeout","Item","fun","array","noop","process","nextTick","title","browser","env","argv","version","versions","off","binding","name","cwd","chdir","dir","umask",3,"$stateRouter","restrict","scope","link","element","attrs","css","change","sref","preventDefault",4,"angular","factory","$rootScope","$urlManager","$on","location","directive","./directives/sref","./services/state-router","./services/url-manager","./utils/process",5,"events","UrlDictionary","Parameters","$location","_current","_historyLength","_history","_library","_cache","_urlDictionary","_layerList","_self","_setStateDefaults","data","inherit","_validateStateName","nameChain","split","match","_validateStateQuery","query","_compareStates","b","_copy","copy","resolve","ai","bi","equals","_getNameChain","nameList","map","item","join","filter","_getState","state","stateChain","pname","parent","extend","_defineState","url","add","_pushHistory","_QueueHandler","_list","_data","constructor","execute","callback","nextHandler","shift","err","_changeState","useMiddleware","request","nextState","prevState","next","options","params","hasOwnProperty","historyLength","init","initalLocation","lookup","bind","$use","current","active","RegExp","casted","substr","transformed","parse","npart","indexOf","ppart","library","validate","history","../utils/parameters","../utils/url-dictionary","_process",6,"_url","_detectChange","lastUrl","nextUrl","_update","update",7,"reParseObjectLiteral","reString","reNumber","_resolveValue","value","NaN","_listify","str","sanitizeName","replace","sanitizeValue","forEach","resolveValue","listify",8,"window",9,"_patterns","_refs","Url","pattern","ref","pathChain","path","expr","chunk","defaults","inflected","./url",10,"querystring"],"mappings":"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","file":"state-router.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],2:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            currentQueue[queueIndex].run();\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$stateRouter', function ($stateRouter) {\n  return {\n    restrict: 'A',\n    scope: {\n    },\n    link: function(scope, element, attrs) {\n      element.css('cursor', 'pointer');\n      element.on('click', function(e) {\n        $stateRouter.change(attrs.sref);\n        e.preventDefault();\n      });\n    }\n\n  };\n}];\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\n/* global angular:false */\n\n// CommonJS\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = 'angular-state-router';\n}\n\n// Polyfill\nrequire('./utils/process');\n\n// Instantiate module\nangular.module('angular-state-router', [])\n\n  .factory('$stateRouter', require('./services/state-router'))\n\n  .factory('$urlManager', require('./services/url-manager'))\n\n  .run(['$rootScope', '$urlManager', function($rootScope, $urlManager) {\n    $rootScope.$on('$locationChangeSuccess', function() {\n      $urlManager.location(arguments);\n    });\n  }])\n\n  .directive('sref', require('./directives/sref'));\n\n},{\"./directives/sref\":3,\"./services/state-router\":5,\"./services/url-manager\":6,\"./utils/process\":8}],5:[function(require,module,exports){\n(function (process){\n'use strict';\n\n/* global process:false */\n\nvar events = require('events');\nvar UrlDictionary = require('../utils/url-dictionary');\nvar Parameters = require('../utils/parameters');\n\nmodule.exports = ['$location', function($location) {\n  // Current state\n  var _current;\n\n  // Keep the last n states (e.g. - defaults 5)\n  var _historyLength = 5;\n  var _history = [];\n\n  // Library\n  var _library = {};\n  var _cache = {};\n\n  // URL dictionary\n  var _urlDictionary = new UrlDictionary();\n\n  // Middleware layers\n  var _layerList = [];\n\n  // Instance of EventEmitter\n  var _self = new events.EventEmitter();\n\n  /**\n   * Add default values to a state\n   * \n   * @param  {Object} data An Object\n   * @return {Object}      An Object\n   */\n  var _setStateDefaults = function(data) {\n    data.inherit = (typeof data.inherit === 'undefined') ? true : data.inherit;\n\n    return data;\n  };\n\n  /**\n   * Validate state name\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @return {Boolean}       True if name is valid, false if not\n   */\n  var _validateStateName = function(name) {\n    name = name || '';\n\n    // TODO optimize with RegExp\n\n    var nameChain = name.split('.');\n    for(var i=0; i<nameChain.length; i++) {\n      if(!nameChain[i].match(/[a-zA-Z0-9]+/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Validate state query\n   * \n   * @param  {String} query  A query for the state; using dot-notation\n   * @return {Boolean}       True if name is valid, false if not\n   */\n  var _validateStateQuery = function(query) {\n    query = query || '';\n    \n    // TODO optimize with RegExp\n\n    var nameChain = query.split('.');\n    for(var i=0; i<nameChain.length; i++) {\n      if(!nameChain[i].match(/(\\*(\\*)?|[a-zA-Z0-9]+)/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Compare two states, compares values.  \n   * \n   * @return {Boolean} True if states are the same, false if states are different\n   */\n  var _compareStates = function(a, b) {\n    var _copy = function(data) {\n      // Copy\n      data = angular.copy(data);\n\n      // Track resolve\n      if(data && data.resolve) {\n        for(var n in data.resolve) {\n          data.resolve[n] = true;\n        }\n      }\n\n      return data;\n    };\n    var ai = _copy(a);\n    var bi = _copy(b);\n\n    return angular.equals(ai, bi);\n  };\n\n  /**\n   * Get a list of parent states\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @return {Array}         An Array of parent states\n   */\n  var _getNameChain = function(name) {\n    var nameList = name.split('.');\n\n    return nameList\n      .map(function(item, i, list) {\n        return list.slice(0, i+1).join('.');\n      })\n      .filter(function(item) {\n        return item !== null;\n      });\n  };\n\n  /**\n   * Internal method to crawl library heirarchy\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @return {Object}        A state data Object\n   */\n  var _getState = function(name) {\n    name = name || '';\n\n    var state = null;\n\n    // Only use valid state queries\n    if(!_validateStateName(name)) {\n      return null;\n    \n    // Use cache if exists\n    } else if(_cache[name]) {\n      return _cache[name];\n    }\n\n    var nameChain = _getNameChain(name);\n\n    var stateChain = nameChain\n      .map(function(pname) {\n        return _library[pname];\n      })\n      .filter(function(parent) {\n        return parent !== null;\n      });\n\n    // Walk up checking inheritance\n    for(var i=stateChain.length-1; i>=0; i--) {\n      if(stateChain[i]) {\n        state = angular.extend(angular.copy(stateChain[i]), state || {});\n      }\n\n      if(state && !state.inherit) break;\n    }\n\n    // Store in cache\n    _cache[name] = state;\n\n    return state;\n  };\n\n  /**\n   * Internal method to store a state definition\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @param  {Object} [data] A state definition data Object, optional\n   * @return {Object}        A state data Object\n   */\n  var _defineState = function(name, data) {\n    if(name === null || typeof name === 'undefined') {\n      throw new Error('Name cannot be null.');\n    \n    // Only use valid state names\n    } else if(!_validateStateName(name)) {\n      throw new Error('Invalid state name.');\n    }\n\n    // Create state\n    var state = angular.copy(data);\n\n    // Use defaults\n    _setStateDefaults(state);\n\n    // Named state\n    state.name = name;\n\n    // Set definition\n    _library[name] = state;\n\n    // Clear cache on updates\n    _cache = {};\n\n    // URL mapping\n    if(state.url) {\n      _urlDictionary.add(state.url, state);\n    }\n\n    return data;\n  };\n\n  /**\n   * Add history and correct length\n   * \n   * @param  {Object} data An Object\n   */\n  var _pushHistory = function(data) {\n    if(data) {\n      _history.push(data);\n    }\n\n    // Update length\n    if(_history.length > _historyLength) {\n      _history.splice(0, _history.length - _historyLength);\n    }\n  };\n\n  /**\n   * Execute a series of functions; used in tandem with middleware\n   */\n  var _QueueHandler = function() {\n    var _list = [];\n    var _data = null;\n\n    return {\n      add: function(handler) {\n        if(handler && handler.constructor === Array) {\n          _list = _list.concat(handler);\n        } else {\n          _list.push(handler);\n        }\n        return this;\n      },\n\n      data: function(data) {\n        _data = data;\n        return this;\n      },\n\n      execute: function(callback) {\n        var nextHandler;\n        nextHandler = function() {\n          var handler = _list.shift();\n\n          if(!handler) {\n            return callback(null);\n          }\n\n          handler.call(null, _data, function(err) {\n\n            // Error\n            if(err) {\n              _self.emit('error', err, _data);\n              callback(err);\n\n            // Continue\n            } else {\n              nextHandler();\n            }\n          });\n        };\n\n        nextHandler();\n      }\n    };\n  };\n\n  /**\n   * Internal change to state.  \n   * \n   * @param  {String}   name          A unique identifier for the state; using dot-notation\n   * @param  {Object}   data          A data object\n   * @param  {Boolean}  useMiddleware A flag to trigger middleware\n   * @param  {Function} [callback]    A callback, function(err)\n   */\n  var _changeState = function(name, data, useMiddleware, callback) {\n    useMiddleware = typeof useMiddleware === 'undefined' ? true : useMiddleware;\n\n    var error = null;\n    var request = {\n      name: name,\n      data: data\n    };\n\n    var nextState = _getState(name);\n    var prevState = _current;\n\n    // Set parameters\n    nextState = nextState !== null ? angular.extend({}, nextState, data) : null;\n\n    // Compile execution phases\n    var queue = _QueueHandler().data(request);\n\n    // Does not exist\n    if(!nextState) {\n      error = new Error('Requested state was not defined.');\n      error.code = 'notfound';\n\n      queue.add(function(data, next) {\n        _self.emit('error:notfound', error, request);\n\n        next(error);\n      });\n\n    // State not changed\n    } else if(_compareStates(prevState, nextState)) {\n      _current = nextState;\n\n    // Exists\n    } else {\n\n      // Process started\n      queue.add(function(data, next) {\n        _self.emit('change:begin', request);\n\n        // Valid state exists\n        if(prevState) _pushHistory(prevState);\n        _current = nextState;\n\n        next();\n      });\n\n      // Add middleware\n      if(useMiddleware) {\n        queue.add(_layerList);\n      }\n\n      // Process ended\n      queue.add(function(data, next) {\n        _self.emit('change:end', request);\n        next();\n      });\n    }\n\n    // Run\n    queue.execute(function(err) {\n      _self.emit('change:complete', err, request);\n\n      if(callback) {\n        callback(err);\n      }\n    });\n  };\n\n  /**\n   * Set configuration options for StateRouter\n   * \n   * @param  {Object}      params A data Object\n   * @return {StateRouter}        Itself; chainable\n   */\n  _self.options = function(params) {\n    params = params || {};\n\n    if(params.hasOwnProperty('historyLength')) {\n      _historyLength = params.historyLength;\n      _pushHistory(null);\n    }\n\n    return _self;\n  };\n\n  /**\n   * Set/get state data.  Define the states.  \n   *\n   * @param  {String}      name   A unique identifier for the state; using dot-notation\n   * @param  {Object}      [data] A state definition data object, optional\n   * @return {StateRouter}        Itself; chainable\n   */\n  _self.state = function(name, data) {\n    if(!data) {\n      return _getState(name);\n    }\n    _defineState(name, data);\n    return _self;\n  };\n\n  /**\n   * Initialize with current address and fallback to default, asynchronous operation.  \n   * \n   * @param  {String}      name     An initial state to start in.  \n   * @param  {Object}      [params] A parameters data object\n   * @return {StateRouter}          Itself; chainable\n   */\n  _self.init = function(name, params) {\n    process.nextTick(function() {\n\n      // Initial location\n      var initalLocation = _urlDictionary.lookup($location.url());\n      if(initalLocation !== null) {\n        _changeState(initalLocation.name, params, true, function() {\n          _self.emit('init');\n        });\n\n      // Initialize with state\n      } else if(name) {\n        _changeState(name, params, true, function() {\n          _self.emit('init');\n        });\n\n      // Initialize only\n      } else {\n        _self.emit('init');\n      }\n    });\n\n    return _self;\n  };\n\n  /**\n   * Change state, asynchronous operation\n   * \n   * @param  {String}      name     A unique identifier for the state; using dot-notation\n   * @param  {Object}      [params] A parameters data object\n   * @return {StateRouter}          Itself; chainable\n   */\n  _self.change = function(name, params) {\n    process.nextTick(angular.bind(null, _changeState, name, params, true));\n    return _self;\n  };\n\n  /**\n   * Change state based on $location.url(), asynchronous operation.  Used internally by $urlManager.\n   * \n   * @param  {String}      url      A url matching defind states\n   * @param  {Object}      [params] A parameters data object\n   * @return {StateRouter}          Itself; chainable\n   */\n  _self.$location = function(url, params) {\n    var state = _urlDictionary.lookup(url);\n    if(state) {\n      process.nextTick(angular.bind(null, _changeState, state.name, params, false));\n    }\n    return _self;\n  };\n\n  /**\n   * Add middleware, executing next(err);\n   * \n   * @param  {Function}    handler A callback, function(request, next)\n   * @return {StateRouter}         Itself; chainable\n   */\n  _self.$use = function(handler) {\n    if(typeof handler !== 'function') {\n      throw new Error('Middleware must be a function');\n    }\n\n    _layerList.push(handler);\n    return _self;\n  };\n\n  /**\n   * Retrieve copy of current state\n   * \n   * @return {Object} A copy of current state\n   */\n  _self.current = function() {\n    return !_current ? null : angular.copy(_current);\n  };\n\n  /**\n   * Check query against current state\n   *\n   * @param  {Mixed}   query  A string using state notation or a RegExp\n   * @param  {Object}  params A parameters data object\n   * @return {Boolean}        A true if state is parent to current state\n   */\n  _self.active = function(query, params) {\n    query = query || '';\n    \n    // No state\n    if(!_current) {\n      return false;\n\n    // Use RegExp matching\n    } else if(query instanceof RegExp) {\n      return !!_current.name.match(query);\n\n    // String; state dot-notation\n    } else if(typeof query === 'string') {\n\n      // Cast string to RegExp\n      if(query.match(/^\\/.*\\/$/)) {\n        var casted = query.substr(1, query.length-2);\n        return !!_current.name.match(new RegExp(casted));\n\n      // Transform to state notation\n      } else {\n        var transformed = query\n          .split('.')\n          .map(function(item) {\n            if(item === '*') {\n              return '[a-zA-Z0-9]*';\n            } else if(item === '**') {\n              return '[a-zA-Z0-9\\\\.]*';\n            } else {\n              return item;\n            }\n          })\n          .join('\\\\.');\n\n        return !!_current.name.match(new RegExp(transformed));\n      }\n    }\n\n    // Non-matching\n    return false;\n  };\n\n  /**\n   * Parse state notation name-params.  \n   * \n   * Assume all parameter values are strings; equivalent to URL querystring translation.  \n   * \n   * @param  {String} name A name-params string\n   * @return {Array}       A name string and param Object\n   */\n  _self.parse = function(name) {\n    if(name && name.match(/[a-zA-Z0-9\\.]*\\(.*\\)/)) {\n      var npart = name.substr(0, name.indexOf('('));\n      var ppart = Parameters( name.substr(name.indexOf('(')+1) );\n\n      return {\n        name: npart,\n        params: ppart\n      };\n\n    } else {\n      return {\n        name: name,\n        params: null\n      };\n    }\n  };\n\n  /**\n   * Retrieve definition of states\n   * \n   * @return {Object} A hash of states\n   */\n  _self.library = function() {\n    return _library;\n  };\n\n  /**\n   * Validation\n   */\n  _self.validate = {\n    name: _validateStateName,\n    query: _validateStateQuery\n  };\n\n  /**\n   * Retrieve history\n   * \n   * @return {Object} A hash of states\n   */\n  _self.history = function() {\n    return _history;\n  };\n\n  // Return instance\n  return _self;\n}];\n\n}).call(this,require('_process'))\n\n},{\"../utils/parameters\":7,\"../utils/url-dictionary\":9,\"_process\":2,\"events\":1}],6:[function(require,module,exports){\n'use strict';\n\nvar events = require('events');\nvar UrlDictionary = require('../utils/url-dictionary');\n\nmodule.exports = ['$stateRouter', '$location', function($stateRouter, $location) {\n  var _url = $location.url();\n\n  // Instance of EventEmitter\n  var _self = new events.EventEmitter();\n\n  /**\n   * Detect URL change and dispatch state change\n   */\n  var _detectChange = function() {\n    var lastUrl = _url;\n    var nextUrl = $location.url();\n\n    if(nextUrl !== lastUrl) {\n      _url = nextUrl;\n\n      // TODO parse params to state data\n\n\n      \n\n\n\n\n\n\n\n      $stateRouter.$location(_url, _self);\n\n      _self.emit('update:location');\n    }\n  };\n\n  /**\n   * Update URL based on state\n   */\n  var _update = function() {\n    var state = $stateRouter.current();\n\n    if(state && state.url) {\n      _url = state.url;\n\n      // TODO Add parameters or use default parameters\n\n\n\n\n\n\n\n      $location.url(_url);\n    }\n\n    _self.emit('update');\n  };\n\n  /**\n   * Update url based on state\n   */\n  _self.update = function() {\n    _update();\n  };\n\n  /**\n   * Location was updated; force update detection\n   */\n  _self.location = function() {\n    _detectChange(arguments);\n  };\n\n  // Register middleware layer\n  $stateRouter.$use(function(request, next) {\n    _update();\n    next();\n  });\n\n  return _self;\n}];\n\n},{\"../utils/url-dictionary\":9,\"events\":1}],7:[function(require,module,exports){\n'use strict';\n\n// Parse Object literal name-value pairs\nvar reParseObjectLiteral = /([,{]\\s*((\"|')(.*?)\\3|\\w*)|(:\\s*([+-]?(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[eE][+-]?\\d+)?|true|false|null|(\"|')(.*?)\\7|\\[[^\\]]*\\])))/g;\n\n// Match Strings\nvar reString = /^(\"|')(.*?)\\1$/;\n\n// TODO Add escaped string quotes \\' and \\\" to string matcher\n\n// Match Number (int/float/exponential)\nvar reNumber = /^[+-]?(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[eE][+-]?\\d+)?$/;\n\n/**\n * Parse string value into Boolean/Number/Array/String/null.\n *\n * Strings are surrounded by a pair of matching quotes\n * \n * @param  {String} value A String value to parse\n * @return {Mixed}        A Boolean/Number/Array/String/null\n */\nvar _resolveValue = function(value) {\n\n  // Boolean: true\n  if(value === 'true') {\n    return true;\n\n  // Boolean: false\n  } else if(value === 'false') {\n    return false;\n\n  // Null\n  } else if(value === 'null') {\n    return null;\n\n  // String\n  } else if(value.match(reString)) {\n    return value.substr(1, value.length-2);\n\n  // Number\n  } else if(value.match(reNumber)) {\n    return +value;\n\n  // NaN\n  } else if(value === 'NaN') {\n    return NaN;\n\n  // TODO add matching with Arrays and parse\n  \n  }\n\n  // Unable to resolve\n  return value;\n};\n\n// Find values in an object literal\nvar _listify = function(str) {\n  var sanitizeName = function(name) {\n    return name.replace(/^[\\{,]?\\s*[\"']?/, '').replace(/[\"']?\\s*$/, '');\n  };\n\n  var sanitizeValue = function(value) {\n    var str = value.replace(/^(:)?\\s*/, '').replace(/\\s*$/, '');\n    return _resolveValue(str);\n  };\n\n  return str.match(reParseObjectLiteral).map(function(item, i, list) {\n    return i%2 === 0 ? sanitizeName(item) : sanitizeValue(item);\n  });\n};\n\n/**\n * Create a params Object from string\n * \n * @param {String} str A stringified version of Object literal\n */\nvar Parameters = function(str) {\n  str = str || '';\n\n  // Instance\n  var _self = {};\n\n  _listify(str).forEach(function(item, i, list) {\n    if(i%2 === 0) {\n      _self[item] = list[i+1];\n    }\n  });\n\n  return _self;\n};\n\nmodule.exports = Parameters;\n\nmodule.exports.resolveValue = _resolveValue;\nmodule.exports.listify = _listify;\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\n/* global window:false */\n/* global process:false */\n/* global setImmediate:false */\n/* global setTimeout:false */\n\n// Polyfill process.nextTick()\n\nif(window) {\n  if(!window.process) {\n\n    var _process = {\n      nextTick: function(callback) {\n        setTimeout(callback, 0);\n      }\n    };\n\n    // Export\n    window.process = _process;\n  }\n}\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nvar Url = require('./url');\n\n/**\n * Constructor\n */\nfunction UrlDictionary() {\n  this._patterns = [];\n  this._refs = [];\n}\n\n/**\n * Associate a URL pattern with a reference\n * \n * @param  {String} pattern A URL pattern\n * @param  {Object} ref     A data Object\n */\nUrlDictionary.prototype.add = function(pattern, ref) {\n  pattern = pattern || '';\n  var _self = this;\n  var i = this._patterns.length;\n\n  var pathChain;\n\n  if(pattern.indexOf('?') === -1) {\n    pathChain = Url(pattern).path().split('/');\n\n  } else {\n    pathChain = Url(pattern).path().split('/');\n  }\n\n  // URL matching\n  var expr = \n    '^' +\n    (pathChain.map(function(chunk) {\n      if(chunk[0] === ':') {\n        return '[a-zA-Z0-9\\\\-_\\\\.~]+';\n\n      } else {\n        return chunk;\n      }\n    }).join('\\\\/')) +\n    '[\\\\/]?$';\n\n  this._patterns[i] = new RegExp(expr);\n  this._refs[i] = ref;\n};\n\n/**\n * Find a reference according to a URL pattern\n * \n * @param  {String} url      A URL to test for\n * @param  {Object} defaults A data Object of default parameter values\n * @return {Object}          A reference to a stored object\n */\nUrlDictionary.prototype.lookup = function(url, defaults) {\n  var inflected = Url(url || '').path();\n\n  for(var i=this._patterns.length-1; i>=0; i--) {\n    if(inflected.match(this._patterns[i]) !== null) {\n      return this._refs[i];\n    }\n  }\n\n  return null;\n};\n\nmodule.exports = UrlDictionary;\n\n},{\"./url\":10}],10:[function(require,module,exports){\n'use strict';\n\nfunction Url(url) {\n  url = url || '';\n\n  return {\n\n    /**\n     * Get the path of a URL\n     * \n     * @return {String}     A querystring from URL\n     */\n    path: function() {\n      var inflected = url.replace(/\\?.*/, '');\n      return inflected;\n    },\n\n    /**\n     * Get the querystring of a URL\n     * \n     * @return {String}     A querystring from URL\n     */\n    querystring: function() {\n      var inflected = url.replace(/.*\\?/, '');\n      return inflected;\n    }\n  };\n}\n\nmodule.exports = Url;\n\n},{}]},{},[4])\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n"],"sourceRoot":"/source/"}
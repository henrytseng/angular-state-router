{"version":3,"sources":["state-router.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","EventEmitter","this","_events","_maxListeners","undefined","isFunction","arg","isNumber","isObject","isUndefined","prototype","defaultMaxListeners","setMaxListeners","isNaN","TypeError","emit","type","er","handler","len","args","listeners","error","arguments","Array","apply","slice","addListener","listener","m","newListener","push","warned","console","trace","on","once","g","removeListener","fired","list","position","splice","removeAllListeners","key","ret","listenerCount","emitter",2,"cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","setTimeout","run","clearTimeout","Item","fun","array","noop","process","nextTick","title","browser","env","argv","version","versions","off","binding","name","cwd","chdir","dir","umask",3,"$state","restrict","scope","link","element","attrs","css","change","sref","preventDefault",4,"angular","provider","factory","$rootScope","$urlManager","$on","location","directive","./directives/sref","./services/state-router","./services/url-manager","./utils/process",5,"events","UrlDictionary","Parameters","$get","$location","_current","_historyLength","_history","_library","_cache","_urlDictionary","_layerList","_self","_parseName","nameParams","match","npart","substring","indexOf","ppart","lastIndexOf","params","_setStateDefaults","data","inherit","_validateStateName","nameChain","split","_validateStateQuery","query","_compareStates","b","equals","_getNameChain","nameList","map","item","join","filter","_getState","state","stateChain","pname","parent","extend","copy","_defineState","url","add","_pushHistory","_QueueHandler","_list","_data","constructor","execute","callback","nextHandler","shift","err","_changeState","useMiddleware","nameExpr","request","nextState","prevState","next","options","hasOwnProperty","historyLength","init","bind","lookup","ref","$use","current","active","RegExp","casted","substr","transformed","parse","library","validate","history","../utils/parameters","../utils/url-dictionary","_process",6,"_url","_detectChange","lastUrl","nextUrl","_update","replace","update",7,"reParseObjectLiteral","reString","reNumber","_resolveValue","value","NaN","_listify","str","sanitizeName","sanitizeValue","forEach","resolveValue","listify",8,"window",9,"_patterns","_refs","_params","Url","pattern","pathChain","path","searchExpr","chunk","defaults","p","q","queryparams","_findPattern","check","paramParser","urlMatch","pop","varMatch","./url",10,"querystring","pairs","nameValue"],"mappings":"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","file":"state-router.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],2:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            currentQueue[queueIndex].run();\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$state', function ($state) {\n  return {\n    restrict: 'A',\n    scope: {\n    },\n    link: function(scope, element, attrs) {\n      element.css('cursor', 'pointer');\n      element.on('click', function(e) {\n        $state.change(attrs.sref);\n        e.preventDefault();\n      });\n    }\n\n  };\n}];\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\n/* global angular:false */\n\n// CommonJS\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = 'angular-state-router';\n}\n\n// Polyfill\nrequire('./utils/process');\n\n// Instantiate module\nangular.module('angular-state-router', [])\n\n  .provider('$state', require('./services/state-router'))\n\n  .factory('$urlManager', require('./services/url-manager'))\n\n  .run(['$rootScope', '$urlManager', function($rootScope, $urlManager) {\n    $rootScope.$on('$locationChangeSuccess', function() {\n      console.log(arguments);\n      $urlManager.location(arguments);\n    });\n  }])\n\n  .directive('sref', require('./directives/sref'));\n\n},{\"./directives/sref\":3,\"./services/state-router\":5,\"./services/url-manager\":6,\"./utils/process\":8}],5:[function(require,module,exports){\n(function (process){\n'use strict';\n\n/* global process:false */\n\nvar events = require('events');\nvar UrlDictionary = require('../utils/url-dictionary');\nvar Parameters = require('../utils/parameters');\n\nmodule.exports = function() {\n\n  return {\n    $get: ['$location', function($location) {\n\n      // Current state\n      var _current;\n\n      // Keep the last n states (e.g. - defaults 5)\n      var _historyLength = 5;\n      var _history = [];\n\n      // Library\n      var _library = {};\n      var _cache = {};\n\n      // URL to state dictionary\n      var _urlDictionary = new UrlDictionary();\n\n      // Middleware layers\n      var _layerList = [];\n\n      // Instance of EventEmitter\n      var _self = new events.EventEmitter();\n\n      /**\n       * Parse state notation name-params.  \n       * \n       * Assume all parameter values are strings\n       * \n       * @param  {String} nameParams A name-params string\n       * @return {Object}             A name string and param Object\n       */\n      var _parseName = function(nameParams) {\n        if(nameParams && nameParams.match(/^[a-zA-Z0-9_\\.]*\\(.*\\)$/)) {\n          var npart = nameParams.substring(0, nameParams.indexOf('('));\n          var ppart = Parameters( nameParams.substring(nameParams.indexOf('(')+1, nameParams.lastIndexOf(')')) );\n\n          return {\n            name: npart,\n            params: ppart\n          };\n\n        } else {\n          return {\n            name: nameParams,\n            params: null\n          };\n        }\n      };\n\n      /**\n       * Add default values to a state\n       * \n       * @param  {Object} data An Object\n       * @return {Object}      An Object\n       */\n      var _setStateDefaults = function(data) {\n        data.inherit = (typeof data.inherit === 'undefined') ? true : data.inherit;\n\n        return data;\n      };\n\n      /**\n       * Validate state name\n       * \n       * @param  {String} name   A unique identifier for the state; using dot-notation\n       * @return {Boolean}       True if name is valid, false if not\n       */\n      var _validateStateName = function(name) {\n        name = name || '';\n\n        // TODO optimize with RegExp\n\n        var nameChain = name.split('.');\n        for(var i=0; i<nameChain.length; i++) {\n          if(!nameChain[i].match(/[a-zA-Z0-9_]+/)) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      /**\n       * Validate state query\n       * \n       * @param  {String} query  A query for the state; using dot-notation\n       * @return {Boolean}       True if name is valid, false if not\n       */\n      var _validateStateQuery = function(query) {\n        query = query || '';\n        \n        // TODO optimize with RegExp\n\n        var nameChain = query.split('.');\n        for(var i=0; i<nameChain.length; i++) {\n          if(!nameChain[i].match(/(\\*(\\*)?|[a-zA-Z0-9_]+)/)) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      /**\n       * Compare two states, compares values.  \n       * \n       * @return {Boolean} True if states are the same, false if states are different\n       */\n      var _compareStates = function(a, b) {\n        return angular.equals(a, b);\n      };\n\n      /**\n       * Get a list of parent states\n       * \n       * @param  {String} name   A unique identifier for the state; using dot-notation\n       * @return {Array}         An Array of parent states\n       */\n      var _getNameChain = function(name) {\n        var nameList = name.split('.');\n\n        return nameList\n          .map(function(item, i, list) {\n            return list.slice(0, i+1).join('.');\n          })\n          .filter(function(item) {\n            return item !== null;\n          });\n      };\n\n      /**\n       * Internal method to crawl library heirarchy\n       * \n       * @param  {String} name   A unique identifier for the state; using state-notation\n       * @return {Object}        A state data Object\n       */\n      var _getState = function(name) {\n        name = name || '';\n\n        var state = null;\n\n        // Only use valid state queries\n        if(!_validateStateName(name)) {\n          return null;\n        \n        // Use cache if exists\n        } else if(_cache[name]) {\n          return _cache[name];\n        }\n\n        var nameChain = _getNameChain(name);\n\n        var stateChain = nameChain\n          .map(function(pname) {\n            return _library[pname];\n          })\n          .filter(function(parent) {\n            return parent !== null;\n          });\n\n        // Walk up checking inheritance\n        for(var i=stateChain.length-1; i>=0; i--) {\n          if(stateChain[i]) {\n            state = angular.extend(angular.copy(stateChain[i]), state || {});\n          }\n\n          if(state && !state.inherit) break;\n        }\n\n        // Store in cache\n        _cache[name] = state;\n\n        return state;\n      };\n\n      /**\n       * Internal method to store a state definition.  Parameters should be included in data Object not state name.  \n       * \n       * @param  {String} name A unique identifier for the state; using state-notation\n       * @param  {Object} data A state definition data Object\n       * @return {Object}      A state data Object\n       */\n      var _defineState = function(name, data) {\n        if(name === null || typeof name === 'undefined') {\n          throw new Error('Name cannot be null.');\n        \n        // Only use valid state names\n        } else if(!_validateStateName(name)) {\n          throw new Error('Invalid state name.');\n        }\n\n        // Create state\n        var state = angular.copy(data);\n\n        // Use defaults\n        _setStateDefaults(state);\n\n        // Named state\n        state.name = name;\n\n        // Set definition\n        _library[name] = state;\n\n        // Reset cache\n        _cache = {};\n\n        // URL mapping\n        if(state.url) {\n          _urlDictionary.add(state.url, state);\n        }\n\n        return data;\n      };\n\n      /**\n       * Add history and correct length\n       * \n       * @param  {Object} data An Object\n       */\n      var _pushHistory = function(data) {\n        if(data) {\n          _history.push(data);\n        }\n\n        // Update length\n        if(_history.length > _historyLength) {\n          _history.splice(0, _history.length - _historyLength);\n        }\n      };\n\n      /**\n       * Execute a series of functions; used in tandem with middleware\n       */\n      var _QueueHandler = function() {\n        var _list = [];\n        var _data = null;\n\n        return {\n          add: function(handler) {\n            if(handler && handler.constructor === Array) {\n              _list = _list.concat(handler);\n            } else {\n              _list.push(handler);\n            }\n            return this;\n          },\n\n          data: function(data) {\n            _data = data;\n            return this;\n          },\n\n          execute: function(callback) {\n            var nextHandler;\n            nextHandler = function() {\n              var handler = _list.shift();\n\n              if(!handler) {\n                return callback(null);\n              }\n\n              handler.call(null, _data, function(err) {\n\n                // Error\n                if(err) {\n                  _self.emit('error', err, _data);\n                  callback(err);\n\n                // Continue\n                } else {\n                  nextHandler();\n                }\n              });\n            };\n\n            nextHandler();\n          }\n        };\n      };\n\n      /**\n       * Internal change to state.  Parameters in `params` takes precedence over state-notation `name` expression.  \n       * \n       * @param  {String}   name          A unique identifier for the state; using state-notation including optional parameters\n       * @param  {Object}   params        A data object of params\n       * @param  {Boolean}  useMiddleware A flag to trigger middleware\n       * @param  {Function} [callback]    A callback, function(err)\n       */\n      var _changeState = function(name, params, useMiddleware, callback) {\n        params = params || {};\n        useMiddleware = typeof useMiddleware === 'undefined' ? true : useMiddleware;\n\n        // Parse state-notation expression\n        var nameExpr = _parseName(name);\n        name = nameExpr.name;\n        params = angular.extend(nameExpr.params || {}, params);\n\n        var error = null;\n        var request = {\n          name: name,\n          params: params\n        };\n\n        var nextState = angular.copy(_getState(name));\n        var prevState = _current;\n\n        // Set parameters\n        if(nextState) {\n          nextState.params = angular.extend(nextState.params || {}, params);\n        }\n\n        // Compile execution phases\n        var queue = _QueueHandler().data(request);\n\n        // Does not exist\n        if(!nextState) {\n          error = new Error('Requested state was not defined.');\n          error.code = 'notfound';\n\n          queue.add(function(data, next) {\n            _self.emit('error:notfound', error, request);\n\n            next(error);\n          });\n\n        // State not changed\n        } else if(_compareStates(prevState, nextState)) {\n          _current = nextState;\n\n        // Exists\n        } else {\n\n          // Process started\n          queue.add(function(data, next) {\n            _self.emit('change:begin', request);\n\n            // Valid state exists\n            if(prevState) _pushHistory(prevState);\n            _current = nextState;\n\n            next();\n          });\n\n          // Add middleware\n          if(useMiddleware) {\n            queue.add(_layerList);\n          }\n\n          // Process ended\n          queue.add(function(data, next) {\n            _self.emit('change:end', request);\n            next();\n          });\n        }\n\n        // Run\n        queue.execute(function(err) {\n          _self.emit('change:complete', err, request);\n\n          if(callback) {\n            callback(err);\n          }\n        });\n      };\n\n      /**\n       * Set configuration data parameters for StateRouter\n       * \n       * @param  {Object}      options A data Object\n       * @return {StateRouter}         Itself; chainable\n       */\n      _self.options = function(options) {\n        options = options || {};\n\n        if(options.hasOwnProperty('historyLength')) {\n          _historyLength = options.historyLength;\n          _pushHistory(null);\n        }\n\n        return _self;\n      };\n\n      /**\n       * Set/get state data.  Define the states.  \n       *\n       * @param  {String}      name    A unique identifier for the state; using dot-notation\n       * @param  {Object}      [state] A state definition data object, optional\n       * @return {StateRouter}         Itself; chainable\n       */\n      _self.state = function(name, state) {\n        if(!state) {\n          return _getState(name);\n        }\n        _defineState(name, state);\n        return _self;\n      };\n\n      /**\n       * Initialize with current address and fallback to default, asynchronous operation.  \n       * \n       * @param  {String}      name     An initial state to start in.  \n       * @param  {Object}      [params] A parameters data object\n       * @return {StateRouter}          Itself; chainable\n       */\n      _self.init = function(name, params) {\n        process.nextTick(function() {\n\n          // Initial location\n          if($location.url() !== '') {\n            _self.$location($location.url(), function() {\n              _self.emit('init');\n            });\n\n          // Initialize with state\n          } else if(name) {\n            _changeState(name, params, true, function() {\n              _self.emit('init');\n            });\n\n          // Initialize only\n          } else {\n            _self.emit('init');\n          }\n        });\n\n        return _self;\n      };\n\n      /**\n       * Change state, asynchronous operation\n       * \n       * @param  {String}      name     A unique identifier for the state; using dot-notation\n       * @param  {Object}      [params] A parameters data object\n       * @return {StateRouter}          Itself; chainable\n       */\n      _self.change = function(name, params) {\n        process.nextTick(angular.bind(null, _changeState, name, params, true));\n        return _self;\n      };\n\n      /**\n       * Change state based on $location.url(), asynchronous operation using internal methods, quiet fallback.  \n       * \n       * @param  {String}      url        A url matching defind states\n       * @param  {Function}    [callback] A callback, function(err)\n       * @return {StateRouter}            Itself; chainable\n       */\n      _self.$location = function(url, callback) {\n        var data = _urlDictionary.lookup(url);\n\n        if(data) {\n          var state = data.ref;\n\n          if(state) {\n            // Parse params from url\n            process.nextTick(angular.bind(null, _changeState, state.name, data.params, false, callback));\n          }\n        }\n\n        return _self;\n      };\n\n      /**\n       * Add middleware, executing next(err);\n       * \n       * @param  {Function}    handler A callback, function(request, next)\n       * @return {StateRouter}         Itself; chainable\n       */\n      _self.$use = function(handler) {\n        if(typeof handler !== 'function') {\n          throw new Error('Middleware must be a function');\n        }\n\n        _layerList.push(handler);\n        return _self;\n      };\n\n      /**\n       * Retrieve copy of current state\n       * \n       * @return {Object} A copy of current state\n       */\n      _self.current = function() {\n        return (!_current) ? null : angular.copy(_current);\n      };\n\n      /**\n       * Check query against current state\n       *\n       * @param  {Mixed}   query  A string using state notation or a RegExp\n       * @param  {Object}  params A parameters data object\n       * @return {Boolean}        A true if state is parent to current state\n       */\n      _self.active = function(query, params) {\n        query = query || '';\n        \n        // No state\n        if(!_current) {\n          return false;\n\n        // Use RegExp matching\n        } else if(query instanceof RegExp) {\n          return !!_current.name.match(query);\n\n        // String; state dot-notation\n        } else if(typeof query === 'string') {\n\n          // Cast string to RegExp\n          if(query.match(/^\\/.*\\/$/)) {\n            var casted = query.substr(1, query.length-2);\n            return !!_current.name.match(new RegExp(casted));\n\n          // Transform to state notation\n          } else {\n            var transformed = query\n              .split('.')\n              .map(function(item) {\n                if(item === '*') {\n                  return '[a-zA-Z0-9_]*';\n                } else if(item === '**') {\n                  return '[a-zA-Z0-9_\\\\.]*';\n                } else {\n                  return item;\n                }\n              })\n              .join('\\\\.');\n\n            return !!_current.name.match(new RegExp(transformed));\n          }\n        }\n\n        // Non-matching\n        return false;\n      };\n\n      /**\n       * Parse state notation name-params.  \n       * \n       * Assume all parameter values are strings\n       * \n       * @param  {String} nameParams A name-params string\n       * @return {Object}             A name string and param Object\n       */\n      _self.parse = _parseName;\n\n      /**\n       * Retrieve definition of states\n       * \n       * @return {Object} A hash of states\n       */\n      _self.library = function() {\n        return _library;\n      };\n\n      /**\n       * Validation\n       */\n      _self.validate = {\n        name: _validateStateName,\n        query: _validateStateQuery\n      };\n\n      /**\n       * Retrieve history\n       * \n       * @return {Object} A hash of states\n       */\n      _self.history = function() {\n        return _history;\n      };\n\n      return _self;\n    }]\n  };\n\n};\n\n}).call(this,require('_process'))\n\n},{\"../utils/parameters\":7,\"../utils/url-dictionary\":9,\"_process\":2,\"events\":1}],6:[function(require,module,exports){\n'use strict';\n\nvar events = require('events');\nvar UrlDictionary = require('../utils/url-dictionary');\n\nmodule.exports = ['$state', '$location', function($state, $location) {\n  var _url = $location.url();\n\n  // Instance of EventEmitter\n  var _self = new events.EventEmitter();\n\n  /**\n   * Detect URL change and dispatch state change\n   */\n  var _detectChange = function() {\n    var lastUrl = _url;\n    var nextUrl = $location.url();\n\n    if(nextUrl !== lastUrl) {\n      _url = nextUrl;\n\n      $state.$location(_url);\n      _self.emit('update:location');\n    }\n  };\n\n  /**\n   * Update URL based on state\n   */\n  var _update = function() {\n    var state = $state.current();\n\n    if(state && state.url) {\n      _url = state.url;\n\n      // Add parameters or use default parameters\n      var params = state.params || {};\n      for(var name in params) {\n        _url = _url.replace(new RegExp(':'+name, 'g'), params[name]);\n      }\n\n      $location.url(_url);\n    }\n\n    _self.emit('update');\n  };\n\n  /**\n   * Update url based on state\n   */\n  _self.update = function() {\n    _update();\n  };\n\n  /**\n   * Location was updated; force update detection\n   */\n  _self.location = function() {\n    _detectChange(arguments);\n  };\n\n  // Register middleware layer\n  $state.$use(function(request, next) {\n    _update();\n    next();\n  });\n\n  return _self;\n}];\n\n},{\"../utils/url-dictionary\":9,\"events\":1}],7:[function(require,module,exports){\n'use strict';\n\n// Parse Object literal name-value pairs\nvar reParseObjectLiteral = /([,{]\\s*((\"|')(.*?)\\3|\\w*)|(:\\s*([+-]?(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[eE][+-]?\\d+)?|true|false|null|(\"|')(.*?)\\7|\\[[^\\]]*\\])))/g;\n\n// Match Strings\nvar reString = /^(\"|')(.*?)\\1$/;\n\n// TODO Add escaped string quotes \\' and \\\" to string matcher\n\n// Match Number (int/float/exponential)\nvar reNumber = /^[+-]?(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[eE][+-]?\\d+)?$/;\n\n/**\n * Parse string value into Boolean/Number/Array/String/null.\n *\n * Strings are surrounded by a pair of matching quotes\n * \n * @param  {String} value A String value to parse\n * @return {Mixed}        A Boolean/Number/Array/String/null\n */\nvar _resolveValue = function(value) {\n\n  // Boolean: true\n  if(value === 'true') {\n    return true;\n\n  // Boolean: false\n  } else if(value === 'false') {\n    return false;\n\n  // Null\n  } else if(value === 'null') {\n    return null;\n\n  // String\n  } else if(value.match(reString)) {\n    return value.substr(1, value.length-2);\n\n  // Number\n  } else if(value.match(reNumber)) {\n    return +value;\n\n  // NaN\n  } else if(value === 'NaN') {\n    return NaN;\n\n  // TODO add matching with Arrays and parse\n  \n  }\n\n  // Unable to resolve\n  return value;\n};\n\n// Find values in an object literal\nvar _listify = function(str) {\n\n  // Trim\n  str = str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n\n  if(str.match(/^\\s*{.*}\\s*$/) === null) {\n    throw new Error('Parameters expects an Object');\n  }\n\n  var sanitizeName = function(name) {\n    return name.replace(/^[\\{,]?\\s*[\"']?/, '').replace(/[\"']?\\s*$/, '');\n  };\n\n  var sanitizeValue = function(value) {\n    var str = value.replace(/^(:)?\\s*/, '').replace(/\\s*$/, '');\n    return _resolveValue(str);\n  };\n\n  return str.match(reParseObjectLiteral).map(function(item, i, list) {\n    return i%2 === 0 ? sanitizeName(item) : sanitizeValue(item);\n  });\n};\n\n/**\n * Create a params Object from string\n * \n * @param {String} str A stringified version of Object literal\n */\nvar Parameters = function(str) {\n  str = str || '';\n\n  // Instance\n  var _self = {};\n\n  _listify(str).forEach(function(item, i, list) {\n    if(i%2 === 0) {\n      _self[item] = list[i+1];\n    }\n  });\n\n  return _self;\n};\n\nmodule.exports = Parameters;\n\nmodule.exports.resolveValue = _resolveValue;\nmodule.exports.listify = _listify;\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\n/* global window:false */\n/* global process:false */\n/* global setImmediate:false */\n/* global setTimeout:false */\n\n// Polyfill process.nextTick()\n\nif(window) {\n  if(!window.process) {\n\n    var _process = {\n      nextTick: function(callback) {\n        setTimeout(callback, 0);\n      }\n    };\n\n    // Export\n    window.process = _process;\n  }\n}\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nvar Url = require('./url');\n\n/**\n * Constructor\n */\nfunction UrlDictionary() {\n  this._patterns = [];\n  this._refs = [];\n  this._params = [];\n}\n\n/**\n * Associate a URL pattern with a reference\n * \n * @param  {String} pattern A URL pattern\n * @param  {Object} ref     A data Object\n */\nUrlDictionary.prototype.add = function(pattern, ref) {\n  pattern = pattern || '';\n  var _self = this;\n  var i = this._patterns.length;\n\n  var pathChain;\n  var params = {};\n\n  if(pattern.indexOf('?') === -1) {\n    pathChain = Url(pattern).path().split('/');\n\n  } else {\n    pathChain = Url(pattern).path().split('/');\n  }\n\n  // Start\n  var searchExpr = '^';\n\n  // Items\n  (pathChain.forEach(function(chunk, i) {\n    if(i!==0) {\n      searchExpr += '\\\\/';\n    }\n\n    if(chunk[0] === ':') {\n      searchExpr += '[^\\\\/?]*';\n      params[chunk.substring(1)] = new RegExp(searchExpr);\n\n    } else {\n      searchExpr += chunk;\n    }\n  }));\n\n  // End\n  searchExpr += '[\\\\/]?$';\n\n  this._patterns[i] = new RegExp(searchExpr);\n  this._refs[i] = ref;\n  this._params[i] = params;\n};\n\n/**\n * Find a reference according to a URL pattern and retrieve params defined in URL\n * \n * @param  {String} url      A URL to test for\n * @param  {Object} defaults A data Object of default parameter values\n * @return {Object}          A reference to a stored object\n */\nUrlDictionary.prototype.lookup = function(url, defaults) {\n  url = url || '';\n  var p = Url(url).path();\n  var q = Url(url).queryparams();\n\n  var _self = this;\n\n  // Check dictionary\n  var _findPattern = function(check) {\n    check = check || '';\n    for(var i=_self._patterns.length-1; i>=0; i--) {\n      if(check.match(_self._patterns[i]) !== null) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  var i = _findPattern(p);\n  \n  // Matching pattern found\n  if(i !== -1) {\n\n    // Retrieve params in pattern match\n    var params = {};\n    for(var n in this._params[i]) {\n      var paramParser = this._params[i][n];\n      var urlMatch = (url.match(paramParser) || []).pop() || '';\n      var varMatch = urlMatch.split('/').pop();\n      params[n] = varMatch;\n    }\n\n    // Retrieve params in querystring match\n    params = angular.extend(q, params);\n\n    return {\n      url: url,\n      ref: this._refs[i],\n      params: params\n    };\n\n  // Not in dictionary\n  } else {\n    return null;\n  }\n};\n\nmodule.exports = UrlDictionary;\n\n},{\"./url\":10}],10:[function(require,module,exports){\n'use strict';\n\nfunction Url(url) {\n  url = url || '';\n\n  // Instance\n  var _self = {\n\n    /**\n     * Get the path of a URL\n     * \n     * @return {String}     A querystring from URL\n     */\n    path: function() {\n      return url.indexOf('?') === -1 ? url : url.substring(0, url.indexOf('?'));\n    },\n\n    /**\n     * Get the querystring of a URL\n     * \n     * @return {String}     A querystring from URL\n     */\n    querystring: function() {\n      return url.indexOf('?') === -1 ? '' : url.substring(url.indexOf('?')+1);\n    },\n\n    /**\n     * Get the querystring of a URL parameters as a hash\n     * \n     * @return {String}     A querystring from URL\n     */\n    queryparams: function() {\n      var pairs = _self.querystring().split('&');\n      var params = {};\n\n      for(var i=0; i<pairs.length; i++) {\n        if(pairs[i] === '') continue;\n        var nameValue = pairs[i].split('=');\n        params[nameValue[0]] = (typeof nameValue[1] === 'undefined' || nameValue[1] === '') ? true : nameValue[1];\n      }\n\n      return params;\n    }\n  };\n\n  return _self;\n}\n\nmodule.exports = Url;\n\n},{}]},{},[4])\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n"],"sourceRoot":"/source/"}
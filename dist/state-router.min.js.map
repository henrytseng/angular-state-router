{"version":3,"sources":["state-router.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","$state","restrict","scope","link","element","attrs","css","on","change","sref","preventDefault",2,"angular","provider","factory","run","$rootScope","$urlManager","$resolution","$enact","$on","location","arguments","$ready","directive","./directives/sref","./services/enact","./services/queue-handler","./services/resolution","./services/state-router","./services/url-manager",3,"$q","$injector","_self","_act","actions","actionPromises","forEach","value","action","isString","get","invoke","push","when","all","process","_handle","request","next","current","then","err","$broadcast","$use",4,"Queue","_list","_data","add","handler","priority","constructor","Array","layer","concat","this","data","execute","callback","nextHandler","executionList","slice","sort","b","Math","max","min","$evalAsync","shift","create",5,"_resolve","resolve","resolvesPromises","key","resolution","locals","extend",6,"UrlDictionary","Parameters","_provider","_configuration","historyLength","_stateLibrary","_stateCache","_urlDictionary","_layerList","_parseName","nameParams","match","npart","substring","indexOf","ppart","lastIndexOf","name","params","_setStateDefaults","inherit","_validateStateName","nameChain","split","_validateStateQuery","query","_compareStates","equals","_getNameChain","nameList","map","item","list","join","filter","_getState","state","stateChain","copy","parent","nextState","merge","_defineState","url","options","init","initialLocation","$get","$location","$queueHandler","_current","_options","_initalLocation","_inst","_transitionQueue","_isReady","_history","_isInit","_pushHistory","splice","_changeState","nameExpr","error","queue","prevState","_queueChange","deferred","defer","nextRequest","reject","promise","_queueStateAndBroadcastComplete","hasOwnProperty","readyDeferred","parse","library","validate","history","lookup","ref","active","RegExp","casted","substr","transformed","../utils/parameters","../utils/url-dictionary",7,"_url","_update","path","re","replace","search","update","lastUrl","nextUrl",8,"reParseObjectLiteral","reString","reNumber","_resolveValue","NaN","_listify","str","sanitizeName","sanitizeValue","resolveValue","listify",9,"_patterns","_refs","_params","Url","prototype","pattern","pathChain","searchExpr","chunk","defaults","p","q","queryparams","_findPattern","check","paramParser","urlMatch","pop","varMatch","./url",10,"querystring","pairs","nameValue"],"mappings":"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","file":"state-router.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$state', function ($state) {\n  return {\n    restrict: 'A',\n    scope: {\n    },\n    link: function(scope, element, attrs) {\n      element.css('cursor', 'pointer');\n      element.on('click', function(e) {\n        $state.change(attrs.sref);\n        e.preventDefault();\n      });\n    }\n\n  };\n}];\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\n/* global angular:false */\n\n// CommonJS\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = 'angular-state-router';\n}\n\n// Instantiate module\nangular.module('angular-state-router', [])\n\n  .provider('$state', require('./services/state-router'))\n\n  .factory('$urlManager', require('./services/url-manager'))\n\n  .factory('$resolution', require('./services/resolution'))\n\n  .factory('$enact', require('./services/enact'))\n  \n  .factory('$queueHandler', require('./services/queue-handler'))\n\n  .run(['$rootScope', '$state', '$urlManager', '$resolution', '$enact', function($rootScope, $state, $urlManager, $resolution, $enact) {\n    // Update location changes\n    $rootScope.$on('$locationChangeSuccess', function() {\n      $urlManager.location(arguments);\n    });\n\n    // Initialize\n    $state.$ready();\n  }])\n\n  .directive('sref', require('./directives/sref'));\n\n},{\"./directives/sref\":1,\"./services/enact\":3,\"./services/queue-handler\":4,\"./services/resolution\":5,\"./services/state-router\":6,\"./services/url-manager\":7}],3:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$q', '$injector', '$state', '$rootScope', function($q, $injector, $state, $rootScope) {\n\n  // Instance\n  var _self = {};\n\n  /**\n   * Process actions\n   * \n   * @param  {Object}  actions An array of actions items\n   * @return {Promise}         A promise fulfilled when actions processed\n   */\n  var _act = function(actions) {\n    var actionPromises = [];\n\n    angular.forEach(actions, function(value) {\n      var action = angular.isString(value) ? $injector.get(value) : $injector.invoke(value);\n      actionPromises.push($q.when(action));\n    });\n\n    return $q.all(actionPromises);\n  };\n  _self.process = _act;\n\n  /**\n   * Middleware\n   * \n   * @param  {Object}   request A data Object\n   * @param  {Function} next    A callback, function(err)\n   */\n  var _handle = function(request, next) {\n    var current = $state.current();\n\n    if(!current) {\n      return next();\n    }\n\n    _act(current.actions || []).then(function() {\n      next();\n\n    }, function(err) {\n      $rootScope.$broadcast('$stateChangeErrorAction', err);\n      next(new Error('Error processing state actions'));\n    });\n  };\n\n  // Register middleware layer\n  $state.$use(_handle, 100);\n\n  return _self;\n}];\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$rootScope', function($rootScope) {\n\n  /**\n   * Execute a series of functions; used in tandem with middleware\n   */\n  var Queue = function() {\n    var _list = [];\n    var _data = null;\n\n    var _self = {\n\n      /**\n       * Add a handler\n       * \n       * @param {Mixed}  handler A Function or an Array of Functions to add to the queue\n       * @return {Queue}         Itself; chainable\n       */\n      add: function(handler, priority) {\n        if(handler && handler.constructor === Array) {\n          handler.forEach(function(layer) {\n            layer.priority = typeof layer.priority === 'undefined' ? 1 : layer.priority;\n          });\n          _list = _list.concat(handler);\n        } else {\n          handler.priority = priority || (typeof handler.priority === 'undefined' ? 1 : handler.priority);\n          _list.push(handler);\n        }\n        return this;\n      },\n\n      /**\n       * Data object\n       * \n       * @param  {Object} data A data object made available to each handler\n       * @return {Queue}       Itself; chainable\n       */\n      data: function(data) {\n        _data = data;\n        return this;\n      },\n\n      /**\n       * Begin execution and trigger callback at the end\n       * \n       * @param  {Function} callback A callback, function(err)\n       * @return {Queue}             Itself; chainable\n       */\n      execute: function(callback) {\n        var nextHandler;\n        var executionList = _list.slice(0).sort(function(a, b) {\n          return Math.max(-1, Math.min(1, b.priority - a.priority));\n        });\n\n        nextHandler = function() {\n          $rootScope.$evalAsync(function() {\n            var handler = executionList.shift();\n\n            // Complete\n            if(!handler) {\n              callback(null);\n\n            // Next handler\n            } else {\n              handler.call(null, _data, function(err) {\n                // Error\n                if(err) {\n                  callback(err);\n\n                // Continue\n                } else {\n                  nextHandler();\n                }\n              });\n            }\n          });\n        };\n\n        // Start\n        nextHandler();\n      }\n\n    };\n    \n    return _self;\n  };\n\n  // Instance\n  return {\n\n    /**\n     * Factory method\n     * \n     * @return {Queue} A queue\n     */\n    create: function() {\n      return Queue();\n    }\n  };\n}];\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$q', '$injector', '$state', '$rootScope', function($q, $injector, $state, $rootScope) {\n\n  // Instance\n  var _self = {};\n\n  /**\n   * Resolve\n   * \n   * @param  {Object}  resolve A hash Object of items to resolve\n   * @return {Promise}         A promise fulfilled when templates retireved\n   */\n  var _resolve = function(resolve) {\n    var resolvesPromises = {};\n\n    angular.forEach(resolve, function(value, key) {\n      var resolution = angular.isString(value) ? $injector.get(value) : $injector.invoke(value, null, null, key);\n      resolvesPromises[key] = $q.when(resolution);\n    });\n\n    return $q.all(resolvesPromises);\n  };\n  _self.resolve = _resolve;\n\n  /**\n   * Middleware\n   * \n   * @param  {Object}   request A data Object\n   * @param  {Function} next    A callback, function(err)\n   */\n  var _handle = function(request, next) {\n    var current = $state.current();\n\n    if(!current) {\n      return next();\n    }\n\n    _resolve(current.resolve || {}).then(function(locals) {\n      angular.extend(request.locals, locals);\n      next();\n\n    }, function(err) {\n      $rootScope.$broadcast('$stateChangeErrorResolve', err);\n      next(new Error('Error resolving state'));\n    });\n  };\n\n  // Register middleware layer\n  $state.$use(_handle, 101);\n\n  return _self;\n}];\n\n},{}],6:[function(require,module,exports){\n'use strict';\n\nvar UrlDictionary = require('../utils/url-dictionary');\nvar Parameters = require('../utils/parameters');\n\nmodule.exports = [function StateRouterProvider() {\n  // Provider\n  var _provider = this;\n\n  // Configuration, global options\n  var _configuration = {\n    historyLength: 5\n  };\n\n  // State definition library\n  var _stateLibrary = {};\n  var _stateCache = {};\n\n  // URL to state dictionary\n  var _urlDictionary = new UrlDictionary();\n\n  // Middleware layers\n  var _layerList = [];\n\n  /**\n   * Parse state notation name-params.  \n   * \n   * Assume all parameter values are strings\n   * \n   * @param  {String} nameParams A name-params string\n   * @return {Object}             A name string and param Object\n   */\n  var _parseName = function(nameParams) {\n    if(nameParams && nameParams.match(/^[a-zA-Z0-9_\\.]*\\(.*\\)$/)) {\n      var npart = nameParams.substring(0, nameParams.indexOf('('));\n      var ppart = Parameters( nameParams.substring(nameParams.indexOf('(')+1, nameParams.lastIndexOf(')')) );\n\n      return {\n        name: npart,\n        params: ppart\n      };\n\n    } else {\n      return {\n        name: nameParams,\n        params: null\n      };\n    }\n  };\n\n  /**\n   * Add default values to a state\n   * \n   * @param  {Object} data An Object\n   * @return {Object}      An Object\n   */\n  var _setStateDefaults = function(data) {\n    // Default values\n    data.inherit = (typeof data.inherit === 'undefined') ? true : data.inherit;\n\n    return data;\n  };\n\n  /**\n   * Validate state name\n   * \n   * @param  {String} name A unique identifier for the state; using dot-notation\n   * @return {Boolean}     True if name is valid, false if not\n   */\n  var _validateStateName = function(name) {\n    name = name || '';\n\n    // TODO optimize with RegExp\n\n    var nameChain = name.split('.');\n    for(var i=0; i<nameChain.length; i++) {\n      if(!nameChain[i].match(/[a-zA-Z0-9_]+/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Validate state query\n   * \n   * @param  {String} query A query for the state; using dot-notation\n   * @return {Boolean}      True if name is valid, false if not\n   */\n  var _validateStateQuery = function(query) {\n    query = query || '';\n    \n    // TODO optimize with RegExp\n\n    var nameChain = query.split('.');\n    for(var i=0; i<nameChain.length; i++) {\n      if(!nameChain[i].match(/(\\*(\\*)?|[a-zA-Z0-9_]+)/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Compare two states, compares values.  \n   * \n   * @return {Boolean} True if states are the same, false if states are different\n   */\n  var _compareStates = function(a, b) {\n    a = a || {};\n    b = b || {};\n    return a.name === b.name && angular.equals(a.params, b.params);\n  };\n\n  /**\n   * Get a list of parent states\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @return {Array}         An Array of parent states\n   */\n  var _getNameChain = function(name) {\n    var nameList = name.split('.');\n\n    return nameList\n      .map(function(item, i, list) {\n        return list.slice(0, i+1).join('.');\n      })\n      .filter(function(item) {\n        return item !== null;\n      });\n  };\n\n  /**\n   * Internal method to crawl library heirarchy\n   * \n   * @param  {String} name   A unique identifier for the state; using state-notation\n   * @return {Object}        A state data Object\n   */\n  var _getState = function(name) {\n    name = name || '';\n\n    var state = null;\n\n    // Only use valid state queries\n    if(!_validateStateName(name)) {\n      return null;\n    \n    // Use cache if exists\n    } else if(_stateCache[name]) {\n      return _stateCache[name];\n    }\n\n    var nameChain = _getNameChain(name);\n    var stateChain = nameChain\n      .map(function(name, i) {\n        var item = angular.copy(_stateLibrary[name]);\n        return item;\n      })\n      .filter(function(parent) {\n        return !!parent;\n      });\n\n    // Walk up checking inheritance\n    for(var i=stateChain.length-1; i>=0; i--) {\n      if(stateChain[i]) {\n        var nextState = stateChain[i];\n        state = angular.merge(nextState, state || {});\n      }\n\n      if(state && state.inherit === false) break;\n    }\n\n    // Store in cache\n    _stateCache[name] = state;\n\n    return state;\n  };\n\n  /**\n   * Internal method to store a state definition.  Parameters should be included in data Object not state name.  \n   * \n   * @param  {String} name A unique identifier for the state; using state-notation\n   * @param  {Object} data A state definition data Object\n   * @return {Object}      A state data Object\n   */\n  var _defineState = function(name, data) {\n    if(name === null || typeof name === 'undefined') {\n      throw new Error('Name cannot be null.');\n    \n    // Only use valid state names\n    } else if(!_validateStateName(name)) {\n      throw new Error('Invalid state name.');\n    }\n\n    // Create state\n    var state = angular.copy(data);\n\n    // Use defaults\n    _setStateDefaults(state);\n\n    // Named state\n    state.name = name;\n\n    // Set definition\n    _stateLibrary[name] = state;\n\n    // Reset cache\n    _stateCache = {};\n\n    // URL mapping\n    if(state.url) {\n      _urlDictionary.add(state.url, state);\n    }\n\n    return data;\n  };\n\n  /**\n   * Set configuration data parameters for StateRouter\n   *\n   * Including parameters:\n   * \n   * - historyLength   {Number} Defaults to 5\n   * - initialLocation {Object} An Object{name:String, params:Object} for initial state transition\n   *\n   * @param  {Object}         options A data Object\n   * @return {$stateProvider}         Itself; chainable\n   */\n  this.options = function(options) {\n    angular.extend(_configuration, options || {});\n    return _provider;\n  };\n\n  /**\n   * Set/get state\n   * \n   * @param  {String} name A unique identifier for the state; using state-notation\n   * @param  {Object} data A state definition data Object\n   * @return {$stateProvider} Itself; chainable\n   */\n  this.state = function(name, state) {\n    // Get\n    if(!state) {\n      return _getState(name);\n    }\n\n    // Set\n    _defineState(name, state);\n\n    return _provider;\n  };\n\n  /**\n   * Set initialization parameters; deferred to $ready()\n   * \n   * @param  {String}         name   A iniital state\n   * @param  {Object}         params A data object of params\n   * @return {$stateProvider}        Itself; chainable\n   */\n  this.init = function(name, params) {\n    _configuration.initialLocation = {\n      name: name,\n      params: params\n    };\n    return _provider;\n  };\n\n  /**\n   * Get instance\n   */\n  this.$get = ['$rootScope', '$location', '$q', '$queueHandler', function StateRouterFactory($rootScope, $location, $q, $queueHandler) {\n\n    // State\n    var _current;\n    var _transitionQueue = [];\n    var _isReady = true;\n\n    var _options;\n    var _initalLocation;\n    var _history = [];\n    var _isInit = false;\n\n    /**\n     * Internal method to add history and correct length\n     * \n     * @param  {Object} data An Object\n     */\n    var _pushHistory = function(data) {\n      // Keep the last n states (e.g. - defaults 5)\n      var historyLength = _options.historyLength || 5;\n\n      if(data) {\n        _history.push(data);\n      }\n\n      // Update length\n      if(_history.length > historyLength) {\n        _history.splice(0, _history.length - historyLength);\n      }\n    };\n\n    /**\n     * Internal method to fulfill change state request.  Parameters in `params` takes precedence over state-notation `name` expression.  \n     * \n     * @param  {String}   name     A unique identifier for the state; using state-notation including optional parameters\n     * @param  {Object}   params   A data object of params\n     * @param  {Function} callback A callback, function(err)\n     * @return {Promise}           A promise fulfilled when state change occurs\n     */\n    var _changeState = function(name, params, callback) {\n      $rootScope.$evalAsync(function() {\n        params = params || {};\n\n        // Parse state-notation expression\n        var nameExpr = _parseName(name);\n        name = nameExpr.name;\n        params = angular.extend(nameExpr.params || {}, params);\n\n        var error = null;\n        var request = {\n          name: name,\n          params: params,\n          locals: {}\n        };\n\n        // Compile execution phases\n        var queue = $queueHandler.create().data(request);\n\n        var nextState = angular.copy(_getState(name));\n        var prevState = _current;\n\n        if(nextState) {\n          // Set locals\n          nextState.locals = request.locals;\n          \n          // Set parameters\n          nextState.params = angular.extend(nextState.params || {}, params);\n        }\n\n        // Does not exist\n        if(nextState === null) {\n          queue.add(function(data, next) {\n            error = new Error('Requested state was not defined.');\n            error.code = 'notfound';\n\n            $rootScope.$broadcast('$stateChangeErrorNotFound', error, request);\n            next(error);\n          }, 200);\n\n        // State not changed\n        } else if(_compareStates(prevState, nextState)) {\n          queue.add(function(data, next) {\n            _current = nextState;\n            next();\n          }, 200);\n          \n        // Valid state exists\n        } else {\n\n          // Process started\n          queue.add(function(data, next) {\n            $rootScope.$broadcast('$stateChangeBegin', request);\n            next();\n          }, 201);\n\n          // Make state change\n          queue.add(function(data, next) {\n            if(prevState) _pushHistory(prevState);\n            _current = nextState;\n            \n            next();\n          }, 200);\n\n          // Add middleware\n          queue.add(_layerList);\n\n          // Process ended\n          queue.add(function(data, next) {\n            $rootScope.$broadcast('$stateChangeEnd', request);\n            next();\n          }, -200);\n        }\n\n        // Run\n        queue.execute(callback);\n      });\n    };\n\n    /**\n     * Internal method to request change to state.  \n     * \n     * @param  {String}  name   A unique identifier for the state; using state-notation including optional parameters\n     * @param  {Object}  params A data object of params\n     * @return {Promise}        A promise fulfilled when state change occurs\n     */\n    var _queueChange = function(name, params) {\n      var deferred = $q.defer();\n      var error;\n\n      _transitionQueue.push({\n        name: name,\n        params: params\n      });\n\n      var nextRequest;\n      nextRequest = function() {\n        if(!_isReady) return;\n        var request = _transitionQueue.shift();\n\n        // Continue\n        if(request) {\n          _isReady = false;\n\n          _changeState(request.name, request.params, function(err) {\n            _isReady = true;\n\n            if(err) {\n              $rootScope.$broadcast('$stateChangeError', err, request);\n              error = err;\n            }\n\n            nextRequest();\n          });\n\n        // End\n        } else {\n          if(error) {\n            deferred.reject(error);\n          } else {\n            deferred.resolve();\n          }\n        }\n\n      };\n\n      nextRequest();\n\n      return deferred.promise;\n    };\n\n    /**\n     * Internal method to change to state and broadcast completion\n     * \n     * @param  {String}  name   A unique identifier for the state; using state-notation including optional parameters\n     * @param  {Object}  params A data object of params\n     * @return {Promise}        A promise fulfilled when state change occurs\n     */\n    var _queueStateAndBroadcastComplete = function(name, params) {\n      return _queueChange(name, params).then(function() {\n        $rootScope.$broadcast('$stateChangeComplete', null, _current);\n      }, function(err) {\n        $rootScope.$broadcast('$stateChangeComplete', err, _current);\n      });\n    };\n\n    // Instance\n    var _inst;\n    _inst = {\n\n      /**\n       * Get options\n       *\n       * @return {Object} A configured options\n       */\n      options: function() {\n        // Hasn't been initialized\n        if(!_options) {\n          _options = angular.copy(_configuration);\n        }\n\n        return _options;\n      },\n\n      /**\n       * Set/get state. Reloads state if current state is affected by defined \n       * state (when redefining parent or current state)\n       *\n       * @param  {String} name A unique identifier for the state; using state-notation\n       * @param  {Object} data A state definition data Object\n       * @return {$state}      Itself; chainable\n       */\n      state: function(name, state) {\n        // Get\n        if(!state) {\n          return _getState(name);\n        }\n\n        // Set\n        _defineState(name, state);\n\n        // Reload\n        if(_current) {\n          var nameChain = _getNameChain(_current.name);\n          if(nameChain.indexOf(name) !== -1) {\n            _queueChange(_current.name);\n          }\n        }\n\n        return _inst;\n      },\n\n      /**\n       * Internal method to add middleware; called during state transition\n       * \n       * @param  {Function} handler  A callback, function(request, next)\n       * @param  {Number}   priority A number denoting priority\n       * @return {$state}            Itself; chainable\n       */\n      $use: function(handler, priority) {\n        if(typeof handler !== 'function') {\n          throw new Error('Middleware must be a function.');\n        }\n\n        if(typeof priority !== 'undefined') handler.priority = priority;\n        _layerList.push(handler);\n        return _inst;\n      },\n\n      /**\n       * Internal method to perform initialization\n       * \n       * @return {$state} Itself; chainable\n       */\n      $ready: function() {\n        $rootScope.$evalAsync(function() {\n          if(!_isInit) {\n            _isInit = true;\n\n            // Configuration\n            if(!_options) {\n              _options = angular.copy(_configuration);\n            }\n\n            // Initial location\n            if(_options.hasOwnProperty('initialLocation')) {\n              _initalLocation = angular.copy(_options.initialLocation);\n            }\n\n            var readyDeferred = null;\n\n            // Initial location\n            if($location.url() !== '') {\n              readyDeferred = _inst.$location($location.url());\n\n            // Initialize with state\n            } else if(_initalLocation) {\n              readyDeferred = _queueStateAndBroadcastComplete(_initalLocation.name, _initalLocation.params);\n            }\n\n            $q.when(readyDeferred).then(function() {\n              $rootScope.$broadcast('$stateInit');\n            });\n          }\n        });\n\n        return _inst;\n      },\n\n      // Parse state notation name-params.  \n      parse: _parseName,\n\n      /**\n       * Retrieve definition of states\n       * \n       * @return {Object} A hash of all defined states\n       */\n      library: function() {\n        return _stateLibrary;\n      },\n\n      // Validation\n      validate: {\n        name: _validateStateName,\n        query: _validateStateQuery\n      },\n\n      /**\n       * Retrieve history\n       * \n       * @return {[type]} [description]\n       */\n      history: function() {\n        return _history;\n      },\n\n      /**\n       * Request state transition, asynchronous operation\n       * \n       * @param  {String}      name     A unique identifier for the state; using dot-notation\n       * @param  {Object}      [params] A parameters data object\n       * @return {Promise}              A promise fulfilled when state change complete\n       */\n      change: function(name, params) {\n        return _queueStateAndBroadcastComplete(name, params);\n      },\n\n      /**\n       * Internal method to change state based on $location.url(), asynchronous operation using internal methods, quiet fallback.  \n       * \n       * @param  {String}      url        A url matching defind states\n       * @param  {Function}    [callback] A callback, function(err)\n       * @return {$state}                 Itself; chainable\n       */\n      $location: function(url) {\n        var data = _urlDictionary.lookup(url);\n\n        if(data) {\n          var state = data.ref;\n\n          if(state) {\n            // Parse params from url\n            return _queueStateAndBroadcastComplete(state.name, data.params);\n          }\n        } else if(!!url && url !== '') {\n          var error = new Error('Requested state was not defined.');\n          error.code = 'notfound';\n          $rootScope.$broadcast('$stateChangeErrorNotFound', error, {\n            url: url\n          });\n        }\n\n        return $q.reject(new Error('Unable to find location in library'));\n      },\n      \n      /**\n       * Retrieve copy of current state\n       * \n       * @return {Object} A copy of current state\n       */\n      current: function() {\n        return (!_current) ? null : angular.copy(_current);\n      },\n\n      /**\n       * Check query against current state\n       *\n       * @param  {Mixed}   query  A string using state notation or a RegExp\n       * @param  {Object}  params A parameters data object\n       * @return {Boolean}        A true if state is parent to current state\n       */\n      active: function(query, params) {\n        query = query || '';\n        \n        // No state\n        if(!_current) {\n          return false;\n\n        // Use RegExp matching\n        } else if(query instanceof RegExp) {\n          return !!_current.name.match(query);\n\n        // String; state dot-notation\n        } else if(typeof query === 'string') {\n\n          // Cast string to RegExp\n          if(query.match(/^\\/.*\\/$/)) {\n            var casted = query.substr(1, query.length-2);\n            return !!_current.name.match(new RegExp(casted));\n\n          // Transform to state notation\n          } else {\n            var transformed = query\n              .split('.')\n              .map(function(item) {\n                if(item === '*') {\n                  return '[a-zA-Z0-9_]*';\n                } else if(item === '**') {\n                  return '[a-zA-Z0-9_\\\\.]*';\n                } else {\n                  return item;\n                }\n              })\n              .join('\\\\.');\n\n            return !!_current.name.match(new RegExp(transformed));\n          }\n        }\n\n        // Non-matching\n        return false;\n      }\n    };\n\n    return _inst;\n  }];\n\n}];\n\n},{\"../utils/parameters\":8,\"../utils/url-dictionary\":9}],7:[function(require,module,exports){\n'use strict';\n\nvar UrlDictionary = require('../utils/url-dictionary');\n\nmodule.exports = ['$state', '$location', '$rootScope', function($state, $location, $rootScope) {\n  var _url = $location.url();\n\n  // Instance\n  var _self = {};\n\n  /**\n   * Update URL based on state\n   */\n  var _update = function() {\n    var current = $state.current();\n\n    if(current && current.url) {\n      var path;\n      path = current.url;\n\n      // Add parameters or use default parameters\n      var params = current.params || {};\n      var query = {};\n      for(var name in params) {\n        var re = new RegExp(':'+name, 'g');\n        if(path.match(re)) {\n          path = path.replace(re, params[name]);\n        } else {\n          query[name] = params[name];\n        }\n      }\n\n      $location.path(path);\n      $location.search(query);\n      \n      _url = $location.url();\n    }\n  };\n\n  /**\n   * Update url based on state\n   */\n  _self.update = function() {\n    _update();\n  };\n\n  /**\n   * Detect URL change and dispatch state change\n   */\n  _self.location = function() {\n    var lastUrl = _url;\n    var nextUrl = $location.url();\n\n    if(nextUrl !== lastUrl) {\n      _url = nextUrl;\n\n      $state.$location(_url);\n      $rootScope.$broadcast('$locationStateUpdate');\n    }\n  };\n\n  // Register middleware layer\n  $state.$use(function(request, next) {\n    _update();\n    next();\n  });\n\n  return _self;\n}];\n\n},{\"../utils/url-dictionary\":9}],8:[function(require,module,exports){\n'use strict';\n\n// Parse Object literal name-value pairs\nvar reParseObjectLiteral = /([,{]\\s*((\"|')(.*?)\\3|\\w*)|(:\\s*([+-]?(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[eE][+-]?\\d+)?|true|false|null|(\"|')(.*?)\\7|\\[[^\\]]*\\])))/g;\n\n// Match Strings\nvar reString = /^(\"|')(.*?)\\1$/;\n\n// TODO Add escaped string quotes \\' and \\\" to string matcher\n\n// Match Number (int/float/exponential)\nvar reNumber = /^[+-]?(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[eE][+-]?\\d+)?$/;\n\n/**\n * Parse string value into Boolean/Number/Array/String/null.\n *\n * Strings are surrounded by a pair of matching quotes\n * \n * @param  {String} value A String value to parse\n * @return {Mixed}        A Boolean/Number/Array/String/null\n */\nvar _resolveValue = function(value) {\n\n  // Boolean: true\n  if(value === 'true') {\n    return true;\n\n  // Boolean: false\n  } else if(value === 'false') {\n    return false;\n\n  // Null\n  } else if(value === 'null') {\n    return null;\n\n  // String\n  } else if(value.match(reString)) {\n    return value.substr(1, value.length-2);\n\n  // Number\n  } else if(value.match(reNumber)) {\n    return +value;\n\n  // NaN\n  } else if(value === 'NaN') {\n    return NaN;\n\n  // TODO add matching with Arrays and parse\n  \n  }\n\n  // Unable to resolve\n  return value;\n};\n\n// Find values in an object literal\nvar _listify = function(str) {\n\n  // Trim\n  str = str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n\n  if(str.match(/^\\s*{.*}\\s*$/) === null) {\n    throw new Error('Parameters expects an Object');\n  }\n\n  var sanitizeName = function(name) {\n    return name.replace(/^[\\{,]?\\s*[\"']?/, '').replace(/[\"']?\\s*$/, '');\n  };\n\n  var sanitizeValue = function(value) {\n    var str = value.replace(/^(:)?\\s*/, '').replace(/\\s*$/, '');\n    return _resolveValue(str);\n  };\n\n  return str.match(reParseObjectLiteral).map(function(item, i, list) {\n    return i%2 === 0 ? sanitizeName(item) : sanitizeValue(item);\n  });\n};\n\n/**\n * Create a params Object from string\n * \n * @param {String} str A stringified version of Object literal\n */\nvar Parameters = function(str) {\n  str = str || '';\n\n  // Instance\n  var _self = {};\n\n  _listify(str).forEach(function(item, i, list) {\n    if(i%2 === 0) {\n      _self[item] = list[i+1];\n    }\n  });\n\n  return _self;\n};\n\nmodule.exports = Parameters;\n\nmodule.exports.resolveValue = _resolveValue;\nmodule.exports.listify = _listify;\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nvar Url = require('./url');\n\n/**\n * Constructor\n */\nfunction UrlDictionary() {\n  this._patterns = [];\n  this._refs = [];\n  this._params = [];\n}\n\n/**\n * Associate a URL pattern with a reference\n * \n * @param  {String} pattern A URL pattern\n * @param  {Object} ref     A data Object\n */\nUrlDictionary.prototype.add = function(pattern, ref) {\n  pattern = pattern || '';\n  var _self = this;\n  var i = this._patterns.length;\n\n  var pathChain;\n  var params = {};\n\n  if(pattern.indexOf('?') === -1) {\n    pathChain = Url(pattern).path().split('/');\n\n  } else {\n    pathChain = Url(pattern).path().split('/');\n  }\n\n  // Start\n  var searchExpr = '^';\n\n  // Items\n  (pathChain.forEach(function(chunk, i) {\n    if(i!==0) {\n      searchExpr += '\\\\/';\n    }\n\n    if(chunk[0] === ':') {\n      searchExpr += '[^\\\\/?]*';\n      params[chunk.substring(1)] = new RegExp(searchExpr);\n\n    } else {\n      searchExpr += chunk;\n    }\n  }));\n\n  // End\n  searchExpr += '[\\\\/]?$';\n\n  this._patterns[i] = new RegExp(searchExpr);\n  this._refs[i] = ref;\n  this._params[i] = params;\n};\n\n/**\n * Find a reference according to a URL pattern and retrieve params defined in URL\n * \n * @param  {String} url      A URL to test for\n * @param  {Object} defaults A data Object of default parameter values\n * @return {Object}          A reference to a stored object\n */\nUrlDictionary.prototype.lookup = function(url, defaults) {\n  url = url || '';\n  var p = Url(url).path();\n  var q = Url(url).queryparams();\n\n  var _self = this;\n\n  // Check dictionary\n  var _findPattern = function(check) {\n    check = check || '';\n    for(var i=_self._patterns.length-1; i>=0; i--) {\n      if(check.match(_self._patterns[i]) !== null) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  var i = _findPattern(p);\n  \n  // Matching pattern found\n  if(i !== -1) {\n\n    // Retrieve params in pattern match\n    var params = {};\n    for(var n in this._params[i]) {\n      var paramParser = this._params[i][n];\n      var urlMatch = (url.match(paramParser) || []).pop() || '';\n      var varMatch = urlMatch.split('/').pop();\n      params[n] = varMatch;\n    }\n\n    // Retrieve params in querystring match\n    params = angular.extend(q, params);\n\n    return {\n      url: url,\n      ref: this._refs[i],\n      params: params\n    };\n\n  // Not in dictionary\n  } else {\n    return null;\n  }\n};\n\nmodule.exports = UrlDictionary;\n\n},{\"./url\":10}],10:[function(require,module,exports){\n'use strict';\n\nfunction Url(url) {\n  url = url || '';\n\n  // Instance\n  var _self = {\n\n    /**\n     * Get the path of a URL\n     * \n     * @return {String}     A querystring from URL\n     */\n    path: function() {\n      return url.indexOf('?') === -1 ? url : url.substring(0, url.indexOf('?'));\n    },\n\n    /**\n     * Get the querystring of a URL\n     * \n     * @return {String}     A querystring from URL\n     */\n    querystring: function() {\n      return url.indexOf('?') === -1 ? '' : url.substring(url.indexOf('?')+1);\n    },\n\n    /**\n     * Get the querystring of a URL parameters as a hash\n     * \n     * @return {String}     A querystring from URL\n     */\n    queryparams: function() {\n      var pairs = _self.querystring().split('&');\n      var params = {};\n\n      for(var i=0; i<pairs.length; i++) {\n        if(pairs[i] === '') continue;\n        var nameValue = pairs[i].split('=');\n        params[nameValue[0]] = (typeof nameValue[1] === 'undefined' || nameValue[1] === '') ? true : nameValue[1];\n      }\n\n      return params;\n    }\n  };\n\n  return _self;\n}\n\nmodule.exports = Url;\n\n},{}]},{},[2])\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n"],"sourceRoot":"/source/"}
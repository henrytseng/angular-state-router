{"version":3,"sources":["state-router.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","EventEmitter","this","_events","_maxListeners","undefined","isFunction","arg","isNumber","isObject","isUndefined","prototype","defaultMaxListeners","setMaxListeners","isNaN","TypeError","emit","type","er","handler","len","args","listeners","error","arguments","Array","apply","slice","addListener","listener","m","newListener","push","warned","console","trace","on","once","g","removeListener","fired","list","position","splice","removeAllListeners","key","ret","listenerCount","emitter",2,"cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","setTimeout","run","clearTimeout","Item","fun","array","noop","process","nextTick","title","browser","env","argv","version","versions","off","binding","name","cwd","chdir","dir","umask",3,"$stateRouter","restrict","scope","link","element","attrs","css","change","sref","preventDefault",4,"angular","factory","directive","./directives/sref","./services/state-router","./services/url-manager","./utils/function","./utils/object","./utils/process",5,"events","clone","_current","_historyLength","_history","_library","_cache","_emitter","_self","Object","create","_setStateDefaults","data","inherit","_validateStateName","nameChain","split","match","_validateStateQuery","query","_compareStates","b","_copy","resolve","ai","bi","equals","_getNameChain","nameList","map","item","join","filter","_getState","state","stateChain","pname","parent","assign","_defineState","_queueHistory","_changeState","params","callback","request","nextState","prevState","options","hasOwnProperty","historyLength","init","bind","current","active","RegExp","casted","substr","transformed","library","validate","history","../utils/object","_process",6,7,"Function","oThis","aArgs","fToBind","fNOP","fBound",8,"Temp","hasOwn","O","obj","Properties","prop","defineProperty","enumerable","configurable","writable","value","target","to","nextSource","keysArray","keys","nextIndex","nextKey","desc","getOwnPropertyDescriptor","level","copy","Date","setTime","getTime","attr",9,"window"],"mappings":"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","file":"state-router.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],2:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            currentQueue[queueIndex].run();\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$stateRouter', function ($stateRouter) {\n  return {\n    restrict: 'A',\n    scope: {\n    },\n    link: function(scope, element, attrs) {\n      element.css('cursor', 'pointer');\n      element.on('click', function(e) {\n        $stateRouter.change(attrs.sref);\n        e.preventDefault();\n      });\n    }\n\n  };\n}];\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\n/* global angular:false */\n\n// CommonJS\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = 'angular-state-router';\n}\n\n// Polyfill\nrequire('./utils/object');\nrequire('./utils/process');\nrequire('./utils/function');\n\n// Instantiate module\nangular.module('angular-state-router', [])\n\n  .factory('$stateRouter', require('./services/state-router'))\n\n  .factory('$urlManager', require('./services/url-manager'))\n\n  .directive('sref', require('./directives/sref'));\n\n},{\"./directives/sref\":3,\"./services/state-router\":5,\"./services/url-manager\":6,\"./utils/function\":7,\"./utils/object\":8,\"./utils/process\":9}],5:[function(require,module,exports){\n(function (process){\n'use strict';\n\n/* global process:false */\n\nvar events = require('events');\nvar clone = require('../utils/object').clone;\n\nmodule.exports = [function() {\n  // Current state\n  var _current;\n\n  // Keep the last n states (e.g. - defaults 5)\n  var _historyLength = 5;\n  var _history = [];\n\n  var _library = {};\n  var _cache = {};\n  var _emitter = new events.EventEmitter();\n\n  // Extend from EventEmitter\n  var _self = Object.create(_emitter);\n\n  /**\n   * Add default values to a state\n   * \n   * @param  {Object} data An Object\n   * @return {Object}      An Object\n   */\n  var _setStateDefaults = function(data) {\n    data.inherit = (typeof data.inherit === 'undefined') ? true : data.inherit;\n\n    return data;\n  };\n\n  /**\n   * Validate state name\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @return {Boolean}       True if name is valid, false if not\n   */\n  var _validateStateName = function(name) {\n    name = name || '';\n\n    // TODO optimize with RegExp\n\n    var nameChain = name.split('.');\n    for(var i=0; i<nameChain.length; i++) {\n      if(!nameChain[i].match(/[a-zA-Z0-9]+/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Validate state query\n   * \n   * @param  {String} query  A query for the state; using dot-notation\n   * @return {Boolean}       True if name is valid, false if not\n   */\n  var _validateStateQuery = function(query) {\n    query = query || '';\n    \n    // TODO optimize with RegExp\n\n    var nameChain = query.split('.');\n    for(var i=0; i<nameChain.length; i++) {\n      if(!nameChain[i].match(/(\\*(\\*)?|[a-zA-Z0-9]+)/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Compare two states, compares values.  \n   * \n   * @return {Boolean} True if states are the same, false if states are different\n   */\n  var _compareStates = function(a, b) {\n    var _copy = function(data) {\n      // Copy\n      data = clone(data);\n\n      // Track resolve\n      if(data && data.resolve) {\n        for(var n in data.resolve) {\n          data.resolve[n] = true;\n        }\n      }\n\n      return data;\n    };\n    var ai = _copy(a);\n    var bi = _copy(b);\n\n    return angular.equals(ai, bi);\n  };\n\n  /**\n   * Get a list of parent states\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @return {Array}         An Array of parent states\n   */\n  var _getNameChain = function(name) {\n    var nameList = name.split('.');\n\n    return nameList\n      .map(function(item, i, list) {\n        return list.slice(0, i+1).join('.');\n      })\n      .filter(function(item) {\n        return item !== null;\n      });\n  };\n\n  /**\n   * Internal method to crawl library heirarchy\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @return {Object}        A state data Object\n   */\n  var _getState = function(name) {\n    name = name || '';\n\n    var state = null;\n\n    // Only use valid state queries\n    if(!_validateStateName(name)) {\n      return null;\n    \n    // Use cache if exists\n    } else if(_cache[name]) {\n      return _cache[name];\n    }\n\n    var nameChain = _getNameChain(name);\n\n    var stateChain = nameChain\n      .map(function(pname) {\n        return _library[pname];\n      })\n      .filter(function(parent) {\n        return parent !== null;\n      });\n\n    // Walk up checking inheritance\n    for(var i=stateChain.length-1; i>=0; i--) {\n      if(stateChain[i]) {\n        state = Object.assign(clone(stateChain[i]), state || {});\n      }\n\n      if(state && !state.inherit) break;\n    }\n\n    // Store in cache\n    _cache[name] = state;\n\n    return state;\n  };\n\n  /**\n   * Internal method to store a state definition\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @param  {Object} [data] A state definition data Object, optional\n   * @return {Object}        A state data Object\n   */\n  var _defineState = function(name, data) {\n    if(name === null || typeof name === 'undefined') {\n      throw new Error('Name cannot be null.');\n    \n    // Only use valid state names\n    } else if(!_validateStateName(name)) {\n      throw new Error('Invalid state name.');\n    }\n\n    // Create state\n    var state = clone(data);\n\n    // Use defaults\n    _setStateDefaults(state);\n\n    // Named state\n    state.name = name;\n\n    // Set definition\n    _library[name] = state;\n\n    // Clear cache on updates\n    _cache = {};\n\n    return data;\n  };\n\n  /**\n   * Queue history and correct length\n   * \n   * @param  {Object} data An Object\n   */\n  var _queueHistory = function(data) {\n    if(data) {\n      _history.push(data);\n    }\n\n    // Update length\n    if(_history.length > _historyLength) {\n      _history.splice(0, _history.length - _historyLength);\n    }\n  };\n\n  /**\n   * Internal change to state.  \n   * \n   * @param  {String}   name       A unique identifier for the state; using dot-notation\n   * @param  {Object}   [params]   A parameters data object\n   * @param  {Function} [callback] A callback, function(err)\n   */\n  var _changeState = function(name, params, callback) {\n    var error = null;\n    var request = {\n      name: name,\n      params: params\n    };\n\n    var nextState = _getState(name);\n    var prevState = _current;\n\n    // Set parameters\n    nextState = nextState !== null ? Object.assign({}, nextState, params) : null;\n\n    // Does not exist\n    if(!nextState) {\n      error = new Error('Requested state was not defined.');\n      error.code = 'notfound';\n      _self.emit('error:notfound', error, request);\n      _self.emit('error', error, request);\n\n    // State not changed\n    } else if(_compareStates(prevState, nextState)) {\n      _current = nextState;\n\n    // Exists\n    } else {\n      // Process started\n      _self.emit('change:begin', request);\n\n      // Valid state exists\n      if(prevState) _queueHistory(prevState);\n      _current = nextState;\n\n      \n\n      // TODO change URL values\n\n\n\n      // TODO implement loadable interface\n      _self.emit('load:start');\n      _self.emit('load:progress');\n      _self.emit('load:end');\n      //_self.emit('error:load');\n\n\n      // TODO resolve \n      _self.emit('resolve:start');\n      //_self.emit('error:resolve');\n      _self.emit('resolve:end');\n\n\n\n\n      // Rendered view\n      _self.emit('render', request);\n\n\n\n\n      //_self.emit('error', new Error('An unknown error occurred.'), request);\n\n      // Process ended\n      _self.emit('change:end', request);\n    }\n\n    // Completion\n    _self.emit('change:complete', error, request);\n    if(callback) callback(error);\n  };\n\n  /**\n   * Set configuration options for StateRouter\n   * \n   * @param  {Object}      params A data Object\n   * @return {StateRouter}        Itself; chainable\n   */\n  _self.options = function(params) {\n    params = params || {};\n\n    if(params.hasOwnProperty('historyLength')) {\n      _historyLength = params.historyLength;\n      _queueHistory(null);\n    }\n\n    return _self;\n  };\n\n  /**\n   * Sett/get state data.  Define the states.  \n   *\n   * @param  {String}      name   A unique identifier for the state; using dot-notation\n   * @param  {Object}      [data] A state definition data object, optional\n   * @return {StateRouter}        Itself; chainable\n   */\n  _self.state = function(name, data) {\n    if(!data) {\n      return _getState(name);\n    }\n    _defineState(name, data);\n    return _self;\n  };\n\n  /**\n   * Initialize, asynchronous operation.  Definition is done, initialize.  \n   * \n   * @param  {String}      name     An initial state to start in.  \n   * @param  {Object}      [params] A parameters data object\n   * @return {StateRouter}          Itself; chainable\n   */\n  _self.init = function(name, params) {\n    process.nextTick(function() {\n    \n      // Initialize with state\n      if(name) {\n        _changeState(name, params, function() {\n          _self.emit('init');\n        });\n\n      // Initialize only\n      } else {\n        _self.emit('init');\n      }\n    });\n\n    return _self;\n  };\n\n  /**\n   * Public method to change state, asynchronous operation\n   * \n   * @param  {String} name     A unique identifier for the state; using dot-notation\n   * @param  {Object} [params] A parameters data object\n   */\n  _self.change = function(name, params) {\n    process.nextTick(_changeState.bind(null, name, params));\n    return _self;\n  };\n\n  /**\n   * Retrieve copy of current state\n   * \n   * @return {Object} A copy of current state\n   */\n  _self.current = function() {\n    return !_current ? null : clone(_current);\n  };\n\n  /**\n   * Check query against current state\n   *\n   * @param  {Mixed}   query  A string using state notation or a RegExp\n   * @return {Boolean}        A true if state is parent to current state\n   */\n  _self.active = function(query) {\n    query = query || '';\n    \n    // No state\n    if(!_current) {\n      return false;\n\n    // Use RegExp matching\n    } else if(query instanceof RegExp) {\n      return !!_current.name.match(query);\n\n    // String; state dot-notation\n    } else if(typeof query === 'string') {\n\n      // Cast string to RegExp\n      if(query.match(/^\\/.*\\/$/)) {\n        var casted = query.substr(1, query.length-2);\n        return !!_current.name.match(new RegExp(casted));\n\n      // Transform to state notation\n      } else {\n        var transformed = query\n          .split('.')\n          .map(function(item) {\n            if(item === '*') {\n              return '[a-zA-Z0-9]*';\n            } else if(item === '**') {\n              return '[a-zA-Z0-9\\\\.]*';\n            } else {\n              return item;\n            }\n          })\n          .join('\\\\.');\n\n        return !!_current.name.match(new RegExp(transformed));\n      }\n    }\n\n    // Non-matching\n    return false;\n  };\n\n  /**\n   * Retrieve definition of states\n   * \n   * @return {Object} A hash of states\n   */\n  _self.library = function() {\n    return _library;\n  };\n\n  /**\n   * Validation\n   */\n  _self.validate = {\n    name: _validateStateName,\n    query: _validateStateQuery\n  };\n\n  /**\n   * Retrieve history\n   * \n   * @return {Object} A hash of states\n   */\n  _self.history = function() {\n    return _history;\n  };\n\n  // Return instance\n  return _self;\n}];\n\n}).call(this,require('_process'))\n\n},{\"../utils/object\":8,\"_process\":2,\"events\":1}],6:[function(require,module,exports){\n'use strict';\n\nmodule.exports = [function() {\n\n  return {\n\n    // TODO get url and match to existing state; set state\n\n\n  };\n\n}];\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\n// Polyfill Function.prototype.bind()\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function(oThis) {\n    if (typeof this !== 'function') {\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n    }\n\n    var aArgs   = Array.prototype.slice.call(arguments, 1),\n        fToBind = this,\n        fNOP    = function() {},\n        fBound  = function() {\n          return fToBind.apply(\n            this instanceof fNOP ? this : oThis,\n            aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\n// Polyfill Object.create()\nif (typeof Object.create !== 'function') {\n  // Production steps of ECMA-262, Edition 5, 15.2.3.5\n  // Reference: http://es5.github.io/#x15.2.3.5\n  Object.create = (function() {\n    // To save on memory, use a shared constructor\n    function Temp() {}\n\n    // make a safe reference to Object.prototype.hasOwnProperty\n    var hasOwn = Object.prototype.hasOwnProperty;\n\n    return function (O) {\n      // 1. If Type(O) is not Object or Null throw a TypeError exception.\n      if (typeof O !== 'object') {\n        throw new TypeError('Object prototype may only be an Object or null');\n      }\n\n      // 2. Let obj be the result of creating a new object as if by the\n      //    expression new Object() where Object is the standard built-in\n      //    constructor with that name\n      // 3. Set the [[Prototype]] internal property of obj to O.\n      Temp.prototype = O;\n      var obj = new Temp();\n      Temp.prototype = null; // Let's not keep a stray reference to O...\n\n      // 4. If the argument Properties is present and not undefined, add\n      //    own properties to obj as if by calling the standard built-in\n      //    function Object.defineProperties with arguments obj and\n      //    Properties.\n      if (arguments.length > 1) {\n        // Object.defineProperties does ToObject on its first argument.\n        var Properties = Object(arguments[1]);\n        for (var prop in Properties) {\n          if (hasOwn.call(Properties, prop)) {\n            obj[prop] = Properties[prop];\n          }\n        }\n      }\n\n      // 5. Return obj\n      return obj;\n    };\n  })();\n}\n\n// Polyfill Object.assign() \nif (!Object.assign) {\n  Object.defineProperty(Object, 'assign', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function(target) {\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert first argument to object');\n      }\n\n      var to = Object(target);\n      for (var i = 1; i < arguments.length; i++) {\n        var nextSource = arguments[i];\n        if (nextSource === undefined || nextSource === null) {\n          continue;\n        }\n        nextSource = Object(nextSource);\n\n        var keysArray = Object.keys(Object(nextSource));\n        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n          var nextKey = keysArray[nextIndex];\n          var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n          if (desc !== undefined && desc.enumerable) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n      return to;\n    }\n  });\n}\n\n/**\n * Clone an object, recursive\n * \n * @param  {Object} obj An Object\n * @return {Object}     A cloned Object\n */\nmodule.exports.clone = function clone(obj, level) {\n  var copy;\n  level = level || 0;\n\n  if(level > 256) {\n    throw new Error('Cloning object more than 256 levels');\n  }\n\n  // Handle the 3 simple types, and null or undefined\n  if (null === obj || \"object\" != typeof obj) return obj;\n\n  // Handle Date\n  if (obj instanceof Date) {\n    copy = new Date();\n    copy.setTime(obj.getTime());\n    return copy;\n  }\n\n  // Handle Array\n  if (obj instanceof Array) {\n    copy = [];\n    for (var i = 0, len = obj.length; i < len; i++) {\n      copy[i] = clone(obj[i], level+1);\n    }\n    return copy;\n  }\n\n  // Handle Object\n  if (obj instanceof Object) {\n    copy = {};\n    for (var attr in obj) {\n      if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr], level+1);\n    }\n    return copy;\n  }\n\n  throw new Error(\"Unable to copy obj! Its type isn't supported.\");\n};\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\n/* global window:false */\n/* global process:false */\n/* global setImmediate:false */\n/* global setTimeout:false */\n\n// Polyfill process.nextTick()\n\nif(window) {\n  if(!window.process) {\n\n    var _process = {\n      nextTick: function(callback) {\n        setTimeout(callback, 0);\n      }\n    };\n\n    // Export\n    window.process = _process;\n  }\n}\n\n},{}]},{},[4])\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCIvVXNlcnMvaGVucnkvSG9tZVN5bmMvQ2FudmFzL3Byb2plY3RzL2FuZ3VsYXItc3RhdGUtcm91dGVyL3NyYy9kaXJlY3RpdmVzL3NyZWYuanMiLCIvVXNlcnMvaGVucnkvSG9tZVN5bmMvQ2FudmFzL3Byb2plY3RzL2FuZ3VsYXItc3RhdGUtcm91dGVyL3NyYy9pbmRleC5qcyIsIi9Vc2Vycy9oZW5yeS9Ib21lU3luYy9DYW52YXMvcHJvamVjdHMvYW5ndWxhci1zdGF0ZS1yb3V0ZXIvc3JjL3NlcnZpY2VzL3N0YXRlLXJvdXRlci5qcyIsIi9Vc2Vycy9oZW5yeS9Ib21lU3luYy9DYW52YXMvcHJvamVjdHMvYW5ndWxhci1zdGF0ZS1yb3V0ZXIvc3JjL3NlcnZpY2VzL3VybC1tYW5hZ2VyLmpzIiwiL1VzZXJzL2hlbnJ5L0hvbWVTeW5jL0NhbnZhcy9wcm9qZWN0cy9hbmd1bGFyLXN0YXRlLXJvdXRlci9zcmMvdXRpbHMvZnVuY3Rpb24uanMiLCIvVXNlcnMvaGVucnkvSG9tZVN5bmMvQ2FudmFzL3Byb2plY3RzL2FuZ3VsYXItc3RhdGUtcm91dGVyL3NyYy91dGlscy9vYmplY3QuanMiLCIvVXNlcnMvaGVucnkvSG9tZVN5bmMvQ2FudmFzL3Byb2plY3RzL2FuZ3VsYXItc3RhdGUtcm91dGVyL3NyYy91dGlscy9wcm9jZXNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3U0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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SUFBSSxTQUFTLGFBQWEsS0FBSyxZQUFZO1lBQ3pDLEdBQUcsV0FBVyxXQUFXOzs7O01BSS9CLE9BQU87Ozs7Ozs7Ozs7O0FBV2IsT0FBTyxRQUFRLFFBQVEsU0FBUyxNQUFNLEtBQUssT0FBTztFQUNoRCxJQUFJO0VBQ0osUUFBUSxTQUFTOztFQUVqQixHQUFHLFFBQVEsS0FBSztJQUNkLE1BQU0sSUFBSSxNQUFNOzs7O0VBSWxCLElBQUksU0FBUyxPQUFPLFlBQVksT0FBTyxLQUFLLE9BQU87OztFQUduRCxJQUFJLGVBQWUsTUFBTTtJQUN2QixPQUFPLElBQUk7SUFDWCxLQUFLLFFBQVEsSUFBSTtJQUNqQixPQUFPOzs7O0VBSVQsSUFBSSxlQUFlLE9BQU87SUFDeEIsT0FBTztJQUNQLEtBQUssSUFBSSxJQUFJLEdBQUcsTUFBTSxJQUFJLFFBQVEsSUFBSSxLQUFLLEtBQUs7TUFDOUMsS0FBSyxLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU07O0lBRWhDLE9BQU87Ozs7RUFJVCxJQUFJLGVBQWUsUUFBUTtJQUN6QixPQUFPO0lBQ1AsS0FBSyxJQUFJLFFBQVEsS0FBSztNQUNwQixJQUFJLElBQUksZUFBZSxPQUFPLEtBQUssUUFBUSxNQUFNLElBQUksT0FBTyxNQUFNOztJQUVwRSxPQUFPOzs7RUFHVCxNQUFNLElBQUksTUFBTTs7QUFFbEI7O0FDNUhBOzs7Ozs7Ozs7QUFTQSxHQUFHLFFBQVE7RUFDVCxHQUFHLENBQUMsT0FBTyxTQUFTOztJQUVsQixJQUFJLFdBQVc7TUFDYixVQUFVLFNBQVMsVUFBVTtRQUMzQixXQUFXLFVBQVU7Ozs7O0lBS3pCLE9BQU8sVUFBVTs7O0FBR3JCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxuRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24obikge1xuICBpZiAoIWlzTnVtYmVyKG4pIHx8IG4gPCAwIHx8IGlzTmFOKG4pKVxuICAgIHRocm93IFR5cGVFcnJvcignbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50cy5lcnJvciB8fFxuICAgICAgICAoaXNPYmplY3QodGhpcy5fZXZlbnRzLmVycm9yKSAmJiAhdGhpcy5fZXZlbnRzLmVycm9yLmxlbmd0aCkpIHtcbiAgICAgIGVyID0gYXJndW1lbnRzWzFdO1xuICAgICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICB9XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQuJyk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNVbmRlZmluZWQoaGFuZGxlcikpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBmYXN0IGNhc2VzXG4gICAgICBjYXNlIDE6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBzbG93ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkrKylcbiAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoaGFuZGxlcikpIHtcbiAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKVxuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG5cbiAgICBsaXN0ZW5lcnMgPSBoYW5kbGVyLnNsaWNlKCk7XG4gICAgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICBpZiAodGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyKVxuICAgIHRoaXMuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGxpc3RlbmVyLmxpc3RlbmVyKSA/XG4gICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICBlbHNlIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2VcbiAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBbdGhpcy5fZXZlbnRzW3R5cGVdLCBsaXN0ZW5lcl07XG5cbiAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkgJiYgIXRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQpIHtcbiAgICB2YXIgbTtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX21heExpc3RlbmVycykpIHtcbiAgICAgIG0gPSB0aGlzLl9tYXhMaXN0ZW5lcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgICB9XG5cbiAgICBpZiAobSAmJiBtID4gMCAmJiB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoID4gbSkge1xuICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKCcobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2xlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdC4nLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoKTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZS50cmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBub3Qgc3VwcG9ydGVkIGluIElFIDEwXG4gICAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgdmFyIGZpcmVkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZygpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGcpO1xuXG4gICAgaWYgKCFmaXJlZCkge1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHRoaXMub24odHlwZSwgZyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBsaXN0LCBwb3NpdGlvbiwgbGVuZ3RoLCBpO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGxpc3QgPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICBwb3NpdGlvbiA9IC0xO1xuXG4gIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fFxuICAgICAgKGlzRnVuY3Rpb24obGlzdC5saXN0ZW5lcikgJiYgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcblxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxpc3QpKSB7XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gPiAwOykge1xuICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG4gICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICBsaXN0Lmxlbmd0aCA9IDA7XG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIga2V5LCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICBpZiAoIXRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgZWxzZSBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGZvciAoa2V5IGluIHRoaXMuX2V2ZW50cykge1xuICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcnMpKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICB9IGVsc2Uge1xuICAgIC8vIExJRk8gb3JkZXJcbiAgICB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aClcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2xpc3RlbmVycy5sZW5ndGggLSAxXSk7XG4gIH1cbiAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgcmV0O1xuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldCA9IFtdO1xuICBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgcmV0ID0gW3RoaXMuX2V2ZW50c1t0eXBlXV07XG4gIGVsc2VcbiAgICByZXQgPSB0aGlzLl9ldmVudHNbdHlwZV0uc2xpY2UoKTtcbiAgcmV0dXJuIHJldDtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICB2YXIgcmV0O1xuICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW3R5cGVdKVxuICAgIHJldCA9IDA7XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24oZW1pdHRlci5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSAxO1xuICBlbHNlXG4gICAgcmV0ID0gZW1pdHRlci5fZXZlbnRzW3R5cGVdLmxlbmd0aDtcbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZHJhaW5RdWV1ZSwgMCk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFsnJHN0YXRlUm91dGVyJywgZnVuY3Rpb24gKCRzdGF0ZVJvdXRlcikge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHtcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgZWxlbWVudC5jc3MoJ2N1cnNvcicsICdwb2ludGVyJyk7XG4gICAgICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgJHN0YXRlUm91dGVyLmNoYW5nZShhdHRycy5zcmVmKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gIH07XG59XTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZ2xvYmFsIGFuZ3VsYXI6ZmFsc2UgKi9cblxuLy8gQ29tbW9uSlNcbmlmICh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzID09PSBleHBvcnRzKXtcbiAgbW9kdWxlLmV4cG9ydHMgPSAnYW5ndWxhci1zdGF0ZS1yb3V0ZXInO1xufVxuXG4vLyBQb2x5ZmlsbFxucmVxdWlyZSgnLi91dGlscy9vYmplY3QnKTtcbnJlcXVpcmUoJy4vdXRpbHMvcHJvY2VzcycpO1xucmVxdWlyZSgnLi91dGlscy9mdW5jdGlvbicpO1xuXG4vLyBJbnN0YW50aWF0ZSBtb2R1bGVcbmFuZ3VsYXIubW9kdWxlKCdhbmd1bGFyLXN0YXRlLXJvdXRlcicsIFtdKVxuXG4gIC5mYWN0b3J5KCckc3RhdGVSb3V0ZXInLCByZXF1aXJlKCcuL3NlcnZpY2VzL3N0YXRlLXJvdXRlcicpKVxuXG4gIC5mYWN0b3J5KCckdXJsTWFuYWdlcicsIHJlcXVpcmUoJy4vc2VydmljZXMvdXJsLW1hbmFnZXInKSlcblxuICAuZGlyZWN0aXZlKCdzcmVmJywgcmVxdWlyZSgnLi9kaXJlY3RpdmVzL3NyZWYnKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbCBwcm9jZXNzOmZhbHNlICovXG5cbnZhciBldmVudHMgPSByZXF1aXJlKCdldmVudHMnKTtcbnZhciBjbG9uZSA9IHJlcXVpcmUoJy4uL3V0aWxzL29iamVjdCcpLmNsb25lO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtmdW5jdGlvbigpIHtcbiAgLy8gQ3VycmVudCBzdGF0ZVxuICB2YXIgX2N1cnJlbnQ7XG5cbiAgLy8gS2VlcCB0aGUgbGFzdCBuIHN0YXRlcyAoZS5nLiAtIGRlZmF1bHRzIDUpXG4gIHZhciBfaGlzdG9yeUxlbmd0aCA9IDU7XG4gIHZhciBfaGlzdG9yeSA9IFtdO1xuXG4gIHZhciBfbGlicmFyeSA9IHt9O1xuICB2YXIgX2NhY2hlID0ge307XG4gIHZhciBfZW1pdHRlciA9IG5ldyBldmVudHMuRXZlbnRFbWl0dGVyKCk7XG5cbiAgLy8gRXh0ZW5kIGZyb20gRXZlbnRFbWl0dGVyXG4gIHZhciBfc2VsZiA9IE9iamVjdC5jcmVhdGUoX2VtaXR0ZXIpO1xuXG4gIC8qKlxuICAgKiBBZGQgZGVmYXVsdCB2YWx1ZXMgdG8gYSBzdGF0ZVxuICAgKiBcbiAgICogQHBhcmFtICB7T2JqZWN0fSBkYXRhIEFuIE9iamVjdFxuICAgKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgQW4gT2JqZWN0XG4gICAqL1xuICB2YXIgX3NldFN0YXRlRGVmYXVsdHMgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgZGF0YS5pbmhlcml0ID0gKHR5cGVvZiBkYXRhLmluaGVyaXQgPT09ICd1bmRlZmluZWQnKSA/IHRydWUgOiBkYXRhLmluaGVyaXQ7XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICAvKipcbiAgICogVmFsaWRhdGUgc3RhdGUgbmFtZVxuICAgKiBcbiAgICogQHBhcmFtICB7U3RyaW5nfSBuYW1lICAgQSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIHN0YXRlOyB1c2luZyBkb3Qtbm90YXRpb25cbiAgICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgVHJ1ZSBpZiBuYW1lIGlzIHZhbGlkLCBmYWxzZSBpZiBub3RcbiAgICovXG4gIHZhciBfdmFsaWRhdGVTdGF0ZU5hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgbmFtZSA9IG5hbWUgfHwgJyc7XG5cbiAgICAvLyBUT0RPIG9wdGltaXplIHdpdGggUmVnRXhwXG5cbiAgICB2YXIgbmFtZUNoYWluID0gbmFtZS5zcGxpdCgnLicpO1xuICAgIGZvcih2YXIgaT0wOyBpPG5hbWVDaGFpbi5sZW5ndGg7IGkrKykge1xuICAgICAgaWYoIW5hbWVDaGFpbltpXS5tYXRjaCgvW2EtekEtWjAtOV0rLykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBzdGF0ZSBxdWVyeVxuICAgKiBcbiAgICogQHBhcmFtICB7U3RyaW5nfSBxdWVyeSAgQSBxdWVyeSBmb3IgdGhlIHN0YXRlOyB1c2luZyBkb3Qtbm90YXRpb25cbiAgICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgVHJ1ZSBpZiBuYW1lIGlzIHZhbGlkLCBmYWxzZSBpZiBub3RcbiAgICovXG4gIHZhciBfdmFsaWRhdGVTdGF0ZVF1ZXJ5ID0gZnVuY3Rpb24ocXVlcnkpIHtcbiAgICBxdWVyeSA9IHF1ZXJ5IHx8ICcnO1xuICAgIFxuICAgIC8vIFRPRE8gb3B0aW1pemUgd2l0aCBSZWdFeHBcblxuICAgIHZhciBuYW1lQ2hhaW4gPSBxdWVyeS5zcGxpdCgnLicpO1xuICAgIGZvcih2YXIgaT0wOyBpPG5hbWVDaGFpbi5sZW5ndGg7IGkrKykge1xuICAgICAgaWYoIW5hbWVDaGFpbltpXS5tYXRjaCgvKFxcKihcXCopP3xbYS16QS1aMC05XSspLykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb21wYXJlIHR3byBzdGF0ZXMsIGNvbXBhcmVzIHZhbHVlcy4gIFxuICAgKiBcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiBzdGF0ZXMgYXJlIHRoZSBzYW1lLCBmYWxzZSBpZiBzdGF0ZXMgYXJlIGRpZmZlcmVudFxuICAgKi9cbiAgdmFyIF9jb21wYXJlU3RhdGVzID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBfY29weSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIC8vIENvcHlcbiAgICAgIGRhdGEgPSBjbG9uZShkYXRhKTtcblxuICAgICAgLy8gVHJhY2sgcmVzb2x2ZVxuICAgICAgaWYoZGF0YSAmJiBkYXRhLnJlc29sdmUpIHtcbiAgICAgICAgZm9yKHZhciBuIGluIGRhdGEucmVzb2x2ZSkge1xuICAgICAgICAgIGRhdGEucmVzb2x2ZVtuXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfTtcbiAgICB2YXIgYWkgPSBfY29weShhKTtcbiAgICB2YXIgYmkgPSBfY29weShiKTtcblxuICAgIHJldHVybiBhbmd1bGFyLmVxdWFscyhhaSwgYmkpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgYSBsaXN0IG9mIHBhcmVudCBzdGF0ZXNcbiAgICogXG4gICAqIEBwYXJhbSAge1N0cmluZ30gbmFtZSAgIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBzdGF0ZTsgdXNpbmcgZG90LW5vdGF0aW9uXG4gICAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgIEFuIEFycmF5IG9mIHBhcmVudCBzdGF0ZXNcbiAgICovXG4gIHZhciBfZ2V0TmFtZUNoYWluID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBuYW1lTGlzdCA9IG5hbWUuc3BsaXQoJy4nKTtcblxuICAgIHJldHVybiBuYW1lTGlzdFxuICAgICAgLm1hcChmdW5jdGlvbihpdGVtLCBpLCBsaXN0KSB7XG4gICAgICAgIHJldHVybiBsaXN0LnNsaWNlKDAsIGkrMSkuam9pbignLicpO1xuICAgICAgfSlcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbnVsbDtcbiAgICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJbnRlcm5hbCBtZXRob2QgdG8gY3Jhd2wgbGlicmFyeSBoZWlyYXJjaHlcbiAgICogXG4gICAqIEBwYXJhbSAge1N0cmluZ30gbmFtZSAgIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBzdGF0ZTsgdXNpbmcgZG90LW5vdGF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH0gICAgICAgIEEgc3RhdGUgZGF0YSBPYmplY3RcbiAgICovXG4gIHZhciBfZ2V0U3RhdGUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgbmFtZSA9IG5hbWUgfHwgJyc7XG5cbiAgICB2YXIgc3RhdGUgPSBudWxsO1xuXG4gICAgLy8gT25seSB1c2UgdmFsaWQgc3RhdGUgcXVlcmllc1xuICAgIGlmKCFfdmFsaWRhdGVTdGF0ZU5hbWUobmFtZSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIFxuICAgIC8vIFVzZSBjYWNoZSBpZiBleGlzdHNcbiAgICB9IGVsc2UgaWYoX2NhY2hlW25hbWVdKSB7XG4gICAgICByZXR1cm4gX2NhY2hlW25hbWVdO1xuICAgIH1cblxuICAgIHZhciBuYW1lQ2hhaW4gPSBfZ2V0TmFtZUNoYWluKG5hbWUpO1xuXG4gICAgdmFyIHN0YXRlQ2hhaW4gPSBuYW1lQ2hhaW5cbiAgICAgIC5tYXAoZnVuY3Rpb24ocG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF9saWJyYXJ5W3BuYW1lXTtcbiAgICAgIH0pXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uKHBhcmVudCkge1xuICAgICAgICByZXR1cm4gcGFyZW50ICE9PSBudWxsO1xuICAgICAgfSk7XG5cbiAgICAvLyBXYWxrIHVwIGNoZWNraW5nIGluaGVyaXRhbmNlXG4gICAgZm9yKHZhciBpPXN0YXRlQ2hhaW4ubGVuZ3RoLTE7IGk+PTA7IGktLSkge1xuICAgICAgaWYoc3RhdGVDaGFpbltpXSkge1xuICAgICAgICBzdGF0ZSA9IE9iamVjdC5hc3NpZ24oY2xvbmUoc3RhdGVDaGFpbltpXSksIHN0YXRlIHx8IHt9KTtcbiAgICAgIH1cblxuICAgICAgaWYoc3RhdGUgJiYgIXN0YXRlLmluaGVyaXQpIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIFN0b3JlIGluIGNhY2hlXG4gICAgX2NhY2hlW25hbWVdID0gc3RhdGU7XG5cbiAgICByZXR1cm4gc3RhdGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEludGVybmFsIG1ldGhvZCB0byBzdG9yZSBhIHN0YXRlIGRlZmluaXRpb25cbiAgICogXG4gICAqIEBwYXJhbSAge1N0cmluZ30gbmFtZSAgIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBzdGF0ZTsgdXNpbmcgZG90LW5vdGF0aW9uXG4gICAqIEBwYXJhbSAge09iamVjdH0gW2RhdGFdIEEgc3RhdGUgZGVmaW5pdGlvbiBkYXRhIE9iamVjdCwgb3B0aW9uYWxcbiAgICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgQSBzdGF0ZSBkYXRhIE9iamVjdFxuICAgKi9cbiAgdmFyIF9kZWZpbmVTdGF0ZSA9IGZ1bmN0aW9uKG5hbWUsIGRhdGEpIHtcbiAgICBpZihuYW1lID09PSBudWxsIHx8IHR5cGVvZiBuYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOYW1lIGNhbm5vdCBiZSBudWxsLicpO1xuICAgIFxuICAgIC8vIE9ubHkgdXNlIHZhbGlkIHN0YXRlIG5hbWVzXG4gICAgfSBlbHNlIGlmKCFfdmFsaWRhdGVTdGF0ZU5hbWUobmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdGF0ZSBuYW1lLicpO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBzdGF0ZVxuICAgIHZhciBzdGF0ZSA9IGNsb25lKGRhdGEpO1xuXG4gICAgLy8gVXNlIGRlZmF1bHRzXG4gICAgX3NldFN0YXRlRGVmYXVsdHMoc3RhdGUpO1xuXG4gICAgLy8gTmFtZWQgc3RhdGVcbiAgICBzdGF0ZS5uYW1lID0gbmFtZTtcblxuICAgIC8vIFNldCBkZWZpbml0aW9uXG4gICAgX2xpYnJhcnlbbmFtZV0gPSBzdGF0ZTtcblxuICAgIC8vIENsZWFyIGNhY2hlIG9uIHVwZGF0ZXNcbiAgICBfY2FjaGUgPSB7fTtcblxuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIC8qKlxuICAgKiBRdWV1ZSBoaXN0b3J5IGFuZCBjb3JyZWN0IGxlbmd0aFxuICAgKiBcbiAgICogQHBhcmFtICB7T2JqZWN0fSBkYXRhIEFuIE9iamVjdFxuICAgKi9cbiAgdmFyIF9xdWV1ZUhpc3RvcnkgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgaWYoZGF0YSkge1xuICAgICAgX2hpc3RvcnkucHVzaChkYXRhKTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgbGVuZ3RoXG4gICAgaWYoX2hpc3RvcnkubGVuZ3RoID4gX2hpc3RvcnlMZW5ndGgpIHtcbiAgICAgIF9oaXN0b3J5LnNwbGljZSgwLCBfaGlzdG9yeS5sZW5ndGggLSBfaGlzdG9yeUxlbmd0aCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBJbnRlcm5hbCBjaGFuZ2UgdG8gc3RhdGUuICBcbiAgICogXG4gICAqIEBwYXJhbSAge1N0cmluZ30gICBuYW1lICAgICAgIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBzdGF0ZTsgdXNpbmcgZG90LW5vdGF0aW9uXG4gICAqIEBwYXJhbSAge09iamVjdH0gICBbcGFyYW1zXSAgIEEgcGFyYW1ldGVycyBkYXRhIG9iamVjdFxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBBIGNhbGxiYWNrLCBmdW5jdGlvbihlcnIpXG4gICAqL1xuICB2YXIgX2NoYW5nZVN0YXRlID0gZnVuY3Rpb24obmFtZSwgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgIHZhciBlcnJvciA9IG51bGw7XG4gICAgdmFyIHJlcXVlc3QgPSB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgcGFyYW1zOiBwYXJhbXNcbiAgICB9O1xuXG4gICAgdmFyIG5leHRTdGF0ZSA9IF9nZXRTdGF0ZShuYW1lKTtcbiAgICB2YXIgcHJldlN0YXRlID0gX2N1cnJlbnQ7XG5cbiAgICAvLyBTZXQgcGFyYW1ldGVyc1xuICAgIG5leHRTdGF0ZSA9IG5leHRTdGF0ZSAhPT0gbnVsbCA/IE9iamVjdC5hc3NpZ24oe30sIG5leHRTdGF0ZSwgcGFyYW1zKSA6IG51bGw7XG5cbiAgICAvLyBEb2VzIG5vdCBleGlzdFxuICAgIGlmKCFuZXh0U3RhdGUpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdSZXF1ZXN0ZWQgc3RhdGUgd2FzIG5vdCBkZWZpbmVkLicpO1xuICAgICAgZXJyb3IuY29kZSA9ICdub3Rmb3VuZCc7XG4gICAgICBfc2VsZi5lbWl0KCdlcnJvcjpub3Rmb3VuZCcsIGVycm9yLCByZXF1ZXN0KTtcbiAgICAgIF9zZWxmLmVtaXQoJ2Vycm9yJywgZXJyb3IsIHJlcXVlc3QpO1xuXG4gICAgLy8gU3RhdGUgbm90IGNoYW5nZWRcbiAgICB9IGVsc2UgaWYoX2NvbXBhcmVTdGF0ZXMocHJldlN0YXRlLCBuZXh0U3RhdGUpKSB7XG4gICAgICBfY3VycmVudCA9IG5leHRTdGF0ZTtcblxuICAgIC8vIEV4aXN0c1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBQcm9jZXNzIHN0YXJ0ZWRcbiAgICAgIF9zZWxmLmVtaXQoJ2NoYW5nZTpiZWdpbicsIHJlcXVlc3QpO1xuXG4gICAgICAvLyBWYWxpZCBzdGF0ZSBleGlzdHNcbiAgICAgIGlmKHByZXZTdGF0ZSkgX3F1ZXVlSGlzdG9yeShwcmV2U3RhdGUpO1xuICAgICAgX2N1cnJlbnQgPSBuZXh0U3RhdGU7XG5cbiAgICAgIFxuXG4gICAgICAvLyBUT0RPIGNoYW5nZSBVUkwgdmFsdWVzXG5cblxuXG4gICAgICAvLyBUT0RPIGltcGxlbWVudCBsb2FkYWJsZSBpbnRlcmZhY2VcbiAgICAgIF9zZWxmLmVtaXQoJ2xvYWQ6c3RhcnQnKTtcbiAgICAgIF9zZWxmLmVtaXQoJ2xvYWQ6cHJvZ3Jlc3MnKTtcbiAgICAgIF9zZWxmLmVtaXQoJ2xvYWQ6ZW5kJyk7XG4gICAgICAvL19zZWxmLmVtaXQoJ2Vycm9yOmxvYWQnKTtcblxuXG4gICAgICAvLyBUT0RPIHJlc29sdmUgXG4gICAgICBfc2VsZi5lbWl0KCdyZXNvbHZlOnN0YXJ0Jyk7XG4gICAgICAvL19zZWxmLmVtaXQoJ2Vycm9yOnJlc29sdmUnKTtcbiAgICAgIF9zZWxmLmVtaXQoJ3Jlc29sdmU6ZW5kJyk7XG5cblxuXG5cbiAgICAgIC8vIFJlbmRlcmVkIHZpZXdcbiAgICAgIF9zZWxmLmVtaXQoJ3JlbmRlcicsIHJlcXVlc3QpO1xuXG5cblxuXG4gICAgICAvL19zZWxmLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdBbiB1bmtub3duIGVycm9yIG9jY3VycmVkLicpLCByZXF1ZXN0KTtcblxuICAgICAgLy8gUHJvY2VzcyBlbmRlZFxuICAgICAgX3NlbGYuZW1pdCgnY2hhbmdlOmVuZCcsIHJlcXVlc3QpO1xuICAgIH1cblxuICAgIC8vIENvbXBsZXRpb25cbiAgICBfc2VsZi5lbWl0KCdjaGFuZ2U6Y29tcGxldGUnLCBlcnJvciwgcmVxdWVzdCk7XG4gICAgaWYoY2FsbGJhY2spIGNhbGxiYWNrKGVycm9yKTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0IGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgU3RhdGVSb3V0ZXJcbiAgICogXG4gICAqIEBwYXJhbSAge09iamVjdH0gICAgICBwYXJhbXMgQSBkYXRhIE9iamVjdFxuICAgKiBAcmV0dXJuIHtTdGF0ZVJvdXRlcn0gICAgICAgIEl0c2VsZjsgY2hhaW5hYmxlXG4gICAqL1xuICBfc2VsZi5vcHRpb25zID0gZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgcGFyYW1zID0gcGFyYW1zIHx8IHt9O1xuXG4gICAgaWYocGFyYW1zLmhhc093blByb3BlcnR5KCdoaXN0b3J5TGVuZ3RoJykpIHtcbiAgICAgIF9oaXN0b3J5TGVuZ3RoID0gcGFyYW1zLmhpc3RvcnlMZW5ndGg7XG4gICAgICBfcXVldWVIaXN0b3J5KG51bGwpO1xuICAgIH1cblxuICAgIHJldHVybiBfc2VsZjtcbiAgfTtcblxuICAvKipcbiAgICogU2V0dC9nZXQgc3RhdGUgZGF0YS4gIERlZmluZSB0aGUgc3RhdGVzLiAgXG4gICAqXG4gICAqIEBwYXJhbSAge1N0cmluZ30gICAgICBuYW1lICAgQSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIHN0YXRlOyB1c2luZyBkb3Qtbm90YXRpb25cbiAgICogQHBhcmFtICB7T2JqZWN0fSAgICAgIFtkYXRhXSBBIHN0YXRlIGRlZmluaXRpb24gZGF0YSBvYmplY3QsIG9wdGlvbmFsXG4gICAqIEByZXR1cm4ge1N0YXRlUm91dGVyfSAgICAgICAgSXRzZWxmOyBjaGFpbmFibGVcbiAgICovXG4gIF9zZWxmLnN0YXRlID0gZnVuY3Rpb24obmFtZSwgZGF0YSkge1xuICAgIGlmKCFkYXRhKSB7XG4gICAgICByZXR1cm4gX2dldFN0YXRlKG5hbWUpO1xuICAgIH1cbiAgICBfZGVmaW5lU3RhdGUobmFtZSwgZGF0YSk7XG4gICAgcmV0dXJuIF9zZWxmO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplLCBhc3luY2hyb25vdXMgb3BlcmF0aW9uLiAgRGVmaW5pdGlvbiBpcyBkb25lLCBpbml0aWFsaXplLiAgXG4gICAqIFxuICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgbmFtZSAgICAgQW4gaW5pdGlhbCBzdGF0ZSB0byBzdGFydCBpbi4gIFxuICAgKiBAcGFyYW0gIHtPYmplY3R9ICAgICAgW3BhcmFtc10gQSBwYXJhbWV0ZXJzIGRhdGEgb2JqZWN0XG4gICAqIEByZXR1cm4ge1N0YXRlUm91dGVyfSAgICAgICAgICBJdHNlbGY7IGNoYWluYWJsZVxuICAgKi9cbiAgX3NlbGYuaW5pdCA9IGZ1bmN0aW9uKG5hbWUsIHBhcmFtcykge1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgXG4gICAgICAvLyBJbml0aWFsaXplIHdpdGggc3RhdGVcbiAgICAgIGlmKG5hbWUpIHtcbiAgICAgICAgX2NoYW5nZVN0YXRlKG5hbWUsIHBhcmFtcywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgX3NlbGYuZW1pdCgnaW5pdCcpO1xuICAgICAgICB9KTtcblxuICAgICAgLy8gSW5pdGlhbGl6ZSBvbmx5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfc2VsZi5lbWl0KCdpbml0Jyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3NlbGY7XG4gIH07XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBtZXRob2QgdG8gY2hhbmdlIHN0YXRlLCBhc3luY2hyb25vdXMgb3BlcmF0aW9uXG4gICAqIFxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IG5hbWUgICAgIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBzdGF0ZTsgdXNpbmcgZG90LW5vdGF0aW9uXG4gICAqIEBwYXJhbSAge09iamVjdH0gW3BhcmFtc10gQSBwYXJhbWV0ZXJzIGRhdGEgb2JqZWN0XG4gICAqL1xuICBfc2VsZi5jaGFuZ2UgPSBmdW5jdGlvbihuYW1lLCBwYXJhbXMpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKF9jaGFuZ2VTdGF0ZS5iaW5kKG51bGwsIG5hbWUsIHBhcmFtcykpO1xuICAgIHJldHVybiBfc2VsZjtcbiAgfTtcblxuICAvKipcbiAgICogUmV0cmlldmUgY29weSBvZiBjdXJyZW50IHN0YXRlXG4gICAqIFxuICAgKiBAcmV0dXJuIHtPYmplY3R9IEEgY29weSBvZiBjdXJyZW50IHN0YXRlXG4gICAqL1xuICBfc2VsZi5jdXJyZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICFfY3VycmVudCA/IG51bGwgOiBjbG9uZShfY3VycmVudCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrIHF1ZXJ5IGFnYWluc3QgY3VycmVudCBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0gIHtNaXhlZH0gICBxdWVyeSAgQSBzdHJpbmcgdXNpbmcgc3RhdGUgbm90YXRpb24gb3IgYSBSZWdFeHBcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgIEEgdHJ1ZSBpZiBzdGF0ZSBpcyBwYXJlbnQgdG8gY3VycmVudCBzdGF0ZVxuICAgKi9cbiAgX3NlbGYuYWN0aXZlID0gZnVuY3Rpb24ocXVlcnkpIHtcbiAgICBxdWVyeSA9IHF1ZXJ5IHx8ICcnO1xuICAgIFxuICAgIC8vIE5vIHN0YXRlXG4gICAgaWYoIV9jdXJyZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBVc2UgUmVnRXhwIG1hdGNoaW5nXG4gICAgfSBlbHNlIGlmKHF1ZXJ5IGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICByZXR1cm4gISFfY3VycmVudC5uYW1lLm1hdGNoKHF1ZXJ5KTtcblxuICAgIC8vIFN0cmluZzsgc3RhdGUgZG90LW5vdGF0aW9uXG4gICAgfSBlbHNlIGlmKHR5cGVvZiBxdWVyeSA9PT0gJ3N0cmluZycpIHtcblxuICAgICAgLy8gQ2FzdCBzdHJpbmcgdG8gUmVnRXhwXG4gICAgICBpZihxdWVyeS5tYXRjaCgvXlxcLy4qXFwvJC8pKSB7XG4gICAgICAgIHZhciBjYXN0ZWQgPSBxdWVyeS5zdWJzdHIoMSwgcXVlcnkubGVuZ3RoLTIpO1xuICAgICAgICByZXR1cm4gISFfY3VycmVudC5uYW1lLm1hdGNoKG5ldyBSZWdFeHAoY2FzdGVkKSk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSB0byBzdGF0ZSBub3RhdGlvblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybWVkID0gcXVlcnlcbiAgICAgICAgICAuc3BsaXQoJy4nKVxuICAgICAgICAgIC5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgaWYoaXRlbSA9PT0gJyonKSB7XG4gICAgICAgICAgICAgIHJldHVybiAnW2EtekEtWjAtOV0qJztcbiAgICAgICAgICAgIH0gZWxzZSBpZihpdGVtID09PSAnKionKSB7XG4gICAgICAgICAgICAgIHJldHVybiAnW2EtekEtWjAtOVxcXFwuXSonO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuam9pbignXFxcXC4nKTtcblxuICAgICAgICByZXR1cm4gISFfY3VycmVudC5uYW1lLm1hdGNoKG5ldyBSZWdFeHAodHJhbnNmb3JtZWQpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBOb24tbWF0Y2hpbmdcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIGRlZmluaXRpb24gb2Ygc3RhdGVzXG4gICAqIFxuICAgKiBAcmV0dXJuIHtPYmplY3R9IEEgaGFzaCBvZiBzdGF0ZXNcbiAgICovXG4gIF9zZWxmLmxpYnJhcnkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX2xpYnJhcnk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRpb25cbiAgICovXG4gIF9zZWxmLnZhbGlkYXRlID0ge1xuICAgIG5hbWU6IF92YWxpZGF0ZVN0YXRlTmFtZSxcbiAgICBxdWVyeTogX3ZhbGlkYXRlU3RhdGVRdWVyeVxuICB9O1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSBoaXN0b3J5XG4gICAqIFxuICAgKiBAcmV0dXJuIHtPYmplY3R9IEEgaGFzaCBvZiBzdGF0ZXNcbiAgICovXG4gIF9zZWxmLmhpc3RvcnkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX2hpc3Rvcnk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGluc3RhbmNlXG4gIHJldHVybiBfc2VsZjtcbn1dO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtmdW5jdGlvbigpIHtcblxuICByZXR1cm4ge1xuXG4gICAgLy8gVE9ETyBnZXQgdXJsIGFuZCBtYXRjaCB0byBleGlzdGluZyBzdGF0ZTsgc2V0IHN0YXRlXG5cblxuICB9O1xuXG59XTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gUG9seWZpbGwgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQoKVxuaWYgKCFGdW5jdGlvbi5wcm90b3R5cGUuYmluZCkge1xuICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uKG9UaGlzKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBjbG9zZXN0IHRoaW5nIHBvc3NpYmxlIHRvIHRoZSBFQ01BU2NyaXB0IDVcbiAgICAgIC8vIGludGVybmFsIElzQ2FsbGFibGUgZnVuY3Rpb25cbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIC0gd2hhdCBpcyB0cnlpbmcgdG8gYmUgYm91bmQgaXMgbm90IGNhbGxhYmxlJyk7XG4gICAgfVxuXG4gICAgdmFyIGFBcmdzICAgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxuICAgICAgICBmVG9CaW5kID0gdGhpcyxcbiAgICAgICAgZk5PUCAgICA9IGZ1bmN0aW9uKCkge30sXG4gICAgICAgIGZCb3VuZCAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZlRvQmluZC5hcHBseShcbiAgICAgICAgICAgIHRoaXMgaW5zdGFuY2VvZiBmTk9QID8gdGhpcyA6IG9UaGlzLFxuICAgICAgICAgICAgYUFyZ3MuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgICAgfTtcblxuICAgIGZOT1AucHJvdG90eXBlID0gdGhpcy5wcm90b3R5cGU7XG4gICAgZkJvdW5kLnByb3RvdHlwZSA9IG5ldyBmTk9QKCk7XG5cbiAgICByZXR1cm4gZkJvdW5kO1xuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBQb2x5ZmlsbCBPYmplY3QuY3JlYXRlKClcbmlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAvLyBQcm9kdWN0aW9uIHN0ZXBzIG9mIEVDTUEtMjYyLCBFZGl0aW9uIDUsIDE1LjIuMy41XG4gIC8vIFJlZmVyZW5jZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS4yLjMuNVxuICBPYmplY3QuY3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgIC8vIFRvIHNhdmUgb24gbWVtb3J5LCB1c2UgYSBzaGFyZWQgY29uc3RydWN0b3JcbiAgICBmdW5jdGlvbiBUZW1wKCkge31cblxuICAgIC8vIG1ha2UgYSBzYWZlIHJlZmVyZW5jZSB0byBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICAgdmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKE8pIHtcbiAgICAgIC8vIDEuIElmIFR5cGUoTykgaXMgbm90IE9iamVjdCBvciBOdWxsIHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi5cbiAgICAgIGlmICh0eXBlb2YgTyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0IHByb3RvdHlwZSBtYXkgb25seSBiZSBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgICAgfVxuXG4gICAgICAvLyAyLiBMZXQgb2JqIGJlIHRoZSByZXN1bHQgb2YgY3JlYXRpbmcgYSBuZXcgb2JqZWN0IGFzIGlmIGJ5IHRoZVxuICAgICAgLy8gICAgZXhwcmVzc2lvbiBuZXcgT2JqZWN0KCkgd2hlcmUgT2JqZWN0IGlzIHRoZSBzdGFuZGFyZCBidWlsdC1pblxuICAgICAgLy8gICAgY29uc3RydWN0b3Igd2l0aCB0aGF0IG5hbWVcbiAgICAgIC8vIDMuIFNldCB0aGUgW1tQcm90b3R5cGVdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBvYmogdG8gTy5cbiAgICAgIFRlbXAucHJvdG90eXBlID0gTztcbiAgICAgIHZhciBvYmogPSBuZXcgVGVtcCgpO1xuICAgICAgVGVtcC5wcm90b3R5cGUgPSBudWxsOyAvLyBMZXQncyBub3Qga2VlcCBhIHN0cmF5IHJlZmVyZW5jZSB0byBPLi4uXG5cbiAgICAgIC8vIDQuIElmIHRoZSBhcmd1bWVudCBQcm9wZXJ0aWVzIGlzIHByZXNlbnQgYW5kIG5vdCB1bmRlZmluZWQsIGFkZFxuICAgICAgLy8gICAgb3duIHByb3BlcnRpZXMgdG8gb2JqIGFzIGlmIGJ5IGNhbGxpbmcgdGhlIHN0YW5kYXJkIGJ1aWx0LWluXG4gICAgICAvLyAgICBmdW5jdGlvbiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyB3aXRoIGFyZ3VtZW50cyBvYmogYW5kXG4gICAgICAvLyAgICBQcm9wZXJ0aWVzLlxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIGRvZXMgVG9PYmplY3Qgb24gaXRzIGZpcnN0IGFyZ3VtZW50LlxuICAgICAgICB2YXIgUHJvcGVydGllcyA9IE9iamVjdChhcmd1bWVudHNbMV0pO1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIFByb3BlcnRpZXMpIHtcbiAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoUHJvcGVydGllcywgcHJvcCkpIHtcbiAgICAgICAgICAgIG9ialtwcm9wXSA9IFByb3BlcnRpZXNbcHJvcF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIDUuIFJldHVybiBvYmpcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcbiAgfSkoKTtcbn1cblxuLy8gUG9seWZpbGwgT2JqZWN0LmFzc2lnbigpIFxuaWYgKCFPYmplY3QuYXNzaWduKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QsICdhc3NpZ24nLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCB8fCB0YXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgZmlyc3QgYXJndW1lbnQgdG8gb2JqZWN0Jyk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0byA9IE9iamVjdCh0YXJnZXQpO1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5leHRTb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICAgIGlmIChuZXh0U291cmNlID09PSB1bmRlZmluZWQgfHwgbmV4dFNvdXJjZSA9PT0gbnVsbCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIG5leHRTb3VyY2UgPSBPYmplY3QobmV4dFNvdXJjZSk7XG5cbiAgICAgICAgdmFyIGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSk7XG4gICAgICAgIGZvciAodmFyIG5leHRJbmRleCA9IDAsIGxlbiA9IGtleXNBcnJheS5sZW5ndGg7IG5leHRJbmRleCA8IGxlbjsgbmV4dEluZGV4KyspIHtcbiAgICAgICAgICB2YXIgbmV4dEtleSA9IGtleXNBcnJheVtuZXh0SW5kZXhdO1xuICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXh0U291cmNlLCBuZXh0S2V5KTtcbiAgICAgICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRvO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQ2xvbmUgYW4gb2JqZWN0LCByZWN1cnNpdmVcbiAqIFxuICogQHBhcmFtICB7T2JqZWN0fSBvYmogQW4gT2JqZWN0XG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICBBIGNsb25lZCBPYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZShvYmosIGxldmVsKSB7XG4gIHZhciBjb3B5O1xuICBsZXZlbCA9IGxldmVsIHx8IDA7XG5cbiAgaWYobGV2ZWwgPiAyNTYpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nsb25pbmcgb2JqZWN0IG1vcmUgdGhhbiAyNTYgbGV2ZWxzJyk7XG4gIH1cblxuICAvLyBIYW5kbGUgdGhlIDMgc2ltcGxlIHR5cGVzLCBhbmQgbnVsbCBvciB1bmRlZmluZWRcbiAgaWYgKG51bGwgPT09IG9iaiB8fCBcIm9iamVjdFwiICE9IHR5cGVvZiBvYmopIHJldHVybiBvYmo7XG5cbiAgLy8gSGFuZGxlIERhdGVcbiAgaWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICBjb3B5ID0gbmV3IERhdGUoKTtcbiAgICBjb3B5LnNldFRpbWUob2JqLmdldFRpbWUoKSk7XG4gICAgcmV0dXJuIGNvcHk7XG4gIH1cblxuICAvLyBIYW5kbGUgQXJyYXlcbiAgaWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgY29weSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBvYmoubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvcHlbaV0gPSBjbG9uZShvYmpbaV0sIGxldmVsKzEpO1xuICAgIH1cbiAgICByZXR1cm4gY29weTtcbiAgfVxuXG4gIC8vIEhhbmRsZSBPYmplY3RcbiAgaWYgKG9iaiBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgIGNvcHkgPSB7fTtcbiAgICBmb3IgKHZhciBhdHRyIGluIG9iaikge1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgY29weVthdHRyXSA9IGNsb25lKG9ialthdHRyXSwgbGV2ZWwrMSk7XG4gICAgfVxuICAgIHJldHVybiBjb3B5O1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGNvcHkgb2JqISBJdHMgdHlwZSBpc24ndCBzdXBwb3J0ZWQuXCIpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZ2xvYmFsIHdpbmRvdzpmYWxzZSAqL1xuLyogZ2xvYmFsIHByb2Nlc3M6ZmFsc2UgKi9cbi8qIGdsb2JhbCBzZXRJbW1lZGlhdGU6ZmFsc2UgKi9cbi8qIGdsb2JhbCBzZXRUaW1lb3V0OmZhbHNlICovXG5cbi8vIFBvbHlmaWxsIHByb2Nlc3MubmV4dFRpY2soKVxuXG5pZih3aW5kb3cpIHtcbiAgaWYoIXdpbmRvdy5wcm9jZXNzKSB7XG5cbiAgICB2YXIgX3Byb2Nlc3MgPSB7XG4gICAgICBuZXh0VGljazogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgc2V0VGltZW91dChjYWxsYmFjaywgMCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEV4cG9ydFxuICAgIHdpbmRvdy5wcm9jZXNzID0gX3Byb2Nlc3M7XG4gIH1cbn1cbiJdfQ==\n"],"sourceRoot":"/source/"}
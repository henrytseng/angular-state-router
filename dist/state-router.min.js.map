{"version":3,"sources":["state-router.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","EventEmitter","this","_events","_maxListeners","undefined","isFunction","arg","isNumber","isObject","isUndefined","prototype","defaultMaxListeners","setMaxListeners","isNaN","TypeError","emit","type","er","handler","len","args","listeners","error","arguments","Array","apply","slice","addListener","listener","m","newListener","push","warned","console","trace","on","once","g","removeListener","fired","list","position","splice","removeAllListeners","key","ret","listenerCount","emitter",2,"cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","setTimeout","run","clearTimeout","Item","fun","array","noop","process","nextTick","title","browser","env","argv","version","versions","off","binding","name","cwd","chdir","dir","umask",3,"$stateRouter","restrict","scope","link","element","attrs","css","change","sref","preventDefault",4,"angular","factory","directive","./directives/sref","./services/state-router","./services/url-manager","./utils/function","./utils/object","./utils/process",5,"events","clone","_current","_historyLength","_history","_library","_cache","_emitter","_self","Object","create","_setStateDefaults","data","inherit","_validateStateName","nameChain","split","match","_validateStateQuery","query","_getNameChain","nameList","map","item","join","filter","_getState","state","stateChain","pname","parent","assign","_defineState","_queueHistory","_changeState","params","callback","requestData","nextState","prevState","options","hasOwnProperty","historyLength","init","bind","current","active","RegExp","casted","substr","transformed","library","validate","history","../utils/object","_process",6,7,"Function","oThis","aArgs","fToBind","fNOP","fBound",8,"Temp","hasOwn","O","obj","Properties","prop","defineProperty","enumerable","configurable","writable","value","target","to","nextSource","keysArray","keys","nextIndex","nextKey","desc","getOwnPropertyDescriptor","level","copy","Date","setTime","getTime","attr",9,"window"],"mappings":"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","file":"state-router.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],2:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            currentQueue[queueIndex].run();\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$stateRouter', function ($stateRouter) {\n  return {\n    restrict: 'A',\n    scope: {\n    },\n    link: function(scope, element, attrs) {\n      element.css('cursor', 'pointer');\n      element.on('click', function(e) {\n        $stateRouter.change(attrs.sref);\n        e.preventDefault();\n      });\n    }\n\n  };\n}];\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\n/* global angular:false */\n\n// CommonJS\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = 'angular-state-router';\n}\n\n// Polyfill\nrequire('./utils/object');\nrequire('./utils/process');\nrequire('./utils/function');\n\n// Instantiate module\nangular.module('angular-state-router', [])\n\n  .factory('$stateRouter', require('./services/state-router'))\n\n  .factory('$urlManager', require('./services/url-manager'))\n\n  .directive('sref', require('./directives/sref'));\n\n},{\"./directives/sref\":3,\"./services/state-router\":5,\"./services/url-manager\":6,\"./utils/function\":7,\"./utils/object\":8,\"./utils/process\":9}],5:[function(require,module,exports){\n(function (process){\n'use strict';\n\n/* global process:false */\n\nvar events = require('events');\nvar clone = require('../utils/object').clone;\n\nmodule.exports = [function() {\n  // Current state\n  var _current;\n\n  // Keep the last n states (e.g. - defaults 5)\n  var _historyLength = 5;\n  var _history = [];\n\n  var _library = {};\n  var _cache = {};\n  var _emitter = new events.EventEmitter();\n\n  // Extend from EventEmitter\n  var _self = Object.create(_emitter);\n\n  /**\n   * Add default values to a state\n   * \n   * @param  {Object} data An Object\n   * @return {Object}      An Object\n   */\n  var _setStateDefaults = function(data) {\n    data.inherit = (typeof data.inherit === 'undefined') ? true : data.inherit;\n\n    return data;\n  };\n\n  /**\n   * Validate state name\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @return {Boolean}       True if name is valid, false if not\n   */\n  var _validateStateName = function(name) {\n    name = name || '';\n\n    // TODO optimize with RegExp\n\n    var nameChain = name.split('.');\n    for(var i=0; i<nameChain.length; i++) {\n      if(!nameChain[i].match(/[a-zA-Z0-9]+/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Validate state query\n   * \n   * @param  {String} query  A query for the state; using dot-notation\n   * @return {Boolean}       True if name is valid, false if not\n   */\n  var _validateStateQuery = function(query) {\n    query = query || '';\n    \n    // TODO optimize with RegExp\n\n    var nameChain = query.split('.');\n    for(var i=0; i<nameChain.length; i++) {\n      if(!nameChain[i].match(/(\\*(\\*)?|[a-zA-Z0-9]+)/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Get a list of parent states\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @return {Array}         An Array of parent states\n   */\n  var _getNameChain = function(name) {\n    var nameList = name.split('.');\n\n    return nameList\n      .map(function(item, i, list) {\n        return list.slice(0, i+1).join('.');\n      })\n      .filter(function(item) {\n        return item !== null;\n      });\n  };\n\n  /**\n   * Internal method to crawl library heirarchy\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @return {Object}        A state data Object\n   */\n  var _getState = function(name) {\n    name = name || '';\n\n    var state = null;\n\n    // Only use valid state queries\n    if(!_validateStateName(name)) {\n      return null;\n    \n    // Use cache if exists\n    } else if(_cache[name]) {\n      return _cache[name];\n    }\n\n    var nameChain = _getNameChain(name);\n\n    var stateChain = nameChain\n      .map(function(pname) {\n        return _library[pname];\n      })\n      .filter(function(parent) {\n        return parent !== null;\n      });\n\n    // Walk up checking inheritance\n    for(var i=stateChain.length-1; i>=0; i--) {\n      if(stateChain[i]) {\n        state = Object.assign(clone(stateChain[i]), state || {});\n      }\n\n      if(state && !state.inherit) break;\n    }\n\n    // Store in cache\n    _cache[name] = state;\n\n    return state;\n  };\n\n  /**\n   * Internal method to store a state definition\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @param  {Object} [data] A state definition data Object, optional\n   * @return {Object}        A state data Object\n   */\n  var _defineState = function(name, data) {\n    if(name === null || typeof name === 'undefined') {\n      throw new Error('Name cannot be null.');\n    \n    // Only use valid state names\n    } else if(!_validateStateName(name)) {\n      throw new Error('Invalid state name.');\n    }\n\n    // Create state\n    var state = clone(data);\n\n    // Use defaults\n    _setStateDefaults(state);\n\n    // Named state\n    state.name = name;\n\n    // Set definition\n    _library[name] = state;\n\n    // Clear cache on updates\n    _cache = {};\n\n    return data;\n  };\n\n  /**\n   * Queue history and correct length\n   * \n   * @param  {Object} data An Object\n   */\n  var _queueHistory = function(data) {\n    if(data) {\n      _history.push(data);\n    }\n\n    // Update length\n    if(_history.length > _historyLength) {\n      _history.splice(0, _history.length - _historyLength);\n    }\n  };\n\n  /**\n   * Internal change to state\n   * \n   * @param  {String}   name       A unique identifier for the state; using dot-notation\n   * @param  {Object}   [params]   A parameters data object\n   * @param  {Function} [callback] A callback, function(err)\n   */\n  var _changeState = function(name, params, callback) {\n    var error = null;\n    var requestData = {\n      name: name,\n      params: params\n    };\n\n    var nextState = _getState(name);\n    var prevState = _current;\n\n    // Does not exist\n    if(!nextState) {\n      error = new Error('Requested state was not defined.');\n      error.code = 'notfound';\n      _self.emit('error:notfound', error, requestData);\n      _self.emit('error', error, requestData);\n\n    // Exists\n    } else {\n      // Process started\n      _self.emit('change:begin', requestData);\n\n      // Valid state exists\n      if(prevState) _queueHistory(prevState);\n      _current = nextState;\n\n      \n\n      // TODO change URL values\n\n\n\n      // TODO implement loadable interface\n      _self.emit('load:start');\n      _self.emit('load:progress');\n      _self.emit('load:end');\n      //_self.emit('error:load');\n\n\n      // TODO resolve \n      _self.emit('resolve:start');\n      //_self.emit('error:resolve');\n      _self.emit('resolve:end');\n\n\n\n\n      // Rendered view\n      _self.emit('render', requestData);\n\n\n\n\n      //_self.emit('error', new Error('An unknown error occurred.'), requestData);\n\n      // Process ended\n      _self.emit('change:end', requestData);\n    }\n\n    // Completion\n    if(callback) callback(error);\n    _self.emit('change:complete', requestData);\n  };\n\n  /**\n   * Set configuration options for StateRouter\n   * \n   * @param  {Object}      params A data Object\n   * @return {StateRouter}        Itself; chainable\n   */\n  _self.options = function(params) {\n    params = params || {};\n\n    if(params.hasOwnProperty('historyLength')) {\n      _historyLength = params.historyLength;\n      _queueHistory(null);\n    }\n\n    return _self;\n  };\n\n  /**\n   * Sett/get state data.  Define the states.  \n   *\n   * @param  {String}      name   A unique identifier for the state; using dot-notation\n   * @param  {Object}      [data] A state definition data object, optional\n   * @return {StateRouter}        Itself; chainable\n   */\n  _self.state = function(name, data) {\n    if(!data) {\n      return _getState(name);\n    }\n    _defineState(name, data);\n    return _self;\n  };\n\n  /**\n   * Initialize, asynchronous operation.  Definition is done, initialize.  \n   * \n   * @param  {String}      name     An initial state to start in.  \n   * @param  {Object}      [params] A parameters data object\n   * @return {StateRouter}          Itself; chainable\n   */\n  _self.init = function(name, params) {\n    process.nextTick(function() {\n    \n      // Initialize with state\n      if(name) {\n        _changeState(name, params, function() {\n          _self.emit('init');\n        });\n\n      // Initialize only\n      } else {\n        _self.emit('init');\n      }\n    });\n\n    return _self;\n  };\n\n  /**\n   * Public method to change state, asynchronous operation\n   * \n   * @param  {String} name     A unique identifier for the state; using dot-notation\n   * @param  {Object} [params] A parameters data object\n   */\n  _self.change = function(name, params) {\n    process.nextTick(_changeState.bind(null, name, params));\n    return _self;\n  };\n\n  /**\n   * Retrieve copy of current state\n   * \n   * @return {Object} A copy of current state\n   */\n  _self.current = function() {\n    return !_current ? null : clone(_current);\n  };\n\n  /**\n   * Check query against current state\n   *\n   * @param  {Mixed}   query  A string using state notation or a RegExp\n   * @return {Boolean}        A true if state is parent to current state\n   */\n  _self.active = function(query) {\n    query = query || '';\n    \n    // No state\n    if(!_current) {\n      return false;\n\n    // Use RegExp matching\n    } else if(query instanceof RegExp) {\n      return !!_current.name.match(query);\n\n    // String; state dot-notation\n    } else if(typeof query === 'string') {\n\n      // Cast string to RegExp\n      if(query.match(/^\\/.*\\/$/)) {\n        var casted = query.substr(1, query.length-2);\n        return !!_current.name.match(new RegExp(casted));\n\n      // Transform to state notation\n      } else {\n        var transformed = query\n          .split('.')\n          .map(function(item) {\n            if(item === '*') {\n              return '[a-zA-Z0-9]*';\n            } else if(item === '**') {\n              return '[a-zA-Z0-9\\\\.]*';\n            } else {\n              return item;\n            }\n          })\n          .join('\\\\.');\n\n        return !!_current.name.match(new RegExp(transformed));\n      }\n    }\n\n    // Non-matching\n    return false;\n  };\n\n  /**\n   * Retrieve definition of states\n   * \n   * @return {Object} A hash of states\n   */\n  _self.library = function() {\n    return _library;\n  };\n\n  /**\n   * Validation\n   */\n  _self.validate = {\n    name: _validateStateName,\n    query: _validateStateQuery\n  };\n\n  /**\n   * Retrieve history\n   * \n   * @return {Object} A hash of states\n   */\n  _self.history = function() {\n    return _history;\n  };\n\n  // Return instance\n  return _self;\n}];\n\n\n}).call(this,require('_process'))\n\n},{\"../utils/object\":8,\"_process\":2,\"events\":1}],6:[function(require,module,exports){\n'use strict';\n\nmodule.exports = [function() {\n\n  return {\n\n    // TODO get url and match to existing state; set state\n\n\n  };\n\n}];\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\n// Polyfill Function.prototype.bind()\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function(oThis) {\n    if (typeof this !== 'function') {\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n    }\n\n    var aArgs   = Array.prototype.slice.call(arguments, 1),\n        fToBind = this,\n        fNOP    = function() {},\n        fBound  = function() {\n          return fToBind.apply(\n            this instanceof fNOP ? this : oThis,\n            aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\n// Polyfill Object.create()\nif (typeof Object.create !== 'function') {\n  // Production steps of ECMA-262, Edition 5, 15.2.3.5\n  // Reference: http://es5.github.io/#x15.2.3.5\n  Object.create = (function() {\n    // To save on memory, use a shared constructor\n    function Temp() {}\n\n    // make a safe reference to Object.prototype.hasOwnProperty\n    var hasOwn = Object.prototype.hasOwnProperty;\n\n    return function (O) {\n      // 1. If Type(O) is not Object or Null throw a TypeError exception.\n      if (typeof O !== 'object') {\n        throw new TypeError('Object prototype may only be an Object or null');\n      }\n\n      // 2. Let obj be the result of creating a new object as if by the\n      //    expression new Object() where Object is the standard built-in\n      //    constructor with that name\n      // 3. Set the [[Prototype]] internal property of obj to O.\n      Temp.prototype = O;\n      var obj = new Temp();\n      Temp.prototype = null; // Let's not keep a stray reference to O...\n\n      // 4. If the argument Properties is present and not undefined, add\n      //    own properties to obj as if by calling the standard built-in\n      //    function Object.defineProperties with arguments obj and\n      //    Properties.\n      if (arguments.length > 1) {\n        // Object.defineProperties does ToObject on its first argument.\n        var Properties = Object(arguments[1]);\n        for (var prop in Properties) {\n          if (hasOwn.call(Properties, prop)) {\n            obj[prop] = Properties[prop];\n          }\n        }\n      }\n\n      // 5. Return obj\n      return obj;\n    };\n  })();\n}\n\n// Polyfill Object.assign() \nif (!Object.assign) {\n  Object.defineProperty(Object, 'assign', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function(target) {\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert first argument to object');\n      }\n\n      var to = Object(target);\n      for (var i = 1; i < arguments.length; i++) {\n        var nextSource = arguments[i];\n        if (nextSource === undefined || nextSource === null) {\n          continue;\n        }\n        nextSource = Object(nextSource);\n\n        var keysArray = Object.keys(Object(nextSource));\n        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n          var nextKey = keysArray[nextIndex];\n          var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n          if (desc !== undefined && desc.enumerable) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n      return to;\n    }\n  });\n}\n\n/**\n * Clone an object, recursive\n * \n * @param  {Object} obj An Object\n * @return {Object}     A cloned Object\n */\nmodule.exports.clone = function clone(obj, level) {\n  var copy;\n  level = level || 0;\n\n  if(level > 256) {\n    throw new Error('Cloning object more than 256 levels');\n  }\n\n  // Handle the 3 simple types, and null or undefined\n  if (null === obj || \"object\" != typeof obj) return obj;\n\n  // Handle Date\n  if (obj instanceof Date) {\n    copy = new Date();\n    copy.setTime(obj.getTime());\n    return copy;\n  }\n\n  // Handle Array\n  if (obj instanceof Array) {\n    copy = [];\n    for (var i = 0, len = obj.length; i < len; i++) {\n      copy[i] = clone(obj[i], level+1);\n    }\n    return copy;\n  }\n\n  // Handle Object\n  if (obj instanceof Object) {\n    copy = {};\n    for (var attr in obj) {\n      if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr], level+1);\n    }\n    return copy;\n  }\n\n  throw new Error(\"Unable to copy obj! Its type isn't supported.\");\n};\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\n/* global window:false */\n/* global process:false */\n/* global setImmediate:false */\n/* global setTimeout:false */\n\n// Polyfill process.nextTick()\n\nif(window) {\n  if(!window.process) {\n\n    var _process = {\n      nextTick: function(callback) {\n        setTimeout(callback, 0);\n      }\n    };\n\n    // Export\n    window.process = _process;\n  }\n}\n\n},{}]},{},[4])\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["state-router.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","$state","restrict","scope","link","element","attrs","css","on","change","sref","preventDefault",2,"angular","provider","factory","run","$rootScope","$urlManager","$resolution","$on","location","arguments","$ready","directive","./directives/sref","./services/resolution","./services/state-router","./services/url-manager",3,"$q","$injector","_self","_resolve","resolve","resolvesPromises","forEach","value","key","resolution","isString","get","invoke","when","all","_register","request","next","current","then","locals","extend","err","priority","$use",4,"UrlDictionary","Parameters","QueueHandler","_provider","this","_configuration","historyLength","_stateLibrary","_stateCache","_urlDictionary","_layerList","_parseName","nameParams","match","npart","substring","indexOf","ppart","lastIndexOf","name","params","_setStateDefaults","data","inherit","_validateStateName","nameChain","split","_validateStateQuery","query","_compareStates","b","equals","_getNameChain","nameList","map","item","list","slice","join","filter","_getState","state","stateChain","copy","parent","nextState","merge","_defineState","url","add","options","init","initialLocation","$get","$location","_current","_options","_initalLocation","_inst","_history","_isInit","_pushHistory","push","splice","_changeState","deferred","defer","$evalAsync","nameExpr","error","queue","prevState","$broadcast","execute","reject","promise","handler","hasOwnProperty","readyDeferred","parse","library","validate","history","lookup","ref","active","RegExp","casted","substr","transformed","../utils/parameters","../utils/queue-handler","../utils/url-dictionary",5,"_url","_update","path","re","replace","search","update","lastUrl","nextUrl",6,"reParseObjectLiteral","reString","reNumber","_resolveValue","NaN","_listify","str","sanitizeName","sanitizeValue","resolveValue","listify",7,"_list","_data","constructor","Array","concat","callback","nextHandler","executionList","sort","priotity","shift",8,"_patterns","_refs","_params","Url","prototype","pattern","pathChain","searchExpr","chunk","defaults","p","q","queryparams","_findPattern","check","paramParser","urlMatch","pop","varMatch","./url",9,"querystring","pairs","nameValue"],"mappings":"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","file":"state-router.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$state', function ($state) {\n  return {\n    restrict: 'A',\n    scope: {\n    },\n    link: function(scope, element, attrs) {\n      element.css('cursor', 'pointer');\n      element.on('click', function(e) {\n        $state.change(attrs.sref);\n        e.preventDefault();\n      });\n    }\n\n  };\n}];\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\n/* global angular:false */\n\n// CommonJS\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = 'angular-state-router';\n}\n\n// Instantiate module\nangular.module('angular-state-router', [])\n\n  .provider('$state', require('./services/state-router'))\n\n  .factory('$urlManager', require('./services/url-manager'))\n\n  .factory('$resolution', require('./services/resolution'))\n\n  .run(['$rootScope', '$state', '$urlManager', '$resolution', function($rootScope, $state, $urlManager, $resolution) {\n    // Update location changes\n    $rootScope.$on('$locationChangeSuccess', function() {\n      $urlManager.location(arguments);\n    });\n\n    // Initialize\n    $state.$ready();\n  }])\n\n  .directive('sref', require('./directives/sref'));\n\n},{\"./directives/sref\":1,\"./services/resolution\":3,\"./services/state-router\":4,\"./services/url-manager\":5}],3:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$q', '$injector', '$state', function($q, $injector, $state) {\n\n  // Instance\n  var _self = {};\n\n  /**\n   * Resolve\n   * \n   * @param  {Object}  resolve A hash Object of items to resolve\n   * @return {Promise}         A promise fulfilled when templates retireved\n   */\n  var _resolve = function(resolve) {\n    var resolvesPromises = {};\n\n    angular.forEach(resolve, function(value, key) {\n      var resolution = angular.isString(value) ? $injector.get(value) : $injector.invoke(value, null, null, key);\n      resolvesPromises[key] = $q.when(resolution);\n    });\n\n    return $q.all(resolvesPromises);\n  };\n  _self.resolve = _resolve;\n\n  /**\n   * Middleware\n   * \n   * @param  {Object}   request A data Object\n   * @param  {Function} next    A callback, function(err)\n   */\n  var _register = function(request, next) {\n    var current = $state.current();\n\n    if(!current) {\n      return next();\n    }\n\n    _resolve(current.resolve || {}).then(function(locals) {\n      angular.extend(request.locals, locals);\n      next();\n\n    }, function(err) {\n      next(new Error('Error resolving state'));\n    });\n  };\n  _register.priority = 100;\n\n  // Register middleware layer\n  $state.$use(_register);\n\n  return _self;\n}];\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar UrlDictionary = require('../utils/url-dictionary');\nvar Parameters = require('../utils/parameters');\nvar QueueHandler = require('../utils/queue-handler');\n\nmodule.exports = [function StateRouterProvider() {\n  // Provider\n  var _provider = this;\n\n  // Configuration, global options\n  var _configuration = {\n    historyLength: 5\n  };\n\n  // State definition library\n  var _stateLibrary = {};\n  var _stateCache = {};\n\n  // URL to state dictionary\n  var _urlDictionary = new UrlDictionary();\n\n  // Middleware layers\n  var _layerList = [];\n\n  /**\n   * Parse state notation name-params.  \n   * \n   * Assume all parameter values are strings\n   * \n   * @param  {String} nameParams A name-params string\n   * @return {Object}             A name string and param Object\n   */\n  var _parseName = function(nameParams) {\n    if(nameParams && nameParams.match(/^[a-zA-Z0-9_\\.]*\\(.*\\)$/)) {\n      var npart = nameParams.substring(0, nameParams.indexOf('('));\n      var ppart = Parameters( nameParams.substring(nameParams.indexOf('(')+1, nameParams.lastIndexOf(')')) );\n\n      return {\n        name: npart,\n        params: ppart\n      };\n\n    } else {\n      return {\n        name: nameParams,\n        params: null\n      };\n    }\n  };\n\n  /**\n   * Add default values to a state\n   * \n   * @param  {Object} data An Object\n   * @return {Object}      An Object\n   */\n  var _setStateDefaults = function(data) {\n    // Default values\n    data.inherit = (typeof data.inherit === 'undefined') ? true : data.inherit;\n\n    return data;\n  };\n\n  /**\n   * Validate state name\n   * \n   * @param  {String} name A unique identifier for the state; using dot-notation\n   * @return {Boolean}     True if name is valid, false if not\n   */\n  var _validateStateName = function(name) {\n    name = name || '';\n\n    // TODO optimize with RegExp\n\n    var nameChain = name.split('.');\n    for(var i=0; i<nameChain.length; i++) {\n      if(!nameChain[i].match(/[a-zA-Z0-9_]+/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Validate state query\n   * \n   * @param  {String} query A query for the state; using dot-notation\n   * @return {Boolean}      True if name is valid, false if not\n   */\n  var _validateStateQuery = function(query) {\n    query = query || '';\n    \n    // TODO optimize with RegExp\n\n    var nameChain = query.split('.');\n    for(var i=0; i<nameChain.length; i++) {\n      if(!nameChain[i].match(/(\\*(\\*)?|[a-zA-Z0-9_]+)/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Compare two states, compares values.  \n   * \n   * @return {Boolean} True if states are the same, false if states are different\n   */\n  var _compareStates = function(a, b) {\n    a = a || {};\n    b = b || {};\n    return a.name === b.name && angular.equals(a.params, b.params);\n  };\n\n  /**\n   * Get a list of parent states\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @return {Array}         An Array of parent states\n   */\n  var _getNameChain = function(name) {\n    var nameList = name.split('.');\n\n    return nameList\n      .map(function(item, i, list) {\n        return list.slice(0, i+1).join('.');\n      })\n      .filter(function(item) {\n        return item !== null;\n      });\n  };\n\n  /**\n   * Internal method to crawl library heirarchy\n   * \n   * @param  {String} name   A unique identifier for the state; using state-notation\n   * @return {Object}        A state data Object\n   */\n  var _getState = function(name) {\n    name = name || '';\n\n    var state = null;\n\n    // Only use valid state queries\n    if(!_validateStateName(name)) {\n      return null;\n    \n    // Use cache if exists\n    } else if(_stateCache[name]) {\n      return _stateCache[name];\n    }\n\n    var nameChain = _getNameChain(name);\n    var stateChain = nameChain\n      .map(function(name, i) {\n        var item = angular.copy(_stateLibrary[name]);\n\n        if(item && i !== nameChain.length-1) {\n          delete(item.resolve);\n          delete(item.templates);\n        }\n\n        return item;\n      })\n      .filter(function(parent) {\n        return !!parent;\n      });\n\n    // Walk up checking inheritance\n    for(var i=stateChain.length-1; i>=0; i--) {\n      if(stateChain[i]) {\n        var nextState = stateChain[i];\n        state = angular.merge(nextState, state || {});\n      }\n\n      if(state && state.inherit === false) break;\n    }\n\n    // Store in cache\n    _stateCache[name] = state;\n\n    return state;\n  };\n\n  /**\n   * Internal method to store a state definition.  Parameters should be included in data Object not state name.  \n   * \n   * @param  {String} name A unique identifier for the state; using state-notation\n   * @param  {Object} data A state definition data Object\n   * @return {Object}      A state data Object\n   */\n  var _defineState = function(name, data) {\n    if(name === null || typeof name === 'undefined') {\n      throw new Error('Name cannot be null.');\n    \n    // Only use valid state names\n    } else if(!_validateStateName(name)) {\n      throw new Error('Invalid state name.');\n    }\n\n    // Create state\n    var state = angular.copy(data);\n\n    // Use defaults\n    _setStateDefaults(state);\n\n    // Named state\n    state.name = name;\n\n    // Set definition\n    _stateLibrary[name] = state;\n\n    // Reset cache\n    _stateCache = {};\n\n    // URL mapping\n    if(state.url) {\n      _urlDictionary.add(state.url, state);\n    }\n\n    return data;\n  };\n\n  /**\n   * Set configuration data parameters for StateRouter\n   *\n   * Including parameters:\n   * \n   * - historyLength   {Number} Defaults to 5\n   * - initialLocation {Object} An Object{name:String, params:Object} for initial state transition\n   *\n   * @param  {Object}         options A data Object\n   * @return {$stateProvider}         Itself; chainable\n   */\n  this.options = function(options) {\n    angular.extend(_configuration, options || {});\n    return _provider;\n  };\n\n  /**\n   * Set/get state\n   * \n   * @return {$stateProvider} Itself; chainable\n   */\n  this.state = function(name, state) {\n    if(!state) {\n      return _getState(name);\n    }\n    _defineState(name, state);\n    return _provider;\n  };\n\n  /**\n   * Set initialization parameters; deferred to $ready()\n   * \n   * @param  {String}         name   A iniital state\n   * @param  {Object}         params A data object of params\n   * @return {$stateProvider}        Itself; chainable\n   */\n  this.init = function(name, params) {\n    _configuration.initialLocation = {\n      name: name,\n      params: params\n    };\n    return _provider;\n  };\n\n  /**\n   * Get instance\n   */\n  this.$get = ['$rootScope', '$location', '$q', function StateRouterFactory($rootScope, $location, $q) {\n\n    // Current state\n    var _current;\n\n    var _options;\n    var _initalLocation;\n    var _history = [];\n    var _isInit = false;\n\n    /**\n     * Internal method to add history and correct length\n     * \n     * @param  {Object} data An Object\n     */\n    var _pushHistory = function(data) {\n      // Keep the last n states (e.g. - defaults 5)\n      var historyLength = _options.historyLength || 5;\n\n      if(data) {\n        _history.push(data);\n      }\n\n      // Update length\n      if(_history.length > historyLength) {\n        _history.splice(0, _history.length - historyLength);\n      }\n    };\n\n    /**\n     * Internal method to change to state.  Parameters in `params` takes precedence over state-notation `name` expression.  \n     * \n     * @param  {String}  name          A unique identifier for the state; using state-notation including optional parameters\n     * @param  {Object}  params        A data object of params\n     * @return {Promise}               A promise fulfilled when state change occurs\n     */\n    var _changeState = function(name, params) {\n      var deferred = $q.defer();\n\n      $rootScope.$evalAsync(function() {\n        params = params || {};\n\n        // Parse state-notation expression\n        var nameExpr = _parseName(name);\n        name = nameExpr.name;\n        params = angular.extend(nameExpr.params || {}, params);\n\n        var error = null;\n        var request = {\n          name: name,\n          params: params,\n          locals: {}\n        };\n\n        // Compile execution phases\n        var queue = QueueHandler().data(request);\n\n        var nextState = angular.copy(_getState(name));\n        var prevState = _current;\n\n        if(nextState) {\n          // Set locals\n          nextState.locals = request.locals;\n          \n          // Set parameters\n          nextState.params = angular.extend(nextState.params || {}, params);\n        }\n\n        // Does not exist\n        if(nextState === null) {\n          queue.add(function(data, next) {\n            error = new Error('Requested state was not defined.');\n            error.code = 'notfound';\n\n            $rootScope.$broadcast('$stateChangeErrorNotFound', error, request);\n            next(error);\n          });\n\n        // State not changed\n        } else if(_compareStates(prevState, nextState)) {\n          queue.add(function(data, next) {\n            _current = nextState;\n            next();\n          });\n          \n        // Valid state exists\n        } else {\n\n          // Process started\n          queue.add(function(data, next) {\n            $rootScope.$broadcast('$stateChangeBegin', request);\n            next();\n          });\n\n          // Make state change\n          queue.add(function(data, next) {\n            if(prevState) _pushHistory(prevState);\n            _current = nextState;\n            \n            next();\n          });\n\n          // Add middleware\n          queue.add(_layerList);\n\n          // Process ended\n          queue.add(function(data, next) {\n            $rootScope.$broadcast('$stateChangeEnd', request);\n            next();\n          });\n        }\n\n        // Run\n        queue.execute(function(err) {\n          if(err) {\n            $rootScope.$broadcast('$stateChangeError', err, request);\n            deferred.reject(err);\n\n          } else {\n            deferred.resolve(request);\n          }\n\n          $rootScope.$broadcast('$stateChangeComplete', request);\n        });\n      });\n\n      return deferred.promise;\n    };\n\n    // Instance\n    var _inst;\n    _inst = {\n\n      /**\n       * Get options\n       *\n       * @return {Object} A configured options\n       */\n      options: function() {\n        // Hasn't been initialized\n        if(!_options) {\n          _options = angular.copy(_configuration);\n        }\n\n        return _options;\n      },\n\n      /**\n       * Set/get state\n       */\n      state: function(name, state) {\n        if(!state) {\n          return _getState(name);\n        }\n        _defineState(name, state);\n        return _inst;\n      },\n\n      /**\n       * Internal method to add middleware, executing next(err);\n       * \n       * @param  {Function}    handler A callback, function(request, next)\n       * @return {$state}              Itself; chainable\n       */\n      $use: function(handler) {\n        if(typeof handler !== 'function') {\n          throw new Error('Middleware must be a function.');\n        }\n\n        _layerList.push(handler);\n        return _inst;\n      },\n\n      /**\n       * Internal method to perform initialization\n       * \n       * @return {$state} Itself; chainable\n       */\n      $ready: function() {\n        $rootScope.$evalAsync(function() {\n          if(!_isInit) {\n            _isInit = true;\n\n            // Configuration\n            if(!_options) {\n              _options = angular.copy(_configuration);\n            }\n\n            // Initial location\n            if(_options.hasOwnProperty('initialLocation')) {\n              _initalLocation = angular.copy(_options.initialLocation);\n            }\n\n            var readyDeferred = null;\n\n            // Initial location\n            if($location.url() !== '') {\n              readyDeferred = _inst.$location($location.url());\n\n            // Initialize with state\n            } else if(_initalLocation) {\n              readyDeferred = _changeState(_initalLocation.name, _initalLocation.params);\n            }\n\n            $q.when(readyDeferred).then(function() {\n              $rootScope.$broadcast('$stateInit');\n            });\n          }\n        });\n\n        return _inst;\n      },\n\n      // Parse state notation name-params.  \n      parse: _parseName,\n\n      // Retrieve definition of states\n      library: function() {\n        return _stateLibrary;\n      },\n\n      // Validation\n      validate: {\n        name: _validateStateName,\n        query: _validateStateQuery\n      },\n\n      // Retrieve history\n      history: function() {\n        return _history;\n      },\n\n      /**\n       * Change state, asynchronous operation\n       * \n       * @param  {String}      name     A unique identifier for the state; using dot-notation\n       * @param  {Object}      [params] A parameters data object\n       * @return {$state}               Itself; chainable\n       */\n      change: function(name, params) {\n        return _changeState(name, params);\n      },\n\n      /**\n       * Internal method to change state based on $location.url(), asynchronous operation using internal methods, quiet fallback.  \n       * \n       * @param  {String}      url        A url matching defind states\n       * @param  {Function}    [callback] A callback, function(err)\n       * @return {$state}                 Itself; chainable\n       */\n      $location: function(url) {\n        var data = _urlDictionary.lookup(url);\n\n        if(data) {\n          var state = data.ref;\n\n          if(state) {\n            // Parse params from url\n            return _changeState(state.name, data.params);\n          }\n        } else {\n          var error = new Error('Requested state was not defined.');\n          error.code = 'notfound';\n          $rootScope.$broadcast('$stateChangeErrorNotFound', error, {\n            url: url\n          });\n        }\n\n        return $q.reject(new Error('Unable to find location in library'));\n      },\n      \n      /**\n       * Retrieve copy of current state\n       * \n       * @return {Object} A copy of current state\n       */\n      current: function() {\n        return (!_current) ? null : angular.copy(_current);\n      },\n\n      /**\n       * Check query against current state\n       *\n       * @param  {Mixed}   query  A string using state notation or a RegExp\n       * @param  {Object}  params A parameters data object\n       * @return {Boolean}        A true if state is parent to current state\n       */\n      active: function(query, params) {\n        query = query || '';\n        \n        // No state\n        if(!_current) {\n          return false;\n\n        // Use RegExp matching\n        } else if(query instanceof RegExp) {\n          return !!_current.name.match(query);\n\n        // String; state dot-notation\n        } else if(typeof query === 'string') {\n\n          // Cast string to RegExp\n          if(query.match(/^\\/.*\\/$/)) {\n            var casted = query.substr(1, query.length-2);\n            return !!_current.name.match(new RegExp(casted));\n\n          // Transform to state notation\n          } else {\n            var transformed = query\n              .split('.')\n              .map(function(item) {\n                if(item === '*') {\n                  return '[a-zA-Z0-9_]*';\n                } else if(item === '**') {\n                  return '[a-zA-Z0-9_\\\\.]*';\n                } else {\n                  return item;\n                }\n              })\n              .join('\\\\.');\n\n            return !!_current.name.match(new RegExp(transformed));\n          }\n        }\n\n        // Non-matching\n        return false;\n      }\n    };\n\n    return _inst;\n  }];\n\n}];\n\n},{\"../utils/parameters\":6,\"../utils/queue-handler\":7,\"../utils/url-dictionary\":8}],5:[function(require,module,exports){\n'use strict';\n\nvar UrlDictionary = require('../utils/url-dictionary');\n\nmodule.exports = ['$state', '$location', '$rootScope', function($state, $location, $rootScope) {\n  var _url = $location.url();\n\n  // Instance\n  var _self = {};\n\n  /**\n   * Update URL based on state\n   */\n  var _update = function() {\n    var current = $state.current();\n\n    if(current && current.url) {\n      var path;\n      path = current.url;\n\n      // Add parameters or use default parameters\n      var params = current.params || {};\n      var query = {};\n      for(var name in params) {\n        var re = new RegExp(':'+name, 'g');\n        if(path.match(re)) {\n          path = path.replace(re, params[name]);\n        } else {\n          query[name] = params[name];\n        }\n      }\n\n      $location.path(path);\n      $location.search(query);\n      \n      _url = $location.url();\n    }\n  };\n\n  /**\n   * Update url based on state\n   */\n  _self.update = function() {\n    _update();\n  };\n\n  /**\n   * Detect URL change and dispatch state change\n   */\n  _self.location = function() {\n    var lastUrl = _url;\n    var nextUrl = $location.url();\n\n    if(nextUrl !== lastUrl) {\n      _url = nextUrl;\n\n      $state.$location(_url);\n      $rootScope.$broadcast('$locationStateUpdate');\n    }\n  };\n\n  // Register middleware layer\n  $state.$use(function(request, next) {\n    _update();\n    next();\n  });\n\n  return _self;\n}];\n\n},{\"../utils/url-dictionary\":8}],6:[function(require,module,exports){\n'use strict';\n\n// Parse Object literal name-value pairs\nvar reParseObjectLiteral = /([,{]\\s*((\"|')(.*?)\\3|\\w*)|(:\\s*([+-]?(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[eE][+-]?\\d+)?|true|false|null|(\"|')(.*?)\\7|\\[[^\\]]*\\])))/g;\n\n// Match Strings\nvar reString = /^(\"|')(.*?)\\1$/;\n\n// TODO Add escaped string quotes \\' and \\\" to string matcher\n\n// Match Number (int/float/exponential)\nvar reNumber = /^[+-]?(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[eE][+-]?\\d+)?$/;\n\n/**\n * Parse string value into Boolean/Number/Array/String/null.\n *\n * Strings are surrounded by a pair of matching quotes\n * \n * @param  {String} value A String value to parse\n * @return {Mixed}        A Boolean/Number/Array/String/null\n */\nvar _resolveValue = function(value) {\n\n  // Boolean: true\n  if(value === 'true') {\n    return true;\n\n  // Boolean: false\n  } else if(value === 'false') {\n    return false;\n\n  // Null\n  } else if(value === 'null') {\n    return null;\n\n  // String\n  } else if(value.match(reString)) {\n    return value.substr(1, value.length-2);\n\n  // Number\n  } else if(value.match(reNumber)) {\n    return +value;\n\n  // NaN\n  } else if(value === 'NaN') {\n    return NaN;\n\n  // TODO add matching with Arrays and parse\n  \n  }\n\n  // Unable to resolve\n  return value;\n};\n\n// Find values in an object literal\nvar _listify = function(str) {\n\n  // Trim\n  str = str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n\n  if(str.match(/^\\s*{.*}\\s*$/) === null) {\n    throw new Error('Parameters expects an Object');\n  }\n\n  var sanitizeName = function(name) {\n    return name.replace(/^[\\{,]?\\s*[\"']?/, '').replace(/[\"']?\\s*$/, '');\n  };\n\n  var sanitizeValue = function(value) {\n    var str = value.replace(/^(:)?\\s*/, '').replace(/\\s*$/, '');\n    return _resolveValue(str);\n  };\n\n  return str.match(reParseObjectLiteral).map(function(item, i, list) {\n    return i%2 === 0 ? sanitizeName(item) : sanitizeValue(item);\n  });\n};\n\n/**\n * Create a params Object from string\n * \n * @param {String} str A stringified version of Object literal\n */\nvar Parameters = function(str) {\n  str = str || '';\n\n  // Instance\n  var _self = {};\n\n  _listify(str).forEach(function(item, i, list) {\n    if(i%2 === 0) {\n      _self[item] = list[i+1];\n    }\n  });\n\n  return _self;\n};\n\nmodule.exports = Parameters;\n\nmodule.exports.resolveValue = _resolveValue;\nmodule.exports.listify = _listify;\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\n/**\n * Execute a series of functions; used in tandem with middleware\n */\nvar QueueHandler = function() {\n  var _list = [];\n  var _data = null;\n\n  var _self = {\n\n    /**\n     * Add a handler\n     * \n     * @param {Mixed}         handler A Function or an Array of Functions to add to the queue\n     * @return {QueueHandler}         Itself; chainable\n     */\n    add: function(handler) {\n      if(handler && handler.constructor === Array) {\n        _list = _list.concat(handler);\n      } else {\n        _list.push(handler);\n      }\n      return this;\n    },\n\n    /**\n     * Data object\n     * \n     * @param  {Object} data A data object made available to each handler\n     * @return {QueueHandler}         Itself; chainable\n     */\n    data: function(data) {\n      _data = data;\n      return this;\n    },\n\n    /**\n     * Begin execution and trigger callback at the end\n     * \n     * @param  {Function} callback A callback, function(err)\n     * @return {QueueHandler}         Itself; chainable\n     */\n    execute: function(callback) {\n      var nextHandler;\n      var executionList = _list.slice(0).sort(function(a, b) {\n        return (a.priotity || 1) < (b.priotity || 1);\n      });\n\n      nextHandler = function() {\n        var handler = executionList.shift();\n\n        // Complete\n        if(!handler) {\n          callback(null);\n\n        // Next handler\n        } else {\n          handler.call(null, _data, function(err) {\n            // Error\n            if(err) {\n              callback(err);\n\n            // Continue\n            } else {\n              nextHandler();\n            }\n          });\n        }\n      };\n\n      nextHandler();\n    }\n\n  };\n  \n  return _self;\n};\n\nmodule.exports = QueueHandler;\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\nvar Url = require('./url');\n\n/**\n * Constructor\n */\nfunction UrlDictionary() {\n  this._patterns = [];\n  this._refs = [];\n  this._params = [];\n}\n\n/**\n * Associate a URL pattern with a reference\n * \n * @param  {String} pattern A URL pattern\n * @param  {Object} ref     A data Object\n */\nUrlDictionary.prototype.add = function(pattern, ref) {\n  pattern = pattern || '';\n  var _self = this;\n  var i = this._patterns.length;\n\n  var pathChain;\n  var params = {};\n\n  if(pattern.indexOf('?') === -1) {\n    pathChain = Url(pattern).path().split('/');\n\n  } else {\n    pathChain = Url(pattern).path().split('/');\n  }\n\n  // Start\n  var searchExpr = '^';\n\n  // Items\n  (pathChain.forEach(function(chunk, i) {\n    if(i!==0) {\n      searchExpr += '\\\\/';\n    }\n\n    if(chunk[0] === ':') {\n      searchExpr += '[^\\\\/?]*';\n      params[chunk.substring(1)] = new RegExp(searchExpr);\n\n    } else {\n      searchExpr += chunk;\n    }\n  }));\n\n  // End\n  searchExpr += '[\\\\/]?$';\n\n  this._patterns[i] = new RegExp(searchExpr);\n  this._refs[i] = ref;\n  this._params[i] = params;\n};\n\n/**\n * Find a reference according to a URL pattern and retrieve params defined in URL\n * \n * @param  {String} url      A URL to test for\n * @param  {Object} defaults A data Object of default parameter values\n * @return {Object}          A reference to a stored object\n */\nUrlDictionary.prototype.lookup = function(url, defaults) {\n  url = url || '';\n  var p = Url(url).path();\n  var q = Url(url).queryparams();\n\n  var _self = this;\n\n  // Check dictionary\n  var _findPattern = function(check) {\n    check = check || '';\n    for(var i=_self._patterns.length-1; i>=0; i--) {\n      if(check.match(_self._patterns[i]) !== null) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  var i = _findPattern(p);\n  \n  // Matching pattern found\n  if(i !== -1) {\n\n    // Retrieve params in pattern match\n    var params = {};\n    for(var n in this._params[i]) {\n      var paramParser = this._params[i][n];\n      var urlMatch = (url.match(paramParser) || []).pop() || '';\n      var varMatch = urlMatch.split('/').pop();\n      params[n] = varMatch;\n    }\n\n    // Retrieve params in querystring match\n    params = angular.extend(q, params);\n\n    return {\n      url: url,\n      ref: this._refs[i],\n      params: params\n    };\n\n  // Not in dictionary\n  } else {\n    return null;\n  }\n};\n\nmodule.exports = UrlDictionary;\n\n},{\"./url\":9}],9:[function(require,module,exports){\n'use strict';\n\nfunction Url(url) {\n  url = url || '';\n\n  // Instance\n  var _self = {\n\n    /**\n     * Get the path of a URL\n     * \n     * @return {String}     A querystring from URL\n     */\n    path: function() {\n      return url.indexOf('?') === -1 ? url : url.substring(0, url.indexOf('?'));\n    },\n\n    /**\n     * Get the querystring of a URL\n     * \n     * @return {String}     A querystring from URL\n     */\n    querystring: function() {\n      return url.indexOf('?') === -1 ? '' : url.substring(url.indexOf('?')+1);\n    },\n\n    /**\n     * Get the querystring of a URL parameters as a hash\n     * \n     * @return {String}     A querystring from URL\n     */\n    queryparams: function() {\n      var pairs = _self.querystring().split('&');\n      var params = {};\n\n      for(var i=0; i<pairs.length; i++) {\n        if(pairs[i] === '') continue;\n        var nameValue = pairs[i].split('=');\n        params[nameValue[0]] = (typeof nameValue[1] === 'undefined' || nameValue[1] === '') ? true : nameValue[1];\n      }\n\n      return params;\n    }\n  };\n\n  return _self;\n}\n\nmodule.exports = Url;\n\n},{}]},{},[2])\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["state-router.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","$state","restrict","scope","link","element","attrs","css","on","change","sref","preventDefault",2,"angular","provider","factory","run","$rootScope","$urlManager","$resolution","$on","location","arguments","$ready","directive","./directives/sref","./services/queue-handler","./services/resolution","./services/state-router","./services/url-manager",3,"Queue","_list","_data","_self","add","handler","priority","constructor","Array","forEach","layer","concat","push","this","data","execute","callback","nextHandler","executionList","slice","sort","b","Math","max","min","$evalAsync","shift","err","create",4,"$q","$injector","_resolve","resolve","resolvesPromises","value","key","resolution","isString","get","invoke","when","all","_register","request","next","current","then","locals","extend","$broadcast","$use",5,"UrlDictionary","Parameters","_provider","_configuration","historyLength","_stateLibrary","_stateCache","_urlDictionary","_layerList","_parseName","nameParams","match","npart","substring","indexOf","ppart","lastIndexOf","name","params","_setStateDefaults","inherit","_validateStateName","nameChain","split","_validateStateQuery","query","_compareStates","equals","_getNameChain","nameList","map","item","list","join","filter","_getState","state","stateChain","copy","parent","nextState","merge","_defineState","url","options","init","initialLocation","$get","$location","$queueHandler","_current","_options","_initalLocation","_inst","_history","_isInit","_pushHistory","splice","_changeState","deferred","defer","nameExpr","error","queue","prevState","reject","promise","_changeStateAndBroadcastComplete","hasOwnProperty","readyDeferred","parse","library","validate","history","lookup","ref","active","RegExp","casted","substr","transformed","../utils/parameters","../utils/url-dictionary",6,"_url","_update","path","re","replace","search","update","lastUrl","nextUrl",7,"reParseObjectLiteral","reString","reNumber","_resolveValue","NaN","_listify","str","sanitizeName","sanitizeValue","resolveValue","listify",8,"_patterns","_refs","_params","Url","prototype","pattern","pathChain","searchExpr","chunk","defaults","p","q","queryparams","_findPattern","check","paramParser","urlMatch","pop","varMatch","./url",9,"querystring","pairs","nameValue"],"mappings":"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","file":"state-router.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$state', function ($state) {\n  return {\n    restrict: 'A',\n    scope: {\n    },\n    link: function(scope, element, attrs) {\n      element.css('cursor', 'pointer');\n      element.on('click', function(e) {\n        $state.change(attrs.sref);\n        e.preventDefault();\n      });\n    }\n\n  };\n}];\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\n/* global angular:false */\n\n// CommonJS\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = 'angular-state-router';\n}\n\n// Instantiate module\nangular.module('angular-state-router', [])\n\n  .provider('$state', require('./services/state-router'))\n\n  .factory('$urlManager', require('./services/url-manager'))\n\n  .factory('$resolution', require('./services/resolution'))\n  \n  .factory('$queueHandler', require('./services/queue-handler'))\n\n  .run(['$rootScope', '$state', '$urlManager', '$resolution', function($rootScope, $state, $urlManager, $resolution) {\n    // Update location changes\n    $rootScope.$on('$locationChangeSuccess', function() {\n      $urlManager.location(arguments);\n    });\n\n    // Initialize\n    $state.$ready();\n  }])\n\n  .directive('sref', require('./directives/sref'));\n\n},{\"./directives/sref\":1,\"./services/queue-handler\":3,\"./services/resolution\":4,\"./services/state-router\":5,\"./services/url-manager\":6}],3:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$rootScope', function($rootScope) {\n\n  /**\n   * Execute a series of functions; used in tandem with middleware\n   */\n  var Queue = function() {\n    var _list = [];\n    var _data = null;\n\n    var _self = {\n\n      /**\n       * Add a handler\n       * \n       * @param {Mixed}  handler A Function or an Array of Functions to add to the queue\n       * @return {Queue}         Itself; chainable\n       */\n      add: function(handler, priority) {\n        if(handler && handler.constructor === Array) {\n          handler.forEach(function(layer) {\n            layer.priority = typeof layer.priority === 'undefined' ? 1 : layer.priority;\n          });\n          _list = _list.concat(handler);\n        } else {\n          handler.priority = priority || (typeof handler.priority === 'undefined' ? 1 : handler.priority);\n          _list.push(handler);\n        }\n        return this;\n      },\n\n      /**\n       * Data object\n       * \n       * @param  {Object} data A data object made available to each handler\n       * @return {Queue}       Itself; chainable\n       */\n      data: function(data) {\n        _data = data;\n        return this;\n      },\n\n      /**\n       * Begin execution and trigger callback at the end\n       * \n       * @param  {Function} callback A callback, function(err)\n       * @return {Queue}             Itself; chainable\n       */\n      execute: function(callback) {\n        var nextHandler;\n        var executionList = _list.slice(0).sort(function(a, b) {\n          return Math.max(-1, Math.min(1, b.priority - a.priority));\n        });\n\n        nextHandler = function() {\n          $rootScope.$evalAsync(function() {\n            var handler = executionList.shift();\n\n            // Complete\n            if(!handler) {\n              callback(null);\n\n            // Next handler\n            } else {\n              handler.call(null, _data, function(err) {\n                // Error\n                if(err) {\n                  callback(err);\n\n                // Continue\n                } else {\n                  nextHandler();\n                }\n              });\n            }\n          });\n        };\n\n        // Start\n        nextHandler();\n      }\n\n    };\n    \n    return _self;\n  };\n\n  // Instance\n  return {\n\n    /**\n     * Factory method\n     * \n     * @return {Queue} A queue\n     */\n    create: function() {\n      return Queue();\n    }\n  };\n}];\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$q', '$injector', '$state', '$rootScope', function($q, $injector, $state, $rootScope) {\n\n  // Instance\n  var _self = {};\n\n  /**\n   * Resolve\n   * \n   * @param  {Object}  resolve A hash Object of items to resolve\n   * @return {Promise}         A promise fulfilled when templates retireved\n   */\n  var _resolve = function(resolve) {\n    var resolvesPromises = {};\n\n    angular.forEach(resolve, function(value, key) {\n      var resolution = angular.isString(value) ? $injector.get(value) : $injector.invoke(value, null, null, key);\n      resolvesPromises[key] = $q.when(resolution);\n    });\n\n    return $q.all(resolvesPromises);\n  };\n  _self.resolve = _resolve;\n\n  /**\n   * Middleware\n   * \n   * @param  {Object}   request A data Object\n   * @param  {Function} next    A callback, function(err)\n   */\n  var _register = function(request, next) {\n    var current = $state.current();\n\n    if(!current) {\n      return next();\n    }\n\n    _resolve(current.resolve || {}).then(function(locals) {\n      angular.extend(request.locals, locals);\n      next();\n\n    }, function(err) {\n      $rootScope.$broadcast('$stateChangeErrorResolve', err);\n      next(new Error('Error resolving state'));\n    });\n  };\n  _register.priority = 100;\n\n  // Register middleware layer\n  $state.$use(_register);\n\n  return _self;\n}];\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\nvar UrlDictionary = require('../utils/url-dictionary');\nvar Parameters = require('../utils/parameters');\n\nmodule.exports = [function StateRouterProvider() {\n  // Provider\n  var _provider = this;\n\n  // Configuration, global options\n  var _configuration = {\n    historyLength: 5\n  };\n\n  // State definition library\n  var _stateLibrary = {};\n  var _stateCache = {};\n\n  // URL to state dictionary\n  var _urlDictionary = new UrlDictionary();\n\n  // Middleware layers\n  var _layerList = [];\n\n  /**\n   * Parse state notation name-params.  \n   * \n   * Assume all parameter values are strings\n   * \n   * @param  {String} nameParams A name-params string\n   * @return {Object}             A name string and param Object\n   */\n  var _parseName = function(nameParams) {\n    if(nameParams && nameParams.match(/^[a-zA-Z0-9_\\.]*\\(.*\\)$/)) {\n      var npart = nameParams.substring(0, nameParams.indexOf('('));\n      var ppart = Parameters( nameParams.substring(nameParams.indexOf('(')+1, nameParams.lastIndexOf(')')) );\n\n      return {\n        name: npart,\n        params: ppart\n      };\n\n    } else {\n      return {\n        name: nameParams,\n        params: null\n      };\n    }\n  };\n\n  /**\n   * Add default values to a state\n   * \n   * @param  {Object} data An Object\n   * @return {Object}      An Object\n   */\n  var _setStateDefaults = function(data) {\n    // Default values\n    data.inherit = (typeof data.inherit === 'undefined') ? true : data.inherit;\n\n    return data;\n  };\n\n  /**\n   * Validate state name\n   * \n   * @param  {String} name A unique identifier for the state; using dot-notation\n   * @return {Boolean}     True if name is valid, false if not\n   */\n  var _validateStateName = function(name) {\n    name = name || '';\n\n    // TODO optimize with RegExp\n\n    var nameChain = name.split('.');\n    for(var i=0; i<nameChain.length; i++) {\n      if(!nameChain[i].match(/[a-zA-Z0-9_]+/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Validate state query\n   * \n   * @param  {String} query A query for the state; using dot-notation\n   * @return {Boolean}      True if name is valid, false if not\n   */\n  var _validateStateQuery = function(query) {\n    query = query || '';\n    \n    // TODO optimize with RegExp\n\n    var nameChain = query.split('.');\n    for(var i=0; i<nameChain.length; i++) {\n      if(!nameChain[i].match(/(\\*(\\*)?|[a-zA-Z0-9_]+)/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Compare two states, compares values.  \n   * \n   * @return {Boolean} True if states are the same, false if states are different\n   */\n  var _compareStates = function(a, b) {\n    a = a || {};\n    b = b || {};\n    return a.name === b.name && angular.equals(a.params, b.params);\n  };\n\n  /**\n   * Get a list of parent states\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @return {Array}         An Array of parent states\n   */\n  var _getNameChain = function(name) {\n    var nameList = name.split('.');\n\n    return nameList\n      .map(function(item, i, list) {\n        return list.slice(0, i+1).join('.');\n      })\n      .filter(function(item) {\n        return item !== null;\n      });\n  };\n\n  /**\n   * Internal method to crawl library heirarchy\n   * \n   * @param  {String} name   A unique identifier for the state; using state-notation\n   * @return {Object}        A state data Object\n   */\n  var _getState = function(name) {\n    name = name || '';\n\n    var state = null;\n\n    // Only use valid state queries\n    if(!_validateStateName(name)) {\n      return null;\n    \n    // Use cache if exists\n    } else if(_stateCache[name]) {\n      return _stateCache[name];\n    }\n\n    var nameChain = _getNameChain(name);\n    var stateChain = nameChain\n      .map(function(name, i) {\n        var item = angular.copy(_stateLibrary[name]);\n        return item;\n      })\n      .filter(function(parent) {\n        return !!parent;\n      });\n\n    // Walk up checking inheritance\n    for(var i=stateChain.length-1; i>=0; i--) {\n      if(stateChain[i]) {\n        var nextState = stateChain[i];\n        state = angular.merge(nextState, state || {});\n      }\n\n      if(state && state.inherit === false) break;\n    }\n\n    // Store in cache\n    _stateCache[name] = state;\n\n    return state;\n  };\n\n  /**\n   * Internal method to store a state definition.  Parameters should be included in data Object not state name.  \n   * \n   * @param  {String} name A unique identifier for the state; using state-notation\n   * @param  {Object} data A state definition data Object\n   * @return {Object}      A state data Object\n   */\n  var _defineState = function(name, data) {\n    if(name === null || typeof name === 'undefined') {\n      throw new Error('Name cannot be null.');\n    \n    // Only use valid state names\n    } else if(!_validateStateName(name)) {\n      throw new Error('Invalid state name.');\n    }\n\n    // Create state\n    var state = angular.copy(data);\n\n    // Use defaults\n    _setStateDefaults(state);\n\n    // Named state\n    state.name = name;\n\n    // Set definition\n    _stateLibrary[name] = state;\n\n    // Reset cache\n    _stateCache = {};\n\n    // URL mapping\n    if(state.url) {\n      _urlDictionary.add(state.url, state);\n    }\n\n    return data;\n  };\n\n  /**\n   * Set configuration data parameters for StateRouter\n   *\n   * Including parameters:\n   * \n   * - historyLength   {Number} Defaults to 5\n   * - initialLocation {Object} An Object{name:String, params:Object} for initial state transition\n   *\n   * @param  {Object}         options A data Object\n   * @return {$stateProvider}         Itself; chainable\n   */\n  this.options = function(options) {\n    angular.extend(_configuration, options || {});\n    return _provider;\n  };\n\n  /**\n   * Set/get state\n   * \n   * @param  {String} name A unique identifier for the state; using state-notation\n   * @param  {Object} data A state definition data Object\n   * @return {$stateProvider} Itself; chainable\n   */\n  this.state = function(name, state) {\n    // Get\n    if(!state) {\n      return _getState(name);\n    }\n\n    // Set\n    _defineState(name, state);\n\n    return _provider;\n  };\n\n  /**\n   * Set initialization parameters; deferred to $ready()\n   * \n   * @param  {String}         name   A iniital state\n   * @param  {Object}         params A data object of params\n   * @return {$stateProvider}        Itself; chainable\n   */\n  this.init = function(name, params) {\n    _configuration.initialLocation = {\n      name: name,\n      params: params\n    };\n    return _provider;\n  };\n\n  /**\n   * Get instance\n   */\n  this.$get = ['$rootScope', '$location', '$q', '$queueHandler', function StateRouterFactory($rootScope, $location, $q, $queueHandler) {\n\n    // Current state\n    var _current;\n\n    var _options;\n    var _initalLocation;\n    var _history = [];\n    var _isInit = false;\n\n    /**\n     * Internal method to add history and correct length\n     * \n     * @param  {Object} data An Object\n     */\n    var _pushHistory = function(data) {\n      // Keep the last n states (e.g. - defaults 5)\n      var historyLength = _options.historyLength || 5;\n\n      if(data) {\n        _history.push(data);\n      }\n\n      // Update length\n      if(_history.length > historyLength) {\n        _history.splice(0, _history.length - historyLength);\n      }\n    };\n\n    /**\n     * Internal method to change to state.  Parameters in `params` takes precedence over state-notation `name` expression.  \n     * \n     * @param  {String}  name   A unique identifier for the state; using state-notation including optional parameters\n     * @param  {Object}  params A data object of params\n     * @return {Promise}        A promise fulfilled when state change occurs\n     */\n    var _changeState = function(name, params) {\n      var deferred = $q.defer();\n\n      $rootScope.$evalAsync(function() {\n        params = params || {};\n\n        // Parse state-notation expression\n        var nameExpr = _parseName(name);\n        name = nameExpr.name;\n        params = angular.extend(nameExpr.params || {}, params);\n\n        var error = null;\n        var request = {\n          name: name,\n          params: params,\n          locals: {}\n        };\n\n        // Compile execution phases\n        var queue = $queueHandler.create().data(request);\n\n        var nextState = angular.copy(_getState(name));\n        var prevState = _current;\n\n        if(nextState) {\n          // Set locals\n          nextState.locals = request.locals;\n          \n          // Set parameters\n          nextState.params = angular.extend(nextState.params || {}, params);\n        }\n\n        // Does not exist\n        if(nextState === null) {\n          queue.add(function(data, next) {\n            error = new Error('Requested state was not defined.');\n            error.code = 'notfound';\n\n            $rootScope.$broadcast('$stateChangeErrorNotFound', error, request);\n            next(error);\n          }, 200);\n\n        // State not changed\n        } else if(_compareStates(prevState, nextState)) {\n          queue.add(function(data, next) {\n            _current = nextState;\n            next();\n          }, 200);\n          \n        // Valid state exists\n        } else {\n\n          // Process started\n          queue.add(function(data, next) {\n            $rootScope.$broadcast('$stateChangeBegin', request);\n            next();\n          }, 201);\n\n          // Make state change\n          queue.add(function(data, next) {\n            if(prevState) _pushHistory(prevState);\n            _current = nextState;\n            \n            next();\n          }, 200);\n\n          // Add middleware\n          queue.add(_layerList);\n\n          // Process ended\n          queue.add(function(data, next) {\n            $rootScope.$broadcast('$stateChangeEnd', request);\n            next();\n          }, -200);\n        }\n\n        // Run\n        queue.execute(function(err) {\n          if(err) {\n            $rootScope.$broadcast('$stateChangeError', err, request);\n            deferred.reject(err);\n\n          } else {\n            deferred.resolve(request);\n          }\n        });\n      });\n\n      return deferred.promise;\n    };\n\n    /**\n     * Internal method to change to state and broadcast completion\n     * \n     * @param  {String}  name   A unique identifier for the state; using state-notation including optional parameters\n     * @param  {Object}  params A data object of params\n     * @return {Promise}        A promise fulfilled when state change occurs\n     */\n    var _changeStateAndBroadcastComplete = function(name, params) {\n      return _changeState(name, params).then(function() {\n        $rootScope.$broadcast('$stateChangeComplete', null, _current);\n      }, function(err) {\n        $rootScope.$broadcast('$stateChangeComplete', err, _current);\n      });\n    };\n\n    // Instance\n    var _inst;\n    _inst = {\n\n      /**\n       * Get options\n       *\n       * @return {Object} A configured options\n       */\n      options: function() {\n        // Hasn't been initialized\n        if(!_options) {\n          _options = angular.copy(_configuration);\n        }\n\n        return _options;\n      },\n\n      /**\n       * Set/get state. Reloads state if current state is affected by defined \n       * state (when redefining parent or current state)\n       *\n       * @param  {String} name A unique identifier for the state; using state-notation\n       * @param  {Object} data A state definition data Object\n       * @return {$state}      Itself; chainable\n       */\n      state: function(name, state) {\n        // Get\n        if(!state) {\n          return _getState(name);\n        }\n\n        // Set\n        _defineState(name, state);\n\n        // Reload\n        if(_current) {\n          var nameChain = _getNameChain(_current.name);\n          if(nameChain.indexOf(name) !== -1) {\n            _changeState(_current.name);\n          }\n        }\n\n        return _inst;\n      },\n\n      /**\n       * Internal method to add middleware; called during state transition\n       * \n       * @param  {Function} handler  A callback, function(request, next)\n       * @param  {Number}   priority A number denoting priority\n       * @return {$state}            Itself; chainable\n       */\n      $use: function(handler, priority) {\n        if(typeof handler !== 'function') {\n          throw new Error('Middleware must be a function.');\n        }\n\n        if(typeof priority !== 'undefined') handler.priority = priority;\n        _layerList.push(handler);\n        return _inst;\n      },\n\n      /**\n       * Internal method to perform initialization\n       * \n       * @return {$state} Itself; chainable\n       */\n      $ready: function() {\n        $rootScope.$evalAsync(function() {\n          if(!_isInit) {\n            _isInit = true;\n\n            // Configuration\n            if(!_options) {\n              _options = angular.copy(_configuration);\n            }\n\n            // Initial location\n            if(_options.hasOwnProperty('initialLocation')) {\n              _initalLocation = angular.copy(_options.initialLocation);\n            }\n\n            var readyDeferred = null;\n\n            // Initial location\n            if($location.url() !== '') {\n              readyDeferred = _inst.$location($location.url());\n\n            // Initialize with state\n            } else if(_initalLocation) {\n              readyDeferred = _changeStateAndBroadcastComplete(_initalLocation.name, _initalLocation.params);\n            }\n\n            $q.when(readyDeferred).then(function() {\n              $rootScope.$broadcast('$stateInit');\n            });\n          }\n        });\n\n        return _inst;\n      },\n\n      // Parse state notation name-params.  \n      parse: _parseName,\n\n      /**\n       * Retrieve definition of states\n       * \n       * @return {Object} A hash of all defined states\n       */\n      library: function() {\n        return _stateLibrary;\n      },\n\n      // Validation\n      validate: {\n        name: _validateStateName,\n        query: _validateStateQuery\n      },\n\n      /**\n       * Retrieve history\n       * \n       * @return {[type]} [description]\n       */\n      history: function() {\n        return _history;\n      },\n\n      /**\n       * Request state transition, asynchronous operation\n       * \n       * @param  {String}      name     A unique identifier for the state; using dot-notation\n       * @param  {Object}      [params] A parameters data object\n       * @return {Promise}              A promise fulfilled when state change complete\n       */\n      change: function(name, params) {\n        return _changeStateAndBroadcastComplete(name, params);\n      },\n\n      /**\n       * Internal method to change state based on $location.url(), asynchronous operation using internal methods, quiet fallback.  \n       * \n       * @param  {String}      url        A url matching defind states\n       * @param  {Function}    [callback] A callback, function(err)\n       * @return {$state}                 Itself; chainable\n       */\n      $location: function(url) {\n        var data = _urlDictionary.lookup(url);\n\n        if(data) {\n          var state = data.ref;\n\n          if(state) {\n            // Parse params from url\n            return _changeStateAndBroadcastComplete(state.name, data.params);\n          }\n        } else if(!!url && url !== '') {\n          var error = new Error('Requested state was not defined.');\n          error.code = 'notfound';\n          $rootScope.$broadcast('$stateChangeErrorNotFound', error, {\n            url: url\n          });\n        }\n\n        return $q.reject(new Error('Unable to find location in library'));\n      },\n      \n      /**\n       * Retrieve copy of current state\n       * \n       * @return {Object} A copy of current state\n       */\n      current: function() {\n        return (!_current) ? null : angular.copy(_current);\n      },\n\n      /**\n       * Check query against current state\n       *\n       * @param  {Mixed}   query  A string using state notation or a RegExp\n       * @param  {Object}  params A parameters data object\n       * @return {Boolean}        A true if state is parent to current state\n       */\n      active: function(query, params) {\n        query = query || '';\n        \n        // No state\n        if(!_current) {\n          return false;\n\n        // Use RegExp matching\n        } else if(query instanceof RegExp) {\n          return !!_current.name.match(query);\n\n        // String; state dot-notation\n        } else if(typeof query === 'string') {\n\n          // Cast string to RegExp\n          if(query.match(/^\\/.*\\/$/)) {\n            var casted = query.substr(1, query.length-2);\n            return !!_current.name.match(new RegExp(casted));\n\n          // Transform to state notation\n          } else {\n            var transformed = query\n              .split('.')\n              .map(function(item) {\n                if(item === '*') {\n                  return '[a-zA-Z0-9_]*';\n                } else if(item === '**') {\n                  return '[a-zA-Z0-9_\\\\.]*';\n                } else {\n                  return item;\n                }\n              })\n              .join('\\\\.');\n\n            return !!_current.name.match(new RegExp(transformed));\n          }\n        }\n\n        // Non-matching\n        return false;\n      }\n    };\n\n    return _inst;\n  }];\n\n}];\n\n},{\"../utils/parameters\":7,\"../utils/url-dictionary\":8}],6:[function(require,module,exports){\n'use strict';\n\nvar UrlDictionary = require('../utils/url-dictionary');\n\nmodule.exports = ['$state', '$location', '$rootScope', function($state, $location, $rootScope) {\n  var _url = $location.url();\n\n  // Instance\n  var _self = {};\n\n  /**\n   * Update URL based on state\n   */\n  var _update = function() {\n    var current = $state.current();\n\n    if(current && current.url) {\n      var path;\n      path = current.url;\n\n      // Add parameters or use default parameters\n      var params = current.params || {};\n      var query = {};\n      for(var name in params) {\n        var re = new RegExp(':'+name, 'g');\n        if(path.match(re)) {\n          path = path.replace(re, params[name]);\n        } else {\n          query[name] = params[name];\n        }\n      }\n\n      $location.path(path);\n      $location.search(query);\n      \n      _url = $location.url();\n    }\n  };\n\n  /**\n   * Update url based on state\n   */\n  _self.update = function() {\n    _update();\n  };\n\n  /**\n   * Detect URL change and dispatch state change\n   */\n  _self.location = function() {\n    var lastUrl = _url;\n    var nextUrl = $location.url();\n\n    if(nextUrl !== lastUrl) {\n      _url = nextUrl;\n\n      $state.$location(_url);\n      $rootScope.$broadcast('$locationStateUpdate');\n    }\n  };\n\n  // Register middleware layer\n  $state.$use(function(request, next) {\n    _update();\n    next();\n  });\n\n  return _self;\n}];\n\n},{\"../utils/url-dictionary\":8}],7:[function(require,module,exports){\n'use strict';\n\n// Parse Object literal name-value pairs\nvar reParseObjectLiteral = /([,{]\\s*((\"|')(.*?)\\3|\\w*)|(:\\s*([+-]?(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[eE][+-]?\\d+)?|true|false|null|(\"|')(.*?)\\7|\\[[^\\]]*\\])))/g;\n\n// Match Strings\nvar reString = /^(\"|')(.*?)\\1$/;\n\n// TODO Add escaped string quotes \\' and \\\" to string matcher\n\n// Match Number (int/float/exponential)\nvar reNumber = /^[+-]?(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[eE][+-]?\\d+)?$/;\n\n/**\n * Parse string value into Boolean/Number/Array/String/null.\n *\n * Strings are surrounded by a pair of matching quotes\n * \n * @param  {String} value A String value to parse\n * @return {Mixed}        A Boolean/Number/Array/String/null\n */\nvar _resolveValue = function(value) {\n\n  // Boolean: true\n  if(value === 'true') {\n    return true;\n\n  // Boolean: false\n  } else if(value === 'false') {\n    return false;\n\n  // Null\n  } else if(value === 'null') {\n    return null;\n\n  // String\n  } else if(value.match(reString)) {\n    return value.substr(1, value.length-2);\n\n  // Number\n  } else if(value.match(reNumber)) {\n    return +value;\n\n  // NaN\n  } else if(value === 'NaN') {\n    return NaN;\n\n  // TODO add matching with Arrays and parse\n  \n  }\n\n  // Unable to resolve\n  return value;\n};\n\n// Find values in an object literal\nvar _listify = function(str) {\n\n  // Trim\n  str = str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n\n  if(str.match(/^\\s*{.*}\\s*$/) === null) {\n    throw new Error('Parameters expects an Object');\n  }\n\n  var sanitizeName = function(name) {\n    return name.replace(/^[\\{,]?\\s*[\"']?/, '').replace(/[\"']?\\s*$/, '');\n  };\n\n  var sanitizeValue = function(value) {\n    var str = value.replace(/^(:)?\\s*/, '').replace(/\\s*$/, '');\n    return _resolveValue(str);\n  };\n\n  return str.match(reParseObjectLiteral).map(function(item, i, list) {\n    return i%2 === 0 ? sanitizeName(item) : sanitizeValue(item);\n  });\n};\n\n/**\n * Create a params Object from string\n * \n * @param {String} str A stringified version of Object literal\n */\nvar Parameters = function(str) {\n  str = str || '';\n\n  // Instance\n  var _self = {};\n\n  _listify(str).forEach(function(item, i, list) {\n    if(i%2 === 0) {\n      _self[item] = list[i+1];\n    }\n  });\n\n  return _self;\n};\n\nmodule.exports = Parameters;\n\nmodule.exports.resolveValue = _resolveValue;\nmodule.exports.listify = _listify;\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\nvar Url = require('./url');\n\n/**\n * Constructor\n */\nfunction UrlDictionary() {\n  this._patterns = [];\n  this._refs = [];\n  this._params = [];\n}\n\n/**\n * Associate a URL pattern with a reference\n * \n * @param  {String} pattern A URL pattern\n * @param  {Object} ref     A data Object\n */\nUrlDictionary.prototype.add = function(pattern, ref) {\n  pattern = pattern || '';\n  var _self = this;\n  var i = this._patterns.length;\n\n  var pathChain;\n  var params = {};\n\n  if(pattern.indexOf('?') === -1) {\n    pathChain = Url(pattern).path().split('/');\n\n  } else {\n    pathChain = Url(pattern).path().split('/');\n  }\n\n  // Start\n  var searchExpr = '^';\n\n  // Items\n  (pathChain.forEach(function(chunk, i) {\n    if(i!==0) {\n      searchExpr += '\\\\/';\n    }\n\n    if(chunk[0] === ':') {\n      searchExpr += '[^\\\\/?]*';\n      params[chunk.substring(1)] = new RegExp(searchExpr);\n\n    } else {\n      searchExpr += chunk;\n    }\n  }));\n\n  // End\n  searchExpr += '[\\\\/]?$';\n\n  this._patterns[i] = new RegExp(searchExpr);\n  this._refs[i] = ref;\n  this._params[i] = params;\n};\n\n/**\n * Find a reference according to a URL pattern and retrieve params defined in URL\n * \n * @param  {String} url      A URL to test for\n * @param  {Object} defaults A data Object of default parameter values\n * @return {Object}          A reference to a stored object\n */\nUrlDictionary.prototype.lookup = function(url, defaults) {\n  url = url || '';\n  var p = Url(url).path();\n  var q = Url(url).queryparams();\n\n  var _self = this;\n\n  // Check dictionary\n  var _findPattern = function(check) {\n    check = check || '';\n    for(var i=_self._patterns.length-1; i>=0; i--) {\n      if(check.match(_self._patterns[i]) !== null) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  var i = _findPattern(p);\n  \n  // Matching pattern found\n  if(i !== -1) {\n\n    // Retrieve params in pattern match\n    var params = {};\n    for(var n in this._params[i]) {\n      var paramParser = this._params[i][n];\n      var urlMatch = (url.match(paramParser) || []).pop() || '';\n      var varMatch = urlMatch.split('/').pop();\n      params[n] = varMatch;\n    }\n\n    // Retrieve params in querystring match\n    params = angular.extend(q, params);\n\n    return {\n      url: url,\n      ref: this._refs[i],\n      params: params\n    };\n\n  // Not in dictionary\n  } else {\n    return null;\n  }\n};\n\nmodule.exports = UrlDictionary;\n\n},{\"./url\":9}],9:[function(require,module,exports){\n'use strict';\n\nfunction Url(url) {\n  url = url || '';\n\n  // Instance\n  var _self = {\n\n    /**\n     * Get the path of a URL\n     * \n     * @return {String}     A querystring from URL\n     */\n    path: function() {\n      return url.indexOf('?') === -1 ? url : url.substring(0, url.indexOf('?'));\n    },\n\n    /**\n     * Get the querystring of a URL\n     * \n     * @return {String}     A querystring from URL\n     */\n    querystring: function() {\n      return url.indexOf('?') === -1 ? '' : url.substring(url.indexOf('?')+1);\n    },\n\n    /**\n     * Get the querystring of a URL parameters as a hash\n     * \n     * @return {String}     A querystring from URL\n     */\n    queryparams: function() {\n      var pairs = _self.querystring().split('&');\n      var params = {};\n\n      for(var i=0; i<pairs.length; i++) {\n        if(pairs[i] === '') continue;\n        var nameValue = pairs[i].split('=');\n        params[nameValue[0]] = (typeof nameValue[1] === 'undefined' || nameValue[1] === '') ? true : nameValue[1];\n      }\n\n      return params;\n    }\n  };\n\n  return _self;\n}\n\nmodule.exports = Url;\n\n},{}]},{},[2])\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["state-router.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","EventEmitter","this","_events","_maxListeners","undefined","isFunction","arg","isNumber","isObject","isUndefined","prototype","defaultMaxListeners","setMaxListeners","isNaN","TypeError","emit","type","er","handler","len","args","listeners","error","arguments","Array","apply","slice","addListener","listener","m","newListener","push","warned","console","trace","on","once","g","removeListener","fired","list","position","splice","removeAllListeners","key","ret","listenerCount","emitter",2,"$state","restrict","scope","link","element","attrs","css","change","sref","preventDefault",3,"angular","provider","factory","run","$rootScope","$urlManager","$on","location","$ready","directive","./directives/sref","./services/state-router","./services/url-manager",4,"process","UrlDictionary","Parameters","QueueHandler","_current","_initialLocation","_provider","_options","historyLength","_library","_cache","_urlDictionary","_layerList","_dispatcher","forEach","method","bind","_parseName","nameParams","match","npart","substring","indexOf","ppart","lastIndexOf","name","params","_setStateDefaults","data","inherit","_validateStateName","nameChain","split","_validateStateQuery","query","_compareStates","b","equals","_getNameChain","nameList","map","item","join","filter","_getState","state","stateChain","pname","parent","extend","copy","_defineState","url","add","options","hasOwnProperty","init","$get","$location","_iOptions","_iInitialLocation","_inst","_history","_isInit","_pushHistory","_changeState","useMiddleware","callback","nameExpr","request","nextState","prevState","queue","next","execute","err","$use","nextTick","parse","library","validate","history","lookup","ref","current","active","RegExp","casted","substr","transformed","../utils/parameters","../utils/process","../utils/queue-handler","../utils/url-dictionary","events",5,"_url","_self","_detectChange","lastUrl","nextUrl","_update","replace","update",6,"reParseObjectLiteral","reString","reNumber","_resolveValue","value","NaN","_listify","str","sanitizeName","sanitizeValue","resolveValue","listify",7,"_process","setTimeout",8,"_list","_data","constructor","concat","nextHandler","shift",9,"_patterns","_refs","_params","Url","pattern","pathChain","path","searchExpr","chunk","defaults","p","q","queryparams","_findPattern","check","paramParser","urlMatch","pop","varMatch","./url",10,"querystring","pairs","nameValue"],"mappings":"CAAA,QAAUA,GAAEC,EAAEC,EAAEC,GAAG,QAASC,GAAEC,EAAEC,GAAG,IAAIJ,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAC,GAAIE,GAAkB,kBAATC,UAAqBA,OAAQ,KAAIF,GAAGC,EAAE,MAAOA,GAAEF,GAAE,EAAI,IAAGI,EAAE,MAAOA,GAAEJ,GAAE,EAAI,IAAIK,GAAE,GAAIC,OAAM,uBAAuBN,EAAE,IAAK,MAAMK,GAAEE,KAAK,mBAAmBF,EAAE,GAAIG,GAAEX,EAAEG,IAAIS,WAAYb,GAAEI,GAAG,GAAGU,KAAKF,EAAEC,QAAQ,SAASd,GAAG,GAAIE,GAAED,EAAEI,GAAG,GAAGL,EAAG,OAAOI,GAAEF,EAAEA,EAAEF,IAAIa,EAAEA,EAAEC,QAAQd,EAAEC,EAAEC,EAAEC,GAAG,MAAOD,GAAEG,GAAGS,QAAkD,IAAI,GAA1CL,GAAkB,kBAATD,UAAqBA,QAAgBH,EAAE,EAAEA,EAAEF,EAAEa,OAAOX,IAAID,EAAED,EAAEE,GAAI,OAAOD,KAAKa,GAAG,SAAST,EAAQU,EAAOJ,GAsBvd,QAASK,KACPC,KAAKC,QAAUD,KAAKC,YACpBD,KAAKE,cAAgBF,KAAKE,eAAiBC,OAuQ7C,QAASC,GAAWC,GAClB,MAAsB,kBAARA,GAGhB,QAASC,GAASD,GAChB,MAAsB,gBAARA,GAGhB,QAASE,GAASF,GAChB,MAAsB,gBAARA,IAA4B,OAARA,EAGpC,QAASG,GAAYH,GACnB,MAAe,UAARA,EAlRTP,EAAOJ,QAAUK,EAGjBA,EAAaA,aAAeA,EAE5BA,EAAaU,UAAUR,QAAUE,OACjCJ,EAAaU,UAAUP,cAAgBC,OAIvCJ,EAAaW,oBAAsB,GAInCX,EAAaU,UAAUE,gBAAkB,SAAS7B,GAChD,IAAKwB,EAASxB,IAAU,EAAJA,GAAS8B,MAAM9B,GACjC,KAAM+B,WAAU,8BAElB,OADAb,MAAKE,cAAgBpB,EACdkB,MAGTD,EAAaU,UAAUK,KAAO,SAASC,GACrC,GAAIC,GAAIC,EAASC,EAAKC,EAAM9B,EAAG+B,CAM/B,IAJKpB,KAAKC,UACRD,KAAKC,YAGM,UAATc,KACGf,KAAKC,QAAQoB,OACbd,EAASP,KAAKC,QAAQoB,SAAWrB,KAAKC,QAAQoB,MAAMzB,QAAS,CAEhE,GADAoB,EAAKM,UAAU,GACXN,YAAczB,OAChB,KAAMyB,EAER,MAAMH,WAAU,wCAMpB,GAFAI,EAAUjB,KAAKC,QAAQc,GAEnBP,EAAYS,GACd,OAAO,CAET,IAAIb,EAAWa,GACb,OAAQK,UAAU1B,QAEhB,IAAK,GACHqB,EAAQtB,KAAKK,KACb,MACF,KAAK,GACHiB,EAAQtB,KAAKK,KAAMsB,UAAU,GAC7B,MACF,KAAK,GACHL,EAAQtB,KAAKK,KAAMsB,UAAU,GAAIA,UAAU,GAC3C,MAEF,SAGE,IAFAJ,EAAMI,UAAU1B,OAChBuB,EAAO,GAAII,OAAML,EAAM,GAClB7B,EAAI,EAAO6B,EAAJ7B,EAASA,IACnB8B,EAAK9B,EAAI,GAAKiC,UAAUjC,EAC1B4B,GAAQO,MAAMxB,KAAMmB,OAEnB,IAAIZ,EAASU,GAAU,CAG5B,IAFAC,EAAMI,UAAU1B,OAChBuB,EAAO,GAAII,OAAML,EAAM,GAClB7B,EAAI,EAAO6B,EAAJ7B,EAASA,IACnB8B,EAAK9B,EAAI,GAAKiC,UAAUjC,EAI1B,KAFA+B,EAAYH,EAAQQ,QACpBP,EAAME,EAAUxB,OACXP,EAAI,EAAO6B,EAAJ7B,EAASA,IACnB+B,EAAU/B,GAAGmC,MAAMxB,KAAMmB,GAG7B,OAAO,GAGTpB,EAAaU,UAAUiB,YAAc,SAASX,EAAMY,GAClD,GAAIC,EAEJ,KAAKxB,EAAWuB,GACd,KAAMd,WAAU,8BAuBlB,IArBKb,KAAKC,UACRD,KAAKC,YAIHD,KAAKC,QAAQ4B,aACf7B,KAAKc,KAAK,cAAeC,EACfX,EAAWuB,EAASA,UACpBA,EAASA,SAAWA,GAE3B3B,KAAKC,QAAQc,GAGTR,EAASP,KAAKC,QAAQc,IAE7Bf,KAAKC,QAAQc,GAAMe,KAAKH,GAGxB3B,KAAKC,QAAQc,IAASf,KAAKC,QAAQc,GAAOY,GAN1C3B,KAAKC,QAAQc,GAAQY,EASnBpB,EAASP,KAAKC,QAAQc,MAAWf,KAAKC,QAAQc,GAAMgB,OAAQ,CAC9D,GAAIH,EAIFA,GAHGpB,EAAYR,KAAKE,eAGhBH,EAAaW,oBAFbV,KAAKE,cAKP0B,GAAKA,EAAI,GAAK5B,KAAKC,QAAQc,GAAMnB,OAASgC,IAC5C5B,KAAKC,QAAQc,GAAMgB,QAAS,EAKC,kBAAlBC,SAAQC,OAOvB,MAAOjC,OAGTD,EAAaU,UAAUyB,GAAKnC,EAAaU,UAAUiB,YAEnD3B,EAAaU,UAAU0B,KAAO,SAASpB,EAAMY,GAM3C,QAASS,KACPpC,KAAKqC,eAAetB,EAAMqB,GAErBE,IACHA,GAAQ,EACRX,EAASH,MAAMxB,KAAMsB,YAVzB,IAAKlB,EAAWuB,GACd,KAAMd,WAAU,8BAElB,IAAIyB,IAAQ,CAcZ,OAHAF,GAAET,SAAWA,EACb3B,KAAKkC,GAAGnB,EAAMqB,GAEPpC,MAITD,EAAaU,UAAU4B,eAAiB,SAAStB,EAAMY,GACrD,GAAIY,GAAMC,EAAU5C,EAAQP,CAE5B,KAAKe,EAAWuB,GACd,KAAMd,WAAU,8BAElB,KAAKb,KAAKC,UAAYD,KAAKC,QAAQc,GACjC,MAAOf,KAMT,IAJAuC,EAAOvC,KAAKC,QAAQc,GACpBnB,EAAS2C,EAAK3C,OACd4C,EAAW,GAEPD,IAASZ,GACRvB,EAAWmC,EAAKZ,WAAaY,EAAKZ,WAAaA,QAC3C3B,MAAKC,QAAQc,GAChBf,KAAKC,QAAQoC,gBACfrC,KAAKc,KAAK,iBAAkBC,EAAMY,OAE/B,IAAIpB,EAASgC,GAAO,CACzB,IAAKlD,EAAIO,EAAQP,IAAM,GACrB,GAAIkD,EAAKlD,KAAOsC,GACXY,EAAKlD,GAAGsC,UAAYY,EAAKlD,GAAGsC,WAAaA,EAAW,CACvDa,EAAWnD,CACX,OAIJ,GAAe,EAAXmD,EACF,MAAOxC,KAEW,KAAhBuC,EAAK3C,QACP2C,EAAK3C,OAAS,QACPI,MAAKC,QAAQc,IAEpBwB,EAAKE,OAAOD,EAAU,GAGpBxC,KAAKC,QAAQoC,gBACfrC,KAAKc,KAAK,iBAAkBC,EAAMY,GAGtC,MAAO3B,OAGTD,EAAaU,UAAUiC,mBAAqB,SAAS3B,GACnD,GAAI4B,GAAKvB,CAET,KAAKpB,KAAKC,QACR,MAAOD,KAGT,KAAKA,KAAKC,QAAQoC,eAKhB,MAJyB,KAArBf,UAAU1B,OACZI,KAAKC,WACED,KAAKC,QAAQc,UACbf,MAAKC,QAAQc,GACff,IAIT,IAAyB,IAArBsB,UAAU1B,OAAc,CAC1B,IAAK+C,IAAO3C,MAAKC,QACH,mBAAR0C,GACJ3C,KAAK0C,mBAAmBC,EAI1B,OAFA3C,MAAK0C,mBAAmB,kBACxB1C,KAAKC,WACED,KAKT,GAFAoB,EAAYpB,KAAKC,QAAQc,GAErBX,EAAWgB,GACbpB,KAAKqC,eAAetB,EAAMK,OAG1B,MAAOA,EAAUxB,QACfI,KAAKqC,eAAetB,EAAMK,EAAUA,EAAUxB,OAAS,GAI3D,cAFOI,MAAKC,QAAQc,GAEbf,MAGTD,EAAaU,UAAUW,UAAY,SAASL,GAC1C,GAAI6B,EAOJ,OAHEA,GAHG5C,KAAKC,SAAYD,KAAKC,QAAQc,GAE1BX,EAAWJ,KAAKC,QAAQc,KACxBf,KAAKC,QAAQc,IAEdf,KAAKC,QAAQc,GAAMU,YAI7B1B,EAAa8C,cAAgB,SAASC,EAAS/B,GAC7C,GAAI6B,EAOJ,OAHEA,GAHGE,EAAQ7C,SAAY6C,EAAQ7C,QAAQc,GAEhCX,EAAW0C,EAAQ7C,QAAQc,IAC5B,EAEA+B,EAAQ7C,QAAQc,GAAMnB,OAJtB,QAwBJmD,GAAG,SAAS3D,EAAQU,EAAOJ,GACjC,YAEAI,GAAOJ,SAAW,SAAU,SAAUsD,GACpC,OACEC,SAAU,IACVC,SAEAC,KAAM,SAASD,EAAOE,EAASC,GAC7BD,EAAQE,IAAI,SAAU,WACtBF,EAAQlB,GAAG,QAAS,SAAStD,GAC3BoE,EAAOO,OAAOF,EAAMG,MACpB5E,EAAE6E,4BAOJC,GAAG,SAAStE,EAAQU,EAAOJ,GACjC,YAKsB,oBAAXI,IAA6C,mBAAZJ,IAA2BI,EAAOJ,UAAYA,IACxFI,EAAOJ,QAAU,wBAInBiE,QAAQ7D,OAAO,2BAEZ8D,SAAS,SAAUxE,EAAQ,4BAE3ByE,QAAQ,cAAezE,EAAQ,2BAE/B0E,KAAK,aAAc,cAAe,SAAU,SAASC,EAAYC,EAAahB,GAE7Ee,EAAWE,IAAI,yBAA0B,WACvCD,EAAYE,SAAS5C,aAIvB0B,EAAOmB,YAGRC,UAAU,OAAQhF,EAAQ,wBAE1BiF,oBAAoB,EAAEC,0BAA0B,EAAEC,yBAAyB,IAAIC,GAAG,SAASpF,EAAQU,EAAOJ,GAC7G,YAEA,IAAIK,GAAeX,EAAQ,UAAUW,aACjC0E,EAAUrF,EAAQ,oBAClBsF,EAAgBtF,EAAQ,2BACxBuF,EAAavF,EAAQ,uBACrBwF,EAAexF,EAAQ,yBAE3BU,GAAOJ,QAAU,WAEf,GAGImF,GAqBAC,EAxBAC,EAAY/E,KAMZgF,GACFC,cAAe,GAIbC,KACAC,KAGAC,EAAiB,GAAIV,GAGrBW,KAGAC,EAAc,GAAIvF,IAOpB,cACA,KACA,OACA,iBACA,qBACA,YACA,QACAwF,QAAQ,SAASC,GACjBT,EAAUS,GAAU7B,QAAQ8B,KAAKH,EAAaA,EAAYE,KAW5D,IAAIE,GAAa,SAASC,GACxB,GAAGA,GAAcA,EAAWC,MAAM,2BAA4B,CAC5D,GAAIC,GAAQF,EAAWG,UAAU,EAAGH,EAAWI,QAAQ,MACnDC,EAAQrB,EAAYgB,EAAWG,UAAUH,EAAWI,QAAQ,KAAK,EAAGJ,EAAWM,YAAY,MAE/F,QACEC,KAAML,EACNM,OAAQH,GAIV,OACEE,KAAMP,EACNQ,OAAQ,OAWVC,EAAoB,SAASC,GAK/B,MAFAA,GAAKC,QAAmC,mBAAjBD,GAAKC,SAA2B,EAAOD,EAAKC,QAE5DD,GASLE,EAAqB,SAASL,GAChCA,EAAOA,GAAQ,EAKf,KAAI,GADAM,GAAYN,EAAKO,MAAM,KACnBpH,EAAE,EAAGA,EAAEmH,EAAU5G,OAAQP,IAC/B,IAAImH,EAAUnH,GAAGuG,MAAM,iBACrB,OAAO,CAIX,QAAO,GASLc,EAAsB,SAASC,GACjCA,EAAQA,GAAS,EAKjB,KAAI,GADAH,GAAYG,EAAMF,MAAM,KACpBpH,EAAE,EAAGA,EAAEmH,EAAU5G,OAAQP,IAC/B,IAAImH,EAAUnH,GAAGuG,MAAM,2BACrB,OAAO,CAIX,QAAO,GAQLgB,EAAiB,SAASzH,EAAG0H,GAC/B,MAAOlD,SAAQmD,OAAO3H,EAAG0H,IASvBE,EAAgB,SAASb,GAC3B,GAAIc,GAAWd,EAAKO,MAAM,IAE1B,OAAOO,GACJC,IAAI,SAASC,EAAM7H,EAAGkD,GACrB,MAAOA,GAAKd,MAAM,EAAGpC,EAAE,GAAG8H,KAAK,OAEhCC,OAAO,SAASF,GACf,MAAgB,QAATA,KAUTG,EAAY,SAASnB,GACvBA,EAAOA,GAAQ,EAEf,IAAIoB,GAAQ,IAGZ,KAAIf,EAAmBL,GACrB,MAAO,KAGF,IAAGf,EAAOe,GACf,MAAOf,GAAOe,EAchB,KAAI,GAXAM,GAAYO,EAAcb,GAE1BqB,EAAaf,EACdS,IAAI,SAASO,GACZ,MAAOtC,GAASsC,KAEjBJ,OAAO,SAASK,GACf,MAAkB,QAAXA,IAIHpI,EAAEkI,EAAW3H,OAAO,EAAGP,GAAG,IAC7BkI,EAAWlI,KACZiI,EAAQ3D,QAAQ+D,OAAO/D,QAAQgE,KAAKJ,EAAWlI,IAAKiI,SAGnDA,GAAUA,EAAMhB,SALgBjH,KAWrC,MAFA8F,GAAOe,GAAQoB,EAERA,GAULM,EAAe,SAAS1B,EAAMG,GAChC,GAAY,OAATH,GAAiC,mBAATA,GACzB,KAAM,IAAI3G,OAAM,uBAGX,KAAIgH,EAAmBL,GAC5B,KAAM,IAAI3G,OAAM,sBAIlB,IAAI+H,GAAQ3D,QAAQgE,KAAKtB,EAmBzB,OAhBAD,GAAkBkB,GAGlBA,EAAMpB,KAAOA,EAGbhB,EAASgB,GAAQoB,EAGjBnC,KAGGmC,EAAMO,KACPzC,EAAe0C,IAAIR,EAAMO,IAAKP,GAGzBjB,EASTrG,MAAK+H,QAAU,SAASA,GAOtB,MANAA,GAAUA,MAEPA,EAAQC,eAAe,mBACxBhD,EAASC,cAAgB8C,EAAQ9C,eAG5BF,GAQT/E,KAAKsH,MAAQ,SAASpB,EAAMoB,GAC1B,MAAIA,IAGJM,EAAa1B,EAAMoB,GACZvC,GAHEsC,EAAUnB,IAarBlG,KAAKiI,KAAO,SAAS/B,EAAMC,GAKzB,MAJArB,IACEoB,KAAMA,EACNC,OAAQA,GAEHpB,GAMT/E,KAAKkI,MAAQ,YAAa,SAA4BC,GAEpD,GAAIC,GACAC,EAgHAC,EA/GAC,KACAC,GAAU,EAOVC,EAAe,SAASpC,GAE1B,GAAIpB,GAAgBmD,EAAUnD,eAAiB,CAE5CoB,IACDkC,EAASzG,KAAKuE,GAIbkC,EAAS3I,OAASqF,GACnBsD,EAAS9F,OAAO,EAAG8F,EAAS3I,OAASqF,IAYrCyD,EAAe,SAASxC,EAAMC,EAAQwC,EAAeC,GACvDzC,EAASA,MACTwC,EAAyC,mBAAlBA,IAAgC,EAAOA,CAG9D,IAAIE,GAAWnD,EAAWQ,EAC1BA,GAAO2C,EAAS3C,KAChBC,EAASxC,QAAQ+D,OAAOmB,EAAS1C,WAAcA,EAE/C,IAAI9E,GAAQ,KACRyH,GACF5C,KAAMA,EACNC,OAAQA,GAGN4C,EAAYpF,QAAQgE,KAAKN,EAAUnB,IACnC8C,EAAYnE,CAGbkE,KACDA,EAAU5C,OAASxC,QAAQ+D,OAAOqB,EAAU5C,WAAcA,GAI5D,IAAI8C,GAAQrE,IAAeyB,KAAKyC,EAG5BC,GAWMnC,EAAeoC,EAAWD,GAClClE,EAAWkE,GAMXE,EAAMnB,IAAI,SAASzB,EAAM6C,GACvB5D,EAAYxE,KAAK,eAAgBgI,GAG9BE,GAAWP,EAAaO,GAC3BnE,EAAWkE,EAEXG,MAICP,GACDM,EAAMnB,IAAIzC,GAIZ4D,EAAMnB,IAAI,SAASzB,EAAM6C,GACvB5D,EAAYxE,KAAK,aAAcgI,GAC/BI,QAnCF7H,EAAQ,GAAI9B,OAAM,oCAClB8B,EAAM7B,KAAO,WAEbyJ,EAAMnB,IAAI,SAASzB,EAAM6C,GACvB5D,EAAYxE,KAAK,iBAAkBO,EAAOyH,GAE1CI,EAAK7H,MAkCT4H,EAAME,QAAQ,SAASC,GAClBA,GACD9D,EAAYxE,KAAK,QAASsI,EAAKN,GAEjCxD,EAAYxE,KAAK,kBAAmBsI,EAAKN,GAEtCF,GACDA,EAASQ,KAmNf,OA5MAd,IAOEP,QAAS,WAMP,MAJIK,KACFA,EAAYzE,QAAQgE,KAAK3C,IAGpBoD,GAMTd,MAAO,SAASpB,EAAMoB,GACpB,MAAIA,IAGJM,EAAa1B,EAAMoB,GACZgB,GAHEjB,EAAUnB,IAYrBmD,KAAM,SAASpI,GACb,GAAsB,kBAAZA,GACR,KAAM,IAAI1B,OAAM,iCAIlB,OADA8F,GAAWvD,KAAKb,GACTqH,GAQTnE,OAAQ,WA6BN,MA5BIqE,KACFA,GAAU,EAGVJ,EAAYzE,QAAQgE,KAAK3C,GACtBF,IAAkBuD,EAAoB1E,QAAQgE,KAAK7C,IAEtDL,EAAQ6E,SAAS,WAGQ,KAApBnB,EAAUN,MACXS,EAAMH,UAAUA,EAAUN,MAAO,WAC/BvC,EAAYxE,KAAK,UAIXuH,EACRK,EAAaL,EAAkBnC,KAAMmC,EAAkBlC,QAAQ,EAAM,WACnEb,EAAYxE,KAAK,UAKnBwE,EAAYxE,KAAK,WAKhBwH,GAITiB,MAAO7D,EAGP8D,QAAS,WACP,MAAOtE,IAITuE,UACEvD,KAAMK,EACNI,MAAOD,GAITgD,QAAS,WACP,MAAOnB,IAUThF,OAAQ,SAAS2C,EAAMC,GAErB,MADA1B,GAAQ6E,SAAS3F,QAAQ8B,KAAK,KAAMiD,EAAcxC,EAAMC,GAAQ,IACzDmC,GAUTH,UAAW,SAASN,EAAKe,GACvB,GAAIvC,GAAOjB,EAAeuE,OAAO9B,EAEjC,IAAGxB,EAAM,CACP,GAAIiB,GAAQjB,EAAKuD,GAEdtC,IAED7C,EAAQ6E,SAAS3F,QAAQ8B,KAAK,KAAMiD,EAAcpB,EAAMpB,KAAMG,EAAKF,QAAQ,EAAOyC,IAItF,MAAON,IAQTuB,QAAS,WACP,MAAShF,GAAmBlB,QAAQgE,KAAK9C,GAApB,MAUvBiF,OAAQ,SAASnD,EAAOR,GAItB,GAHAQ,EAAQA,GAAS,IAGb9B,EACF,OAAO,CAGF,IAAG8B,YAAiBoD,QACzB,QAASlF,EAASqB,KAAKN,MAAMe,EAGxB,IAAoB,gBAAVA,GAAoB,CAGnC,GAAGA,EAAMf,MAAM,YAAa,CAC1B,GAAIoE,GAASrD,EAAMsD,OAAO,EAAGtD,EAAM/G,OAAO,EAC1C,SAASiF,EAASqB,KAAKN,MAAM,GAAImE,QAAOC,IAIxC,GAAIE,GAAcvD,EACfF,MAAM,KACNQ,IAAI,SAASC,GACZ,MAAY,MAATA,EACM,gBACU,OAATA,EACD,mBAEAA,IAGVC,KAAK,MAER,SAAStC,EAASqB,KAAKN,MAAM,GAAImE,QAAOG,IAK5C,OAAO,KAMT,cACA,KACA,OACA,iBACA,qBACA,YACA,QACA3E,QAAQ,SAASC,GACjB8C,EAAM9C,GAAU7B,QAAQ8B,KAAKH,EAAaA,EAAYE,MAGjD8C,OAKR6B,sBAAsB,EAAEC,mBAAmB,EAAEC,yBAAyB,EAAEC,0BAA0B,EAAEC,OAAS,IAAIC,GAAG,SAASpL,EAAQU,EAAOJ,GAC/I,YAEA,EAAA,GAAIK,GAAeX,EAAQ,UAAUW,YACjBX,GAAQ,2BAE5BU,EAAOJ,SAAW,SAAU,YAAa,SAASsD,EAAQmF,GACxD,GAAIsC,GAAOtC,EAAUN,MAGjB6C,EAAQ,GAAI3K,GAKZ4K,EAAgB,WAClB,GAAIC,GAAUH,EACVI,EAAU1C,EAAUN,KAErBgD,KAAYD,IACbH,EAAOI,EAEP7H,EAAOmF,UAAUsC,GACjBC,EAAM5J,KAAK,qBAOXgK,EAAU,WACZ,GAAIxD,GAAQtE,EAAO6G,SAEnB,IAAGvC,GAASA,EAAMO,IAAK,CACrB4C,EAAOnD,EAAMO,GAGb,IAAI1B,GAASmB,EAAMnB,UACnB,KAAI,GAAID,KAAQC,GACdsE,EAAOA,EAAKM,QAAQ,GAAIhB,QAAO,IAAI7D,EAAM,KAAMC,EAAOD,GAGxDiC,GAAUN,IAAI4C,GAGhBC,EAAM5J,KAAK,UAuBb,OAjBA4J,GAAMM,OAAS,WACbF,KAMFJ,EAAMxG,SAAW,WACfyG,EAAcrJ,YAIhB0B,EAAOqG,KAAK,SAASP,EAASI,GAC5B4B,IACA5B,MAGKwB,MAGNJ,0BAA0B,EAAEC,OAAS,IAAIU,GAAG,SAAS7L,EAAQU,EAAOJ,GACvE,YAGA,IAAIwL,GAAuB,mIAGvBC,EAAW,iBAKXC,EAAW,wDAUXC,EAAgB,SAASC,GAG3B,MAAa,SAAVA,GACM,EAGW,UAAVA,GACD,EAGW,SAAVA,EACD,KAGCA,EAAM1F,MAAMuF,GACbG,EAAMrB,OAAO,EAAGqB,EAAM1L,OAAO,GAG5B0L,EAAM1F,MAAMwF,IACZE,EAGU,QAAVA,EACDC,EAAAA,EAOFD,GAILE,EAAW,SAASC,GAKtB,GAFAA,EAAMA,EAAIV,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,IAEb,OAA9BU,EAAI7F,MAAM,gBACX,KAAM,IAAIrG,OAAM,+BAGlB,IAAImM,GAAe,SAASxF,GAC1B,MAAOA,GAAK6E,QAAQ,kBAAmB,IAAIA,QAAQ,YAAa,KAG9DY,EAAgB,SAASL,GAC3B,GAAIG,GAAMH,EAAMP,QAAQ,WAAY,IAAIA,QAAQ,OAAQ,GACxD,OAAOM,GAAcI,GAGvB,OAAOA,GAAI7F,MAAMsF,GAAsBjE,IAAI,SAASC,EAAM7H,EAAGkD,GAC3D,MAAOlD,GAAE,IAAM,EAAIqM,EAAaxE,GAAQyE,EAAczE,MAStDvC,EAAa,SAAS8G,GACxBA,EAAMA,GAAO,EAGb,IAAIf,KAQJ,OANAc,GAASC,GAAKlG,QAAQ,SAAS2B,EAAM7H,EAAGkD,GACnClD,EAAE,IAAM,IACTqL,EAAMxD,GAAQ3E,EAAKlD,EAAE,MAIlBqL,EAGT5K,GAAOJ,QAAUiF,EAEjB7E,EAAOJ,QAAQkM,aAAeP,EAC9BvL,EAAOJ,QAAQmM,QAAUL,OAEnBM,GAAG,SAAS1M,EAAQU,EAAOJ,GACjC,YAOA,IAAIqM,IACFzC,SAAU,SAASV,GACjBoD,WAAWpD,EAAU,IAIzB9I,GAAOJ,QAAUqM,OAEXE,GAAG,SAAS7M,EAAQU,EAAOJ,GACjC,YAKA,IAAIkF,GAAe,WACjB,GAAIsH,MACAC,EAAQ,KAERzB,GACF5C,IAAK,SAAS7G,GAMZ,MALGA,IAAWA,EAAQmL,cAAgB7K,MACpC2K,EAAQA,EAAMG,OAAOpL,GAErBiL,EAAMpK,KAAKb,GAENjB,MAGTqG,KAAM,SAASA,GAEb,MADA8F,GAAQ9F,EACDrG,MAGTmJ,QAAS,SAASP,GAChB,GAAI0D,IACJA,EAAc,WACZ,GAAIrL,GAAUiL,EAAMK,OAEpB,OAAItL,OAIJA,GAAQtB,KAAK,KAAMwM,EAAO,SAAS/C,GAG9BA,EACDR,EAASQ,GAITkD,MAXK1D,EAAS,WAqBxB,OAAO8B,GAGT5K,GAAOJ,QAAUkF,OAEX4H,GAAG,SAASpN,EAAQU,EAAOJ,GACjC,YAOA,SAASgF,KACP1E,KAAKyM,aACLzM,KAAK0M,SACL1M,KAAK2M,WARP,GAAIC,GAAMxN,EAAQ,QAiBlBsF,GAAcjE,UAAUqH,IAAM,SAAS+E,EAASjD,GAC9CiD,EAAUA,GAAW,EACrB,IAGIC,GAFAzN,EAAIW,KAAKyM,UAAU7M,OAGnBuG,IAGF2G,GAAYF,EAAIC,GAASE,OAAOtG,MADN,KAAzBoG,EAAQ9G,QAAQ,KACqB,IAGA,IAIxC,IAAIiH,GAAa,GAGhBF,GAAUvH,QAAQ,SAAS0H,EAAO5N,GAC1B,IAAJA,IACD2N,GAAc,OAGA,MAAbC,EAAM,IACPD,GAAc,WACd7G,EAAO8G,EAAMnH,UAAU,IAAM,GAAIiE,QAAOiD,IAGxCA,GAAcC,IAKlBD,GAAc,UAEdhN,KAAKyM,UAAUpN,GAAK,GAAI0K,QAAOiD,GAC/BhN,KAAK0M,MAAMrN,GAAKuK,EAChB5J,KAAK2M,QAAQtN,GAAK8G,GAUpBzB,EAAcjE,UAAUkJ,OAAS,SAAS9B,EAAKqF,GAC7CrF,EAAMA,GAAO,EACb,IAAIsF,GAAIP,EAAI/E,GAAKkF,OACbK,EAAIR,EAAI/E,GAAKwF,cAEb3C,EAAQ1K,KAGRsN,EAAe,SAASC,GAC1BA,EAAQA,GAAS,EACjB,KAAI,GAAIlO,GAAEqL,EAAM+B,UAAU7M,OAAO,EAAGP,GAAG,EAAGA,IACxC,GAAuC,OAApCkO,EAAM3H,MAAM8E,EAAM+B,UAAUpN,IAC7B,MAAOA,EAGX,OAAO,IAGLA,EAAIiO,EAAaH,EAGrB,IAAS,KAAN9N,EAAU,CAGX,GAAI8G,KACJ,KAAI,GAAIrH,KAAKkB,MAAK2M,QAAQtN,GAAI,CAC5B,GAAImO,GAAcxN,KAAK2M,QAAQtN,GAAGP,GAC9B2O,GAAY5F,EAAIjC,MAAM4H,QAAoBE,OAAS,GACnDC,EAAWF,EAAShH,MAAM,KAAKiH,KACnCvH,GAAOrH,GAAK6O,EAMd,MAFAxH,GAASxC,QAAQ+D,OAAO0F,EAAGjH,IAGzB0B,IAAKA,EACL+B,IAAK5J,KAAK0M,MAAMrN,GAChB8G,OAAQA,GAKV,MAAO,OAIXrG,EAAOJ,QAAUgF,IAEdkJ,QAAQ,KAAKC,IAAI,SAASzO,EAAQU,EAAOJ,GAC5C,YAEA,SAASkN,GAAI/E,GACXA,EAAMA,GAAO,EAGb,IAAI6C,IAOFqC,KAAM,WACJ,MAA4B,KAArBlF,EAAI9B,QAAQ,KAAc8B,EAAMA,EAAI/B,UAAU,EAAG+B,EAAI9B,QAAQ,OAQtE+H,YAAa,WACX,MAA4B,KAArBjG,EAAI9B,QAAQ,KAAc,GAAK8B,EAAI/B,UAAU+B,EAAI9B,QAAQ,KAAK,IAQvEsH,YAAa,WAIX,IAAI,GAHAU,GAAQrD,EAAMoD,cAAcrH,MAAM,KAClCN,KAEI9G,EAAE,EAAGA,EAAE0O,EAAMnO,OAAQP,IAC3B,GAAgB,KAAb0O,EAAM1O,GAAT,CACA,GAAI2O,GAAYD,EAAM1O,GAAGoH,MAAM,IAC/BN,GAAO6H,EAAU,IAA+B,mBAAjBA,GAAU,IAAuC,KAAjBA,EAAU,IAAa,EAAOA,EAAU,GAGzG,MAAO7H,IAIX,OAAOuE,GAGT5K,EAAOJ,QAAUkN,YAEN","file":"state-router.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$state', function ($state) {\n  return {\n    restrict: 'A',\n    scope: {\n    },\n    link: function(scope, element, attrs) {\n      element.css('cursor', 'pointer');\n      element.on('click', function(e) {\n        $state.change(attrs.sref);\n        e.preventDefault();\n      });\n    }\n\n  };\n}];\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\n/* global angular:false */\n\n// CommonJS\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = 'angular-state-router';\n}\n\n// Instantiate module\nangular.module('angular-state-router', [])\n\n  .provider('$state', require('./services/state-router'))\n\n  .factory('$urlManager', require('./services/url-manager'))\n\n  .run(['$rootScope', '$urlManager', '$state', function($rootScope, $urlManager, $state) {\n    // Update location changes\n    $rootScope.$on('$locationChangeSuccess', function() {\n      $urlManager.location(arguments);\n    });\n\n    // Initialize\n    $state.$ready();\n  }])\n\n  .directive('sref', require('./directives/sref'));\n\n},{\"./directives/sref\":2,\"./services/state-router\":4,\"./services/url-manager\":5}],4:[function(require,module,exports){\n'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar process = require('../utils/process');\nvar UrlDictionary = require('../utils/url-dictionary');\nvar Parameters = require('../utils/parameters');\nvar QueueHandler = require('../utils/queue-handler');\n\nmodule.exports = function StateRouterProvider() {\n  // Instance\n  var _provider = this;\n\n  // Current state\n  var _current;\n\n  // Options\n  var _options = {\n    historyLength: 5\n  };\n\n  // Library\n  var _library = {};\n  var _cache = {};\n\n  // URL to state dictionary\n  var _urlDictionary = new UrlDictionary();\n\n  // Middleware layers\n  var _layerList = [];\n\n  // Delegated EventEmitter\n  var _dispatcher = new EventEmitter();\n\n  // Inital location\n  var _initialLocation;\n\n  // Wrap provider methods\n  [\n    'addListener', \n    'on', \n    'once', \n    'removeListener', \n    'removeAllListeners', \n    'listeners', \n    'emit', \n  ].forEach(function(method) {\n    _provider[method] = angular.bind(_dispatcher, _dispatcher[method]);\n  });\n\n  /**\n   * Parse state notation name-params.  \n   * \n   * Assume all parameter values are strings\n   * \n   * @param  {String} nameParams A name-params string\n   * @return {Object}             A name string and param Object\n   */\n  var _parseName = function(nameParams) {\n    if(nameParams && nameParams.match(/^[a-zA-Z0-9_\\.]*\\(.*\\)$/)) {\n      var npart = nameParams.substring(0, nameParams.indexOf('('));\n      var ppart = Parameters( nameParams.substring(nameParams.indexOf('(')+1, nameParams.lastIndexOf(')')) );\n\n      return {\n        name: npart,\n        params: ppart\n      };\n\n    } else {\n      return {\n        name: nameParams,\n        params: null\n      };\n    }\n  };\n\n  /**\n   * Add default values to a state\n   * \n   * @param  {Object} data An Object\n   * @return {Object}      An Object\n   */\n  var _setStateDefaults = function(data) {\n\n    // Default values\n    data.inherit = (typeof data.inherit === 'undefined') ? true : data.inherit;\n\n    return data;\n  };\n\n  /**\n   * Validate state name\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @return {Boolean}       True if name is valid, false if not\n   */\n  var _validateStateName = function(name) {\n    name = name || '';\n\n    // TODO optimize with RegExp\n\n    var nameChain = name.split('.');\n    for(var i=0; i<nameChain.length; i++) {\n      if(!nameChain[i].match(/[a-zA-Z0-9_]+/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Validate state query\n   * \n   * @param  {String} query  A query for the state; using dot-notation\n   * @return {Boolean}       True if name is valid, false if not\n   */\n  var _validateStateQuery = function(query) {\n    query = query || '';\n    \n    // TODO optimize with RegExp\n\n    var nameChain = query.split('.');\n    for(var i=0; i<nameChain.length; i++) {\n      if(!nameChain[i].match(/(\\*(\\*)?|[a-zA-Z0-9_]+)/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Compare two states, compares values.  \n   * \n   * @return {Boolean} True if states are the same, false if states are different\n   */\n  var _compareStates = function(a, b) {\n    return angular.equals(a, b);\n  };\n\n  /**\n   * Get a list of parent states\n   * \n   * @param  {String} name   A unique identifier for the state; using dot-notation\n   * @return {Array}         An Array of parent states\n   */\n  var _getNameChain = function(name) {\n    var nameList = name.split('.');\n\n    return nameList\n      .map(function(item, i, list) {\n        return list.slice(0, i+1).join('.');\n      })\n      .filter(function(item) {\n        return item !== null;\n      });\n  };\n\n  /**\n   * Internal method to crawl library heirarchy\n   * \n   * @param  {String} name   A unique identifier for the state; using state-notation\n   * @return {Object}        A state data Object\n   */\n  var _getState = function(name) {\n    name = name || '';\n\n    var state = null;\n\n    // Only use valid state queries\n    if(!_validateStateName(name)) {\n      return null;\n    \n    // Use cache if exists\n    } else if(_cache[name]) {\n      return _cache[name];\n    }\n\n    var nameChain = _getNameChain(name);\n\n    var stateChain = nameChain\n      .map(function(pname) {\n        return _library[pname];\n      })\n      .filter(function(parent) {\n        return parent !== null;\n      });\n\n    // Walk up checking inheritance\n    for(var i=stateChain.length-1; i>=0; i--) {\n      if(stateChain[i]) {\n        state = angular.extend(angular.copy(stateChain[i]), state || {});\n      }\n\n      if(state && !state.inherit) break;\n    }\n\n    // Store in cache\n    _cache[name] = state;\n\n    return state;\n  };\n\n  /**\n   * Internal method to store a state definition.  Parameters should be included in data Object not state name.  \n   * \n   * @param  {String} name A unique identifier for the state; using state-notation\n   * @param  {Object} data A state definition data Object\n   * @return {Object}      A state data Object\n   */\n  var _defineState = function(name, data) {\n    if(name === null || typeof name === 'undefined') {\n      throw new Error('Name cannot be null.');\n    \n    // Only use valid state names\n    } else if(!_validateStateName(name)) {\n      throw new Error('Invalid state name.');\n    }\n\n    // Create state\n    var state = angular.copy(data);\n\n    // Use defaults\n    _setStateDefaults(state);\n\n    // Named state\n    state.name = name;\n\n    // Set definition\n    _library[name] = state;\n\n    // Reset cache\n    _cache = {};\n\n    // URL mapping\n    if(state.url) {\n      _urlDictionary.add(state.url, state);\n    }\n\n    return data;\n  };\n\n  /**\n   * Set configuration data parameters for StateRouter\n   *\n   * @param  {Object}         options A data Object\n   * @return {$stateProvider}         Itself; chainable\n   */\n  this.options = function(options) {\n    options = options || {};\n\n    if(options.hasOwnProperty('historyLength')) {\n      _options.historyLength = options.historyLength;\n    }\n\n    return _provider;\n  };\n\n  /**\n   * Set/get state\n   * \n   * @return {$stateProvider} Itself; chainable\n   */\n  this.state = function(name, state) {\n    if(!state) {\n      return _getState(name);\n    }\n    _defineState(name, state);\n    return _provider;\n  };\n\n  /**\n   * Set initialization parameters; deferred to $ready()\n   * \n   * @param  {String}         name   A iniital state\n   * @param  {Object}         params A data object of params\n   * @return {$stateProvider}        Itself; chainable\n   */\n  this.init = function(name, params) {\n    _initialLocation = {\n      name: name,\n      params: params\n    };\n    return _provider;\n  };\n\n  /**\n   * Get instance\n   */\n  this.$get = ['$location', function StateRouterFactory($location) {\n\n    var _iOptions;\n    var _iInitialLocation;\n    var _history = [];\n    var _isInit = false;\n\n    /**\n     * Internal method to add history and correct length\n     * \n     * @param  {Object} data An Object\n     */\n    var _pushHistory = function(data) {\n      // Keep the last n states (e.g. - defaults 5)\n      var historyLength = _iOptions.historyLength || 5;\n\n      if(data) {\n        _history.push(data);\n      }\n\n      // Update length\n      if(_history.length > historyLength) {\n        _history.splice(0, _history.length - historyLength);\n      }\n    };\n\n    /**\n     * Internal method to change to state.  Parameters in `params` takes precedence over state-notation `name` expression.  \n     * \n     * @param  {String}   name          A unique identifier for the state; using state-notation including optional parameters\n     * @param  {Object}   params        A data object of params\n     * @param  {Boolean}  useMiddleware A flag to trigger middleware\n     * @param  {Function} [callback]    A callback, function(err)\n     */\n    var _changeState = function(name, params, useMiddleware, callback) {\n      params = params || {};\n      useMiddleware = typeof useMiddleware === 'undefined' ? true : useMiddleware;\n\n      // Parse state-notation expression\n      var nameExpr = _parseName(name);\n      name = nameExpr.name;\n      params = angular.extend(nameExpr.params || {}, params);\n\n      var error = null;\n      var request = {\n        name: name,\n        params: params\n      };\n\n      var nextState = angular.copy(_getState(name));\n      var prevState = _current;\n\n      // Set parameters\n      if(nextState) {\n        nextState.params = angular.extend(nextState.params || {}, params);\n      }\n\n      // Compile execution phases\n      var queue = QueueHandler().data(request);\n\n      // Does not exist\n      if(!nextState) {\n        error = new Error('Requested state was not defined.');\n        error.code = 'notfound';\n\n        queue.add(function(data, next) {\n          _dispatcher.emit('error:notfound', error, request);\n\n          next(error);\n        });\n\n      // State not changed\n      } else if(_compareStates(prevState, nextState)) {\n        _current = nextState;\n\n      // Exists\n      } else {\n\n        // Process started\n        queue.add(function(data, next) {\n          _dispatcher.emit('change:begin', request);\n\n          // Valid state exists\n          if(prevState) _pushHistory(prevState);\n          _current = nextState;\n\n          next();\n        });\n\n        // Add middleware\n        if(useMiddleware) {\n          queue.add(_layerList);\n        }\n\n        // Process ended\n        queue.add(function(data, next) {\n          _dispatcher.emit('change:end', request);\n          next();\n        });\n      }\n\n      // Run\n      queue.execute(function(err) {\n        if(err) {\n          _dispatcher.emit('error', err, request);\n        }\n        _dispatcher.emit('change:complete', err, request);\n\n        if(callback) {\n          callback(err);\n        }\n      });\n    };\n\n    // Instance\n    var _inst;\n    _inst = {\n\n      /**\n       * Get options\n       *\n       * @return {Object} A configured options\n       */\n      options: function() {\n        // Hasn't been initialized\n        if(!_iOptions) {\n          _iOptions = angular.copy(_options);\n        }\n\n        return _iOptions;\n      },\n\n      /**\n       * Set/get state\n       */\n      state: function(name, state) {\n        if(!state) {\n          return _getState(name);\n        }\n        _defineState(name, state);\n        return _inst;\n      },\n\n      /**\n       * Internal method to add middleware, executing next(err);\n       * \n       * @param  {Function}    handler A callback, function(request, next)\n       * @return {$state}              Itself; chainable\n       */\n      $use: function(handler) {\n        if(typeof handler !== 'function') {\n          throw new Error('Middleware must be a function.');\n        }\n\n        _layerList.push(handler);\n        return _inst;\n      },\n\n      /**\n       * Internal method to perform initialization\n       * \n       * @return {$state} Itself; chainable\n       */\n      $ready: function() {\n        if(!_isInit) {\n          _isInit = true;\n\n          // Configuration\n          _iOptions = angular.copy(_options);\n          if(_initialLocation) _iInitialLocation = angular.copy(_initialLocation);\n\n          process.nextTick(function() {\n\n            // Initial location\n            if($location.url() !== '') {\n              _inst.$location($location.url(), function() {\n                _dispatcher.emit('init');\n              });\n\n            // Initialize with state\n            } else if(_iInitialLocation) {\n              _changeState(_iInitialLocation.name, _iInitialLocation.params, true, function() {\n                _dispatcher.emit('init');\n              });\n\n            // Initialize only\n            } else {\n              _dispatcher.emit('init');\n            }\n          });\n        }\n\n        return _inst;\n      },\n\n      // Parse state notation name-params.  \n      parse: _parseName,\n\n      // Retrieve definition of states\n      library: function() {\n        return _library;\n      },\n\n      // Validation\n      validate: {\n        name: _validateStateName,\n        query: _validateStateQuery\n      },\n\n      // Retrieve history\n      history: function() {\n        return _history;\n      },\n\n      /**\n       * Change state, asynchronous operation\n       * \n       * @param  {String}      name     A unique identifier for the state; using dot-notation\n       * @param  {Object}      [params] A parameters data object\n       * @return {$state}               Itself; chainable\n       */\n      change: function(name, params) {\n        process.nextTick(angular.bind(null, _changeState, name, params, true));\n        return _inst;\n      },\n\n      /**\n       * Internal method to change state based on $location.url(), asynchronous operation using internal methods, quiet fallback.  \n       * \n       * @param  {String}      url        A url matching defind states\n       * @param  {Function}    [callback] A callback, function(err)\n       * @return {$state}                 Itself; chainable\n       */\n      $location: function(url, callback) {\n        var data = _urlDictionary.lookup(url);\n\n        if(data) {\n          var state = data.ref;\n\n          if(state) {\n            // Parse params from url\n            process.nextTick(angular.bind(null, _changeState, state.name, data.params, false, callback));\n          }\n        }\n\n        return _inst;\n      },\n      \n      /**\n       * Retrieve copy of current state\n       * \n       * @return {Object} A copy of current state\n       */\n      current: function() {\n        return (!_current) ? null : angular.copy(_current);\n      },\n\n      /**\n       * Check query against current state\n       *\n       * @param  {Mixed}   query  A string using state notation or a RegExp\n       * @param  {Object}  params A parameters data object\n       * @return {Boolean}        A true if state is parent to current state\n       */\n      active: function(query, params) {\n        query = query || '';\n        \n        // No state\n        if(!_current) {\n          return false;\n\n        // Use RegExp matching\n        } else if(query instanceof RegExp) {\n          return !!_current.name.match(query);\n\n        // String; state dot-notation\n        } else if(typeof query === 'string') {\n\n          // Cast string to RegExp\n          if(query.match(/^\\/.*\\/$/)) {\n            var casted = query.substr(1, query.length-2);\n            return !!_current.name.match(new RegExp(casted));\n\n          // Transform to state notation\n          } else {\n            var transformed = query\n              .split('.')\n              .map(function(item) {\n                if(item === '*') {\n                  return '[a-zA-Z0-9_]*';\n                } else if(item === '**') {\n                  return '[a-zA-Z0-9_\\\\.]*';\n                } else {\n                  return item;\n                }\n              })\n              .join('\\\\.');\n\n            return !!_current.name.match(new RegExp(transformed));\n          }\n        }\n\n        // Non-matching\n        return false;\n      }\n    };\n\n    // Wrap instance methods\n    [\n      'addListener', \n      'on', \n      'once', \n      'removeListener', \n      'removeAllListeners', \n      'listeners', \n      'emit', \n    ].forEach(function(method) {\n      _inst[method] = angular.bind(_dispatcher, _dispatcher[method]);\n    });\n\n    return _inst;\n  }];\n\n};\n\n},{\"../utils/parameters\":6,\"../utils/process\":7,\"../utils/queue-handler\":8,\"../utils/url-dictionary\":9,\"events\":1}],5:[function(require,module,exports){\n'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar UrlDictionary = require('../utils/url-dictionary');\n\nmodule.exports = ['$state', '$location', function($state, $location) {\n  var _url = $location.url();\n\n  // Instance of EventEmitter\n  var _self = new EventEmitter();\n\n  /**\n   * Detect URL change and dispatch state change\n   */\n  var _detectChange = function() {\n    var lastUrl = _url;\n    var nextUrl = $location.url();\n\n    if(nextUrl !== lastUrl) {\n      _url = nextUrl;\n\n      $state.$location(_url);\n      _self.emit('update:location');\n    }\n  };\n\n  /**\n   * Update URL based on state\n   */\n  var _update = function() {\n    var state = $state.current();\n\n    if(state && state.url) {\n      _url = state.url;\n\n      // Add parameters or use default parameters\n      var params = state.params || {};\n      for(var name in params) {\n        _url = _url.replace(new RegExp(':'+name, 'g'), params[name]);\n      }\n\n      $location.url(_url);\n    }\n\n    _self.emit('update');\n  };\n\n  /**\n   * Update url based on state\n   */\n  _self.update = function() {\n    _update();\n  };\n\n  /**\n   * Location was updated; force update detection\n   */\n  _self.location = function() {\n    _detectChange(arguments);\n  };\n\n  // Register middleware layer\n  $state.$use(function(request, next) {\n    _update();\n    next();\n  });\n\n  return _self;\n}];\n\n},{\"../utils/url-dictionary\":9,\"events\":1}],6:[function(require,module,exports){\n'use strict';\n\n// Parse Object literal name-value pairs\nvar reParseObjectLiteral = /([,{]\\s*((\"|')(.*?)\\3|\\w*)|(:\\s*([+-]?(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[eE][+-]?\\d+)?|true|false|null|(\"|')(.*?)\\7|\\[[^\\]]*\\])))/g;\n\n// Match Strings\nvar reString = /^(\"|')(.*?)\\1$/;\n\n// TODO Add escaped string quotes \\' and \\\" to string matcher\n\n// Match Number (int/float/exponential)\nvar reNumber = /^[+-]?(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[eE][+-]?\\d+)?$/;\n\n/**\n * Parse string value into Boolean/Number/Array/String/null.\n *\n * Strings are surrounded by a pair of matching quotes\n * \n * @param  {String} value A String value to parse\n * @return {Mixed}        A Boolean/Number/Array/String/null\n */\nvar _resolveValue = function(value) {\n\n  // Boolean: true\n  if(value === 'true') {\n    return true;\n\n  // Boolean: false\n  } else if(value === 'false') {\n    return false;\n\n  // Null\n  } else if(value === 'null') {\n    return null;\n\n  // String\n  } else if(value.match(reString)) {\n    return value.substr(1, value.length-2);\n\n  // Number\n  } else if(value.match(reNumber)) {\n    return +value;\n\n  // NaN\n  } else if(value === 'NaN') {\n    return NaN;\n\n  // TODO add matching with Arrays and parse\n  \n  }\n\n  // Unable to resolve\n  return value;\n};\n\n// Find values in an object literal\nvar _listify = function(str) {\n\n  // Trim\n  str = str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n\n  if(str.match(/^\\s*{.*}\\s*$/) === null) {\n    throw new Error('Parameters expects an Object');\n  }\n\n  var sanitizeName = function(name) {\n    return name.replace(/^[\\{,]?\\s*[\"']?/, '').replace(/[\"']?\\s*$/, '');\n  };\n\n  var sanitizeValue = function(value) {\n    var str = value.replace(/^(:)?\\s*/, '').replace(/\\s*$/, '');\n    return _resolveValue(str);\n  };\n\n  return str.match(reParseObjectLiteral).map(function(item, i, list) {\n    return i%2 === 0 ? sanitizeName(item) : sanitizeValue(item);\n  });\n};\n\n/**\n * Create a params Object from string\n * \n * @param {String} str A stringified version of Object literal\n */\nvar Parameters = function(str) {\n  str = str || '';\n\n  // Instance\n  var _self = {};\n\n  _listify(str).forEach(function(item, i, list) {\n    if(i%2 === 0) {\n      _self[item] = list[i+1];\n    }\n  });\n\n  return _self;\n};\n\nmodule.exports = Parameters;\n\nmodule.exports.resolveValue = _resolveValue;\nmodule.exports.listify = _listify;\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\n/* global window:false */\n/* global process:false */\n/* global setImmediate:false */\n/* global setTimeout:false */\n\nvar _process = {\n  nextTick: function(callback) {\n    setTimeout(callback, 0);\n  }\n};\n\nmodule.exports = _process;\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\n/**\n * Execute a series of functions; used in tandem with middleware\n */\nvar QueueHandler = function() {\n  var _list = [];\n  var _data = null;\n\n  var _self = {\n    add: function(handler) {\n      if(handler && handler.constructor === Array) {\n        _list = _list.concat(handler);\n      } else {\n        _list.push(handler);\n      }\n      return this;\n    },\n\n    data: function(data) {\n      _data = data;\n      return this;\n    },\n\n    execute: function(callback) {\n      var nextHandler;\n      nextHandler = function() {\n        var handler = _list.shift();\n\n        if(!handler) {\n          return callback(null);\n        }\n\n        handler.call(null, _data, function(err) {\n\n          // Error\n          if(err) {\n            callback(err);\n\n          // Continue\n          } else {\n            nextHandler();\n          }\n        });\n      };\n\n      nextHandler();\n    }\n\n  };\n  \n  return _self;\n};\n\nmodule.exports = QueueHandler;\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nvar Url = require('./url');\n\n/**\n * Constructor\n */\nfunction UrlDictionary() {\n  this._patterns = [];\n  this._refs = [];\n  this._params = [];\n}\n\n/**\n * Associate a URL pattern with a reference\n * \n * @param  {String} pattern A URL pattern\n * @param  {Object} ref     A data Object\n */\nUrlDictionary.prototype.add = function(pattern, ref) {\n  pattern = pattern || '';\n  var _self = this;\n  var i = this._patterns.length;\n\n  var pathChain;\n  var params = {};\n\n  if(pattern.indexOf('?') === -1) {\n    pathChain = Url(pattern).path().split('/');\n\n  } else {\n    pathChain = Url(pattern).path().split('/');\n  }\n\n  // Start\n  var searchExpr = '^';\n\n  // Items\n  (pathChain.forEach(function(chunk, i) {\n    if(i!==0) {\n      searchExpr += '\\\\/';\n    }\n\n    if(chunk[0] === ':') {\n      searchExpr += '[^\\\\/?]*';\n      params[chunk.substring(1)] = new RegExp(searchExpr);\n\n    } else {\n      searchExpr += chunk;\n    }\n  }));\n\n  // End\n  searchExpr += '[\\\\/]?$';\n\n  this._patterns[i] = new RegExp(searchExpr);\n  this._refs[i] = ref;\n  this._params[i] = params;\n};\n\n/**\n * Find a reference according to a URL pattern and retrieve params defined in URL\n * \n * @param  {String} url      A URL to test for\n * @param  {Object} defaults A data Object of default parameter values\n * @return {Object}          A reference to a stored object\n */\nUrlDictionary.prototype.lookup = function(url, defaults) {\n  url = url || '';\n  var p = Url(url).path();\n  var q = Url(url).queryparams();\n\n  var _self = this;\n\n  // Check dictionary\n  var _findPattern = function(check) {\n    check = check || '';\n    for(var i=_self._patterns.length-1; i>=0; i--) {\n      if(check.match(_self._patterns[i]) !== null) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  var i = _findPattern(p);\n  \n  // Matching pattern found\n  if(i !== -1) {\n\n    // Retrieve params in pattern match\n    var params = {};\n    for(var n in this._params[i]) {\n      var paramParser = this._params[i][n];\n      var urlMatch = (url.match(paramParser) || []).pop() || '';\n      var varMatch = urlMatch.split('/').pop();\n      params[n] = varMatch;\n    }\n\n    // Retrieve params in querystring match\n    params = angular.extend(q, params);\n\n    return {\n      url: url,\n      ref: this._refs[i],\n      params: params\n    };\n\n  // Not in dictionary\n  } else {\n    return null;\n  }\n};\n\nmodule.exports = UrlDictionary;\n\n},{\"./url\":10}],10:[function(require,module,exports){\n'use strict';\n\nfunction Url(url) {\n  url = url || '';\n\n  // Instance\n  var _self = {\n\n    /**\n     * Get the path of a URL\n     * \n     * @return {String}     A querystring from URL\n     */\n    path: function() {\n      return url.indexOf('?') === -1 ? url : url.substring(0, url.indexOf('?'));\n    },\n\n    /**\n     * Get the querystring of a URL\n     * \n     * @return {String}     A querystring from URL\n     */\n    querystring: function() {\n      return url.indexOf('?') === -1 ? '' : url.substring(url.indexOf('?')+1);\n    },\n\n    /**\n     * Get the querystring of a URL parameters as a hash\n     * \n     * @return {String}     A querystring from URL\n     */\n    queryparams: function() {\n      var pairs = _self.querystring().split('&');\n      var params = {};\n\n      for(var i=0; i<pairs.length; i++) {\n        if(pairs[i] === '') continue;\n        var nameValue = pairs[i].split('=');\n        params[nameValue[0]] = (typeof nameValue[1] === 'undefined' || nameValue[1] === '') ? true : nameValue[1];\n      }\n\n      return params;\n    }\n  };\n\n  return _self;\n}\n\nmodule.exports = Url;\n\n},{}]},{},[3])\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n"],"sourceRoot":"/source/"}
{"name":"StateRouter","tagline":"StateRouter is an AngularJS state-based router designed for flexibility and ease of use.","body":"StateRouter\r\n===========\r\n\r\n[![Build Status](https://travis-ci.org/henrytseng/angular-state-router.svg?branch=master)](https://travis-ci.org/henrytseng/angular-state-router) [![Join the chat at https://gitter.im/henrytseng/angular-state-router](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/henrytseng/angular-state-router?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) \r\n\r\nAn AngularJS state-based router designed for flexibility and ease of use.  \r\n\r\n[StateRouter](https://www.npmjs.com/package/angular-state-router) is designed to be used in a modular integration with components:\r\n\r\n* [StateView](https://www.npmjs.com/package/angular-state-view)\r\n\t* Provides nested view management with template support\r\n* [StateLoadable](https://www.npmjs.com/package/angular-state-loadable)\r\n\t* A lazy loading scheme\r\n\r\nWhile not required, StateRouter was originally developed with Browserify.  \r\n\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nTo install in your project, simply install from npm \r\n\r\n\tnpm install angular-state-router --save\r\n\r\n\r\n\r\nQuick Start\r\n-----------\r\n\r\nInclude the `state-router.min.js` script tag in your `.html`:\r\n\r\n\t<html ng-app=\"myApp\">\r\n\t  <head>\r\n\t    <script src=\"/node_modules/angular/angular.min.js\"></script>\r\n\t    <script src=\"/node_modules/angular-state-router/dist/state-router.min.js\"></script>\r\n\t    <script src=\"/js/app.js\"></script>\r\n\t  </head>\r\n\t  <body>\r\n\t    ...\r\n\t  </body>\r\n\t</html>\r\n\r\nIn `app.js` add `angular-state-router` as a dependency when your application module is instantiated.  \r\n\r\nAnd **define** your states and optionally an **default initial location**\r\n\r\n\tangular.module('myApp', ['angular-state-router']);\r\n\t  .config(function($stateProvider) {\r\n\r\n\t    $stateProvider\r\n\r\n\t      // Define states\r\n\t      .state('landing', {\r\n\t        url: '/'\r\n\t      })\r\n\r\n\t      .state('products.listing', {\r\n\t        url: '/products', \r\n\t        params: {\r\n\t        \tcatalog: '1b'\r\n\t        }\r\n\t      })\r\n\r\n\t      .state('products', {\r\n\t        url: '/products/:id'\r\n\t      })\r\n\r\n\t      .state('account', {\r\n\t        url: '/account'\r\n\t      })\r\n\r\n\t      // Set initialization location; optionally\r\n\t      .init('landing');\r\n\r\n\t  })\r\n\t  \r\n\t  .controller('MyController', function($state) {\r\n\t  \r\n\t  \t // Get the current state\r\n\t    var current = $state.current();\r\n\t    \r\n\t  });\r\n\r\n\r\n\r\nStates\r\n------\r\n\r\nStateRouter is design for building applications that can be represented with a [finite-state machine model](https://en.wikipedia.org/wiki/Finite-state_machine) (FSM), a computational model.  \r\n\r\nStates are represented through data objects with an associated dot-notation name.  Child states inherit from parent states by default.  \r\n\r\n### Definition\r\n\r\nStates must be first defined.  This is usually done in the angular **configuration phase** with `$stateProvider` but *can* also be done later with `$state`.   \r\n\r\n\tangular.module('myApp')\r\n\t  .config(function($stateProvider) {\r\n\t  \r\n\t    $stateProvider\r\n\t      .state('account', {\r\n\t        url: '/accounts',\r\n\t        params: { endpoint: '2998293e' }\r\n\t      })\r\n\t      \r\n\t      .state('account.profile', {\r\n\t        url: '/accounts/:id'\r\n\t      })\r\n\t      \r\n\t      .state('account.transactions', {\r\n\t        url: '/accounts/:id/transactions',\r\n\t        inherit: false\r\n\t      });\r\n\t  });\r\n\r\nOnce a state is defined a transition to the state can be made.\r\n\r\n\tangular.module('myApp')\r\n\t  .controller('MyController', function($scope, $state) {\r\n\r\n\t    $scope.buttonClick = function() {\r\n\t    \r\n\t      // Update\r\n\t      $state.change('products.catalogs.items.variations', { \r\n\t        item: '423', \r\n\t        catalog: 'e534', \r\n\t        variation: '320902'\r\n\t      });\r\n\t      \r\n\t    };\r\n\t    \r\n\t  });\r\n\r\n\r\n\r\n### Initialization\r\n\r\nInitialization occurs automatically when the application is kicked-started.  \r\n\r\n`$location.url()` will be checked for an initial location during initialization, if $location.url() has not been set then an alternative default initial location is used if it exists.  \r\n\r\nThe initialization process is as follows:\r\n\r\n1. Configuration Phase\r\n\t- Define states\r\n\t- Optionally define \"initial location\"\r\n2. Run Phase\r\n\t- Initialization, during application kick-started\r\n\t- Initial state set as `$location.url()`, if not empty\r\n\t- Initial state falls back to \"initial location\"\r\n\r\nAn initialization `$stateInit` event is broadcasted on `$rootScope`.  \r\n\r\nTo listen to the init event:\r\n\r\n\tangular.module('myApp')\r\n\t  .controller('MyController', function($rootScope) {\r\n\t  \r\n\t    $rootScope.$on('$stateInit', function() {\r\n\t    \r\n\t    \t// Responding code\r\n\t    \r\n\t    });\r\n\t  \r\n\t  });\r\n\r\n\r\n\r\n### Usage\r\n\r\nAfter states are defined a transition can be made\r\n\r\n\t// Change state\r\n\t$state.change('account.profile', { employee: 'e92792-2389' });\r\n\r\nState changes are *asynchronous* operations.  \r\n\r\nCurrent states can be checked using the `active` method which accepts a state notation query\r\n\r\n\t<li ng-class=\"{'active': $state.active('company') }\"><a href=\"#\" sref=\"company\">Company</a></li>\r\n\r\nAnd in the same method a state can be triggered using the `sref` attribute.  \r\n\r\n\t<a href=\"#\" sref=\"company\">Company</a>\r\n\r\nParameters can be sent similarly\r\n\r\n\t<a href=\"#\" sref=\"company({id:'Lorem ipsum'})\">Company</a>\r\n\r\n\r\n\r\n### Inheritance\r\n\r\nStates inherit from each other through a parent-child relationship by default; where `campus` is the parent of `campus.classrooms` state.  \r\n\r\nA child state will inherit from it's each of its parents until a `inherit` value of `false` value is encountered (with exception to `resolve` and `templates` properties).  \r\n\r\nFor example, given this definition\r\n\r\n\tangular.module('myApp')\r\n\t  .config(function($stateProvider) {\r\n\t  \r\n\t    $stateProvider\r\n\t      .state('campus', {\r\n\t        url: '/campus',\r\n\t        params: { availability: false }\r\n\t      })\r\n\t      \r\n\t      .state('campus.classrooms', {\r\n\t        url: '/campus/rms/:id',\r\n\t        params: { size: 30 }\r\n\t      });\r\n\r\n\t  });\r\n\r\nWe see that `campus.classrooms` will have a `params` value\r\n\r\n\t{ \r\n\t  availability: false,\r\n\t  size: 30\r\n\t}\r\n\r\nWhere `availability` is inherited from `campus`, its parent\r\n\r\n\r\n\r\nResolve\r\n-------\r\n\r\nStates that include a resolve property will resolve all promises and store results in the `locals` Object, where they can be accessed `$state.current().locals`.  \r\n\r\n\tangular.module('myApp')\r\n\t  .config(function($stateProvider) {\r\n\t  \r\n\t    $stateProvider\r\n\t      .state('stories', {\r\n\t        url: '/storyteller/stories',\r\n\t        \r\n\t        resolve: {\r\n\t          story: function(StoryService) {\r\n\t            return StoryService.get();\r\n\t          }\r\n\t\r\n\t        }\r\n\t      });\r\n\t  })\r\n\t  .controller('StoryController', function($state) {\r\n\t    console.log($state.current().locals);\r\n\t  });\r\n\t\r\n`locals` is has with the following value at the completion of the state transition:\r\n\t\r\n\t{\r\n\t  story: 'Lorem ipsum'\r\n\t}\r\n\r\n\r\n\r\nEvents\r\n------\r\n\r\nEvents are broadcast on the `$rootScope`.  \r\n\r\n\r\n### $stateInit\r\n\r\nThis event is emitted when $state is initialized.  If an initial state is specified `$stateInit` occurs after the current state is set.  \r\n\r\n\r\n\r\n### $stateChangeBegin\r\n\r\n* `request` *Object* Requested data `{ name: 'nextState', params: {} }`\r\n\r\nThis event is emitted when a requested change to a valid state exists.  \r\n\r\n\r\n\r\n### $stateChangeError\r\n\r\n* `request` *Object* Requested data `{ name: 'nextState', params: {} }`\r\n\r\nThis event is emitted whenever an error occurs.  \r\n\r\n\r\n\r\n### $stateChangeErrorNotFound\r\n\r\n* `request` *Object* Requested data `{ name: 'nextState', params: {} }`\r\n\r\nThis event is emitted when a state cannot be found and no parent state(s) exist.  \r\n\r\n\r\n\r\n### $stateChangeErrorResolve\r\n\r\nThis event is emitted when an error occurred during resolve.  \r\n\r\n\r\n\r\n### $stateChangeEnd\r\n\r\n* `request` *Object* Requested data `{ name: 'nextState', params: {} }`\r\n\r\nThis event occurs when a valid state change successfully finishes.  This event does not trigger when an error was encountered.  Use the `'change'` event for all change requests.  \r\n\r\n\r\n\r\n### $stateChangeComplete\r\n\r\n* `error`   *Object* Null if successful, `Error` object if error occurs\r\n* `request` *Object* Requested data `{ name: 'nextState', params: {} }`\r\n\r\nThis event occurs when a state change is finished.  This event is always triggered on any change request.  Also occurs *after* 'error' is emitted.  \r\n\r\n\r\n\r\nState Notation\r\n--------------\r\n\r\nStates use dot-notation where state names are `/[a-zA-Z0-9_]*/` strings separated by dots `.` and are case sensitive.  \r\n\r\nThe following are examples of valid unique state names:\r\n\r\n\tochestra1.trombone.position.6\r\n\tochestra1.clarinet\r\n\tochestra56.clarinet\r\n\tochestra1\r\n\r\n\r\n### Parameters\r\n\r\nData Objects can be included in an expression (not query) given by Object literal notation.  Using name-value pairs of Boolean/Number/String/null.\r\n\r\nThey are expressed using parenthesis `()` surrounding the Object literal at the end of a state expression.  \r\n\r\n\tochestra1.trombone.position.6({id:'49829f', color:329, custom:true})\r\n\r\n\r\n### Queries\r\n\r\nThe following are examples of state notation queries that would match the state `ochestra1.trombone.position.6`\r\n\r\n\tochestra1\r\n\tochestra1.trombone\r\n\tochestra1.trombone.position\r\n\tochestra1.trombone.position.6\r\n\r\n\r\n### Wildcards\r\n\r\nQueries can also use wildcards `*` to match any one state or `**` to match any pattern of states following or preceding.  \r\n\r\nBoth of the following will match the state `catalog.index.list`\r\n\r\n\tcatalog.*.list\r\n\tcatalog.**\r\n\r\n\r\n\r\nURLs\r\n----\r\n\r\nURLs in state definitions take the form:\r\n\r\n\t$stateProvider.state('events.details', {\r\n\t  url: '/events/:eventid',\r\n\t    params: {\r\n\t      eventid: 'init'\r\n\t    }\r\n\t  })\r\n\r\nWhere parameters are specified in URLs using variable names starting with a colon, e.g. - `:id`.  And a default value can be specified using a `params` Object.  \r\n\r\nTo retrieve the current state and its parameter values use (e.g. - for example finding the value of `eventid`):\r\n\r\n\t$state.current().params.eventid\r\n\r\n\r\n### Query String\r\n\r\nQuery string values are also set in the params object.  \r\n\r\nGiven the URL `http://test.com/#/events/birthday_event?color=blue`\r\n\r\n\tassert(params).equal({\r\n\t\teventid: 'birthday_event',\r\n\t\tcolor: 'blue'\r\n\t});\r\n\r\n\r\n\r\nComponents\r\n----------\r\n\r\nComponents register themselves as middleware layers and respond to state changes.  \r\n\r\n* [StateView](https://www.npmjs.com/package/angular-state-view)\r\n* [StateLoadable](https://www.npmjs.com/package/angular-state-loadable)\r\n\r\n### Building a Custom Component\r\n\r\nTo build your own components simply register your the middleware with the `$state.$use()` method.  \r\n\r\n`$use` expects a function signature `function(request, next)` where `request` is data Object containing data for the current state transition and `next` is a completion callback.  \r\n\r\n\tangular.module('myComponent', ['angular-state-router'])\r\n\r\n\t  .factory(function($state) {\r\n\r\n\t    // Register middleware layer\r\n\t    $state.$use(function(request, next) {\r\n\t    \r\n\t      // ... Perform work\r\n\t    \r\n\t      // Asynchronous completion\r\n\t      next();\r\n\r\n\t    });\r\n\r\n\t  });\r\n\r\nComponent operate asynchronously and `next` must be called.  \r\n\r\n\r\n\r\nContribute\r\n----------\r\n\r\nIf you've got ideas on how to make StateRouter better create an issue and mark an enhancement in Github.  \r\n\r\nIf there are any unreported errors please let us know.  We'd like StateRouter to give as much feedback as possible to eliminate common problems that may occur during development.  \r\n\r\nTo get start programming, build\r\n\r\n\tnpm install\r\n\tgulp\r\n\r\nTo get started watch files for programming\r\n\r\n\tgulp watch\r\n\r\nTo host the example\r\n\r\n\tnpm run-script example\r\n\r\nThen using your browser visit [http://localhost:3000/index.html](http://localhost:3000/index.html)\r\n\r\n\r\n\r\nLicense\r\n-------\r\n\r\nCopyright (c) 2015 Henry Tseng\r\n\r\nReleased under the MIT license. See LICENSE for details.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
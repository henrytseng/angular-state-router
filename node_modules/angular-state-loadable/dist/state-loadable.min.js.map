{"version":3,"sources":["state-loadable.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","angular","factory","run","$loadableManager","$ready","./services/loadable-manager",2,"$state","$q","$rootScope","_head","_self","_loadableHash","_loadingList","_completedList","_Loadable","src","_deferred","defer","_loadable","isComplete","promise","$element","document","createElement","type","async","insertBefore","firstChild","push","onload","onreadystatechange","this","readyState","parentNode","removeChild","indexOf","splice","resolve","_getProgress","loaded","total","Math","min","max","_createLoadable","loadable","error","$broadcast","then","_load","deferred","current","sources","load","all","map","filter","err","reject","$load","get","progress","element","querySelector","$use","request","next","$on","reload"],"mappings":"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","file":"state-loadable.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n/* global angular:false */\n\n// CommonJS\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = 'angular-state-loadable';\n}\n\n// Assume polyfill used in StateRouter exists\n\n// Instantiate module\nangular.module('angular-state-loadable', ['angular-state-router'])\n\n  .factory('$loadableManager', require('./services/loadable-manager'))\n\n  .run(['$loadableManager', function($loadableManager) {\n    $loadableManager.$ready();\n  }]);\n\n},{\"./services/loadable-manager\":2}],2:[function(require,module,exports){\n'use strict';\n\n/* global document:false */\n\nmodule.exports = ['$state', '$q', '$rootScope', function($state, $q, $rootScope) {\n\n  // DOM target\n  var _head;\n\n  // Instance\n  var _self = {};\n\n  // Library\n  var _loadableHash = {};\n\n  // Progress\n  var _loadingList = [];\n  var _completedList = [];\n\n  /**\n   * A loaded resource, adds self to DOM, self manage progress\n   * \n   * @return {_Loadable} An instance\n   */\n  var _Loadable = function(src) {\n    var _deferred = $q.defer();\n\n    // Instance\n    var _loadable = {\n\n      src: src,\n\n      // Loading completion flag\n      isComplete: false,\n\n      promise: _deferred.promise,\n\n      // TODO switch to $document\n      $element: document.createElement('script')\n    };\n\n    // Build DOM element\n    _loadable.$element.src = src;\n    _loadable.$element.type = 'text/javascript';\n    _loadable.$element.async = false;\n\n    _head.insertBefore(_loadable.$element, _head.firstChild);\n\n    // Mark loading in progress\n    _loadingList.push(_loadable);\n\n    // Completion\n    _loadable.$element.onload = _loadable.$element.onreadystatechange = function() {\n\n      if(!_loadable.isComplete && (!this.readyState || this.readyState === \"loaded\" || this.readyState === \"complete\")) {\n        _loadable.isComplete = true;\n        _loadable.$element.onload = _loadable.$element.onreadystatechange = null;\n        \n        if(_head && _loadable.$element.parentNode) {\n          _head.removeChild(_loadable.$element);\n        }\n\n        // Mark complete\n        var i = _loadingList.indexOf(_loadable);\n        if(i !== -1) {\n          _loadingList.splice(i, 1);\n        }\n        _completedList.push(_loadable);\n\n        _deferred.resolve(_loadable);\n      }\n    };\n\n    return _loadable;\n  };\n\n  /**\n   * Get progress\n   * \n   * @return {Number} A number 0..1 denoting progress\n   */\n  var _getProgress = function() {\n    var loaded = _loadingList.length;\n    var total = _loadingList.length + _completedList.length;\n    return Math.min(1, Math.max(0, loaded/total));\n  };\n\n  /**\n   * Create a _Loadable.  Does not replace previously created instances.  \n   * \n   * @param  {String}    src A source path for script asset\n   * @return {_Loadable}     A loadable instance\n   */\n  var _createLoadable = function(src) {\n    var loadable;\n\n    // Valid state name required\n    if(!src || src === '') {\n      var error;\n      error = new Error('Loadable requires a valid source.');\n      error.code = 'invalidname';\n      throw error;\n    }\n\n    // Already exists\n    if(_loadableHash[src]) {\n      loadable = _loadableHash[src];\n\n    // Create new\n    } else {\n      // Create new instance\n      loadable = new _Loadable(src);\n      _loadableHash[src] = loadable;\n\n      // Broadcast creation, progress\n      $rootScope.$broadcast('$loadableCreated', loadable);\n      $rootScope.$broadcast('$loadableProgress', _getProgress());\n\n      // Completion\n      loadable.promise.then(function() {\n\n        // Broadcast complete\n        $rootScope.$broadcast('$loadableProgress', _getProgress());\n        if(_loadingList.length === 0) {\n          $rootScope.$broadcast('$loadableComplete', loadable);\n        }\n      });\n    }\n\n    return loadable;\n  };\n\n  /**\n   * Load all required items\n   * \n   * @return {Promise} A promise fulfilled when the resources are loaded\n   */\n  var _load = function() {\n    var deferred = $q.defer();\n\n    var current = $state.current();\n\n    // Evaluate\n    if(current) {\n      var sources = (typeof current.load === 'string' ? [current.load] : current.load) || [];\n      \n      // Get promises\n      $q.all(sources\n        .map(function(src) {\n          return _createLoadable(src);\n        })\n        .filter(function(loadable) {\n          return !loadable.isComplete;\n        })\n        .map(function(loadable) {\n          return loadable.promise;\n        })\n      )\n          .then(function() {\n            deferred.resolve();\n\n          }, function(err) {\n            $rootScope.$broadcast('$loadableError', err);\n            deferred.reject(err);\n          });\n\n    // No state\n    } else {\n      deferred.resolve();\n    }\n\n    return deferred.promise;\n  };\n  _self.$load = _load;\n\n  /**\n   * Create a loadable, get reference to existing methods\n   * \n   * @param  {String}    src A source path for script asset\n   * @return {Promise}       A promise fulfilled when the resource is loaded\n   */\n  _self.get = function(src) {\n    return _createLoadable(src).promise;\n  };\n\n  /**\n   * Get progress\n   * \n   * @return {Number} A number 0..1 denoting current progress\n   */\n  _self.progress = _getProgress;\n\n  /**\n   * Ready\n   */\n  _self.$ready = function() {\n    _head = angular.element(document.querySelector('head'))[0];\n\n    // Register middleware layer\n    $state.$use(function(request, next) {\n      next();\n\n      // Load after state change is finished to avoid collision\n      request.promise.then(function() {\n        _load();\n      });\n\n    }, 1);\n\n    // Refresh after all loadables are done\n    $rootScope.$on('$loadableComplete', function() {\n      $state.reload();\n    });\n  };\n\n  return _self;\n}];\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n"],"sourceRoot":"/source/"}
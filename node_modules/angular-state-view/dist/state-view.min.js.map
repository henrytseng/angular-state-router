{"version":3,"sources":["state-view.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","$state","$viewManager","$templateCache","$compile","$controller","$q","restrict","priority","scope","link","$element","attrs","_view","create","id","render","template","controller","locals","deferred","defer","html","contents","_locals","angular","extend","$scope","$parent","resolve","promise","reset","empty","on","destroy",2,"factory","directive","./directives/state-view","./services/view-manager",3,"View","$rootScope","$injector","_self","_viewHash","_activeSet","_resetActive","resetPromised","forEach","view","when","all","_getTemplate","data","isString","invoke","_renderView","then","current","_update","callback","viewsPromised","templates","controllers","$update","_unregister","_register","get","$use","request","next","err","$broadcast","../view/view",4,"child"],"mappings":"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","file":"state-view.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$state', '$viewManager', '$templateCache', '$compile', '$controller', '$q', function ($state, $viewManager, $templateCache, $compile, $controller, $q) {\n  return {\n    restrict: 'EA',\n    priority: 400,\n    scope: {\n\n    },\n    link: function(scope, $element, attrs) {\n      // Create view\n      var _view = $viewManager.create(attrs.id, {\n\n        // Element\n        $element: $element,\n\n        /**\n         * Render view\n         * \n         * @param  {String}  template   A template to use\n         * @param  {Mixed}   controller A controller to attach applied to scope.$parent\n         * @param  {Object}  locals     A data Object to instantiate controller with\n         * @return {Promise}            A promise resolved when rendering is complete\n         */\n        render: function(template, controller, locals) {\n          var deferred = $q.defer();\n\n          $element.html(template);\n\n          // Compile\n          var link = $compile($element.contents());\n\n          // Controller\n          if(controller) {\n            var _locals = angular.extend({}, locals || {}, {\n              $scope: scope.$parent\n            });\n            $controller(controller, _locals);\n          }\n\n          // Link\n          link(scope.$parent);\n\n          deferred.resolve();\n          return deferred.promise;\n        },\n\n        /**\n         * Reset view\n         * \n         * @return {Promise} A promise resolved when rendering is complete\n         */\n        reset: function() {\n          var deferred = $q.defer();\n\n          // Empty\n          $element.empty();\n\n          deferred.resolve();\n          return deferred.promise;\n        }\n      });\n\n      // Destroy\n      $element.on('$destroy', function() {\n        _view.destroy();\n      });\n    }\n  };\n}];\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\n/* global angular:false */\n\n// CommonJS\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = 'angular-state-view';\n}\n\n// Assume polyfill used in StateRouter exists\n\n// Instantiate module\nangular.module('angular-state-view', ['angular-state-router'])\n\n  .factory('$viewManager', require('./services/view-manager'))\n\n  .directive('sview', require('./directives/state-view'));\n\n},{\"./directives/state-view\":1,\"./services/view-manager\":3}],3:[function(require,module,exports){\n'use strict';\n\n/* global window:false */\n\nvar View = require('../view/view');\n\nmodule.exports = ['$rootScope', '$state', '$injector', '$q', function($rootScope, $state, $injector, $q) {\n\n  // Instance\n  var _self = {};\n\n  var _viewHash = {};\n  var _activeSet = {};\n\n  /**\n   * Reset active views\n   * \n   * @return {Promise} A promise fulfilled when currently active views are reset\n   */\n  var _resetActive = function() {\n    // Reset views\n    var resetPromised = {};\n    angular.forEach(_activeSet, function(view, id) {\n      resetPromised[id] = $q.when(view.reset());\n    });\n\n    // Empty active set\n    _activeSet = {};\n\n    return $q.all(resetPromised);\n  };\n\n  /**\n   * Get templates\n   * \n   * @param  {Mixed}   data Template data, String src to include or Function invocation\n   * @return {Promise}      A promise fulfilled when templates retireved\n   */\n  var _getTemplate = function(data) {\n    var template = angular.isString(data) ? '<ng-include src=\"\\''+data+'\\'\"></ng-include>' : $injector.invoke(data);\n    return $q.when(template);\n  };\n\n  /**\n   * Render a view\n   * \n   * @param  {String}  id     Unique identifier for view\n   * @param  {View}    view   A view instance\n   * @param  {Mixed}   data   Template data, String src to include or Function invocation\n   * @return {Promise}        A promise fulfilled when currently active view is rendered\n   */\n  var _renderView = function(id, view, data, controller) {\n    return _getTemplate(data).then(function(template) {\n\n      // Controller\n      if(controller) {\n        var current = $state.current();\n        return view.render(template, controller, current.locals);\n\n      // Template only\n      } else {\n        return view.render(template);\n      }\n    });\n  };\n\n  /**\n   * Update rendered views\n   *\n   * @param {Function} callback A completion callback, function(err)\n   */\n  var _update = function(callback) {\n    // Activate current\n    var current = $state.current();\n\n    if(current) {\n\n      // Reset\n      _resetActive().then(function() {\n\n        // Render\n        var viewsPromised = {};\n        var templates = current.templates || {};\n        var controllers = current.controllers || {};\n        angular.forEach(templates, function(template, id) {\n          if(_viewHash[id]) {\n            var view = _viewHash[id];\n            var controller = controllers[id];\n            viewsPromised[id] = _renderView(id, view, template, controller);\n            _activeSet[id] = view;\n          }\n        });\n\n        $q.all(viewsPromised).then(function() {\n          callback();\n        }, callback);\n\n      }, callback);\n\n    // None\n    } else {\n      callback();\n    }\n  };\n  _self.$update = _update;\n\n  /**\n   * Unregister a view\n   * \n   * @param  {String}       id Unique identifier for view\n   * @return {$viewManager}    Itself, chainable\n   */\n  var _unregister = function(id) {\n    delete _viewHash[id];\n  };\n\n  /**\n   * Register a view, also implements destroy method on view to unregister from manager\n   * \n   * @param  {String}       id   Unique identifier for view\n   * @param  {View}         view A view instance\n   * @return {$viewManager}      Itself, chainable\n   */\n  var _register = function(id, view) {\n    // No id\n    if(!id) {\n      throw new Error('View requires an id.');\n\n    // Require unique id\n    } else if(_viewHash[id]) {\n      throw new Error('View requires a unique id');\n\n    // Add\n    } else {\n      _viewHash[id] = view;\n    }\n\n    // Check if view is currently active\n    var current = $state.current() || {};\n    var templates = current.templates || {};\n    var controllers = current.controllers || {};\n    if(!!templates[id]) {\n      _renderView(id, view, templates[id], controllers[id]);\n    }\n\n    // Implement destroy method\n    view.destroy = function() {\n      _unregister(id);\n    };\n\n    return view;\n  };\n\n  /**\n   * A factory method to create a View instance\n   * \n   * @param  {String} id   Unique identifier for view\n   * @param  {Object} data A data object used to extend abstract methods\n   * @return {View}        A View entitity\n   */\n  _self.create = function(id, data) {\n    data = data || {};\n\n    // Create\n    var view = View(id, data);\n\n    // Register\n    return _register(id, view);\n  };\n\n  /**\n   * Get a view by id\n   * \n   * @param  {String} id Unique identifier for view\n   * @return {View}      A View entitity\n   */\n  _self.get = function(id) {\n    return _viewHash[id];\n  };\n\n  // Register middleware layer\n  $state.$use(function(request, next) {\n    _update(function(err) {\n      if(err) {\n        $rootScope.$broadcast('$viewError', err);\n      } else {\n        $rootScope.$broadcast('$viewRender');\n      }\n\n      next(err);\n    });\n  }, -1);\n\n  return _self;\n}];\n\n},{\"../view/view\":4}],4:[function(require,module,exports){\n'use strict';\n\n/**\n * View\n *\n * @param  {String} id      Unique identifier for view\n * @param  {Object} child   A data object used to extend abstract methods\n * @return {View}           An abstract view object\n */\nmodule.exports = function View(id, child) {\n\n  // Instance\n  var _self;\n  _self = {\n\n    /**\n     * Abstract render method\n     */\n    render: function(template) { },\n\n    /**\n     * Abstract reset method\n     */\n    reset: function() { },\n\n    /**\n     * Abstract destroy method\n     */\n    destroy: function() { }\n\n  };\n\n  // Extend to overwrite abstract methods\n  angular.extend(_self, child);\n\n  return _self;\n};\n\n},{}]},{},[2])\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n"],"sourceRoot":"/source/"}